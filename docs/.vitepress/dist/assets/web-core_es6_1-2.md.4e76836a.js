import{_ as l,C as p,o,c as e,k as s,H as t,a,Q as c}from"./chunks/framework.5b0c684c.js";const q=JSON.parse('{"title":"解构赋值","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/es6/1-2.md","filePath":"web-core/es6/1-2.md","lastUpdated":1729031503000}'),r={name:"web-core/es6/1-2.md"},E=s("h1",{id:"解构赋值",tabindex:"-1"},[a("解构赋值 "),s("a",{class:"header-anchor",href:"#解构赋值","aria-label":'Permalink to "解构赋值"'},"​")],-1),y=s("p",null,"解构赋值语法是一种 Javascript 表达式。可以将数组中的值或对象的属性取出，赋值给其他变量。—— MDN",-1),i=s("blockquote",null,[s("p",null,"我的理解是：解构赋值是为了便捷处理 数组、对象、函数参数的拓展。（不去专门研究对原始数据类型的解构，不钻这个牛角尖）。")],-1),F=s("p",null,"ES6 允许按照一定模式，从目标数据中提取值，对变量进行赋值，这被称为解构（Destructuring）。",-1),d=s("p",null,"如“匹配不到”变量，值就等于undefined。",-1),u=c(`<h2 id="绑定与赋值" tabindex="-1">绑定与赋值 <a class="header-anchor" href="#绑定与赋值" aria-label="Permalink to &quot;绑定与赋值&quot;">​</a></h2><p>对于对象和数组的解构，有两种解构模式：<code>绑定模式</code>和<code>赋值模式</code>，它们的语法略有不同。</p><div class="info custom-block"><p class="custom-block-title"><strong>绑定模式</strong>：</p><p>以声明关键字（var、let 或 const）开始，然后，每个单独的属性必须绑定到一个变量或进一步解构。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: { c: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> } };</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">: { </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">d</span><span style="color:#E1E4E8;"> }} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj; </span><span style="color:#6A737D;">// 这里绑定了两个变量：\`a\`和\`d\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: { c: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> } };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">: { </span><span style="color:#E36209;">c</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">d</span><span style="color:#24292E;"> }} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj; </span><span style="color:#6A737D;">// 这里绑定了两个变量：\`a\`和\`d\`</span></span></code></pre></div><p>因为所有变量共享相同的声明，可以解构两次获得可修改的和只读的数据：使用 let（可修改），使用 const（只读）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: { c: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> } };</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj; </span><span style="color:#6A737D;">// a 只读 不可重新赋值</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">: { </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">: d }} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj; </span><span style="color:#6A737D;">// d 可重新赋值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: { c: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> } };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj; </span><span style="color:#6A737D;">// a 只读 不可重新赋值</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">b</span><span style="color:#24292E;">: { </span><span style="color:#E36209;">c</span><span style="color:#24292E;">: d }} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj; </span><span style="color:#6A737D;">// d 可重新赋值</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title"><strong>赋值模式</strong>：</p><p>不以关键字开头。每个解构属性都被赋值给一个赋值目标，这个赋值目标可以事先用 var 或 let 声明，也可以是另一个对象的属性，一般来说，可以是任何可以出现在赋值表达式左侧的东西。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">numbers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">({ a: numbers[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], b: numbers[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj); </span><span style="color:#6A737D;">// numbers:[1, 2]  赋值目标 事先申明</span></span>
<span class="line"><span style="color:#E1E4E8;">({a: x, b: y} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj); </span><span style="color:#6A737D;">// x: 1, y: 2  不用以关键字开头</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">numbers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">({ a: numbers[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], b: numbers[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj); </span><span style="color:#6A737D;">// numbers:[1, 2]  赋值目标 事先申明</span></span>
<span class="line"><span style="color:#24292E;">({a: x, b: y} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj); </span><span style="color:#6A737D;">// x: 1, y: 2  不用以关键字开头</span></span></code></pre></div><p>当不使用关键开头时，在赋值语句周围必须添加括号 ( )，且表达式( )前面需要有一个分号<code>;</code>。否则它可能用于执行前一行的函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ a, b } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> };  </span><span style="color:#6A737D;">// 不是有效的独立语法，因为左侧的 {a, b} 被视为块而不是对象字面量。</span></span>
<span class="line"><span style="color:#E1E4E8;">({ a, b } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> });  </span><span style="color:#6A737D;">// 是有效的</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">， b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> };  </span><span style="color:#6A737D;">// 也是有效的。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ a, b } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> };  </span><span style="color:#6A737D;">// 不是有效的独立语法，因为左侧的 {a, b} 被视为块而不是对象字面量。</span></span>
<span class="line"><span style="color:#24292E;">({ a, b } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> });  </span><span style="color:#6A737D;">// 是有效的</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">， b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> };  </span><span style="color:#6A737D;">// 也是有效的。</span></span></code></pre></div></div><h2 id="指定默认值" tabindex="-1">指定默认值 <a class="header-anchor" href="#指定默认值" aria-label="Permalink to &quot;指定默认值&quot;">​</a></h2><p>解构赋值还允许我们为变量指定默认值，当匹配不到值时，变量会被赋予默认值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> [a,b,c,d] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// 未指定默认值</span></span>
<span class="line"><span style="color:#6A737D;">// a: 1,b: 2,c: 3, d: undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> [a,b,c,d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// 指定默认值</span></span>
<span class="line"><span style="color:#6A737D;">// a: 1,b: 2,c: 3, d:4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [a,b,c,d] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 未指定默认值</span></span>
<span class="line"><span style="color:#6A737D;">// a: 1,b: 2,c: 3, d: undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [a,b,c,d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 指定默认值</span></span>
<span class="line"><span style="color:#6A737D;">// a: 1,b: 2,c: 3, d:4</span></span></code></pre></div><h2 id="拓展运算符" tabindex="-1">拓展运算符 <a class="header-anchor" href="#拓展运算符" aria-label="Permalink to &quot;拓展运算符&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">others</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, c: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#6A737D;">// others:{ b: 2, c: 3 }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">others</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, c: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#6A737D;">// others:{ b: 2, c: 3 }</span></span></code></pre></div><h2 id="适用于其他语法中" tabindex="-1">适用于其他语法中 <a class="header-anchor" href="#适用于其他语法中" aria-label="Permalink to &quot;适用于其他语法中&quot;">​</a></h2><ul><li>for...in 和 for...of 循环中的循环变量；</li><li>函数参数；</li><li>catch 绑定变量。</li></ul><h2 id="解构各类数据的示例" tabindex="-1">解构各类数据的示例 <a class="header-anchor" href="#解构各类数据的示例" aria-label="Permalink to &quot;解构各类数据的示例&quot;">​</a></h2><h2 id="解构数组" tabindex="-1">解构数组 <a class="header-anchor" href="#解构数组" aria-label="Permalink to &quot;解构数组&quot;">​</a></h2><p><strong>基本使用</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;two&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;three&quot;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">yellow</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">green</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> foo; </span><span style="color:#6A737D;">// red：one yellow：two green：three</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;three&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">red</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">yellow</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">green</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> foo; </span><span style="color:#6A737D;">// red：one yellow：two green：three</span></span></code></pre></div><p><strong>解构比目标多</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;two&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;three&quot;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">yellow</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">green</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">gray</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> foo;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// red：one;  yellow：two;  green：three;  gray：undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;three&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">red</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">yellow</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">green</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">gray</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> foo;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// red：one;  yellow：two;  green：three;  gray：undefined</span></span></code></pre></div><p><strong>变量交换</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">[a, b] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [b, a];</span></span>
<span class="line"><span style="color:#6A737D;">// a: 3;  b:1;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">[a, b] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [b, a];</span></span>
<span class="line"><span style="color:#6A737D;">// a: 3;  b:1;</span></span></code></pre></div><p><strong>函数返回值为数组的结构</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// a: 1;  b:2;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">b</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// a: 1;  b:2;</span></span></code></pre></div><p><strong>忽略某些返回值</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;">, , </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// a: 1;  b:3;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, , </span><span style="color:#005CC5;">b</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// a: 1;  b:3;</span></span></code></pre></div><p><strong>使用绑定模式作为剩余属性</strong> 去原型上面解构对象的属性、方法</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">pop</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">push</span><span style="color:#E1E4E8;"> }] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a, b); </span><span style="color:#6A737D;">// 1 2</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(pop, push); </span><span style="color:#6A737D;">// [Function pop] [Function push]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">b</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">{ </span><span style="color:#005CC5;">pop</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">push</span><span style="color:#24292E;"> }] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a, b); </span><span style="color:#6A737D;">// 1 2</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(pop, push); </span><span style="color:#6A737D;">// [Function pop] [Function push]</span></span></code></pre></div><p><strong>从正则表达式匹配项中提取值</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseProtocol</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parsedURL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">):</span><span style="color:#85E89D;font-weight:bold;">\\/\\/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">/]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">parsedURL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(parsedURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// [&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// &quot;https&quot;, &quot;developer.mozilla.org&quot;, &quot;zh-CN/docs/Web/JavaScript&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [, </span><span style="color:#79B8FF;">protocol</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">fullhost</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">fullpath</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parsedURL;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> protocol;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">parseProtocol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// // &quot;https&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseProtocol</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parsedURL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">):</span><span style="color:#22863A;font-weight:bold;">\\/\\/</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">/]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">parsedURL) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(parsedURL);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// [&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript&quot;,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// &quot;https&quot;, &quot;developer.mozilla.org&quot;, &quot;zh-CN/docs/Web/JavaScript&quot;]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [, </span><span style="color:#005CC5;">protocol</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">fullhost</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">fullpath</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parsedURL;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> protocol;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">parseProtocol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// // &quot;https&quot;</span></span></code></pre></div><p><strong>在任何可迭代对象上使用数组解构</strong> 数组解构调用右侧的迭代协议（ Iterator ）。因此，任何可迭代对象（不一定是数组）都可以解构。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">([[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]]);</span></span>
<span class="line"><span style="color:#6A737D;">// a: [1, 2]</span></span>
<span class="line"><span style="color:#6A737D;">// b: [3, 4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">b</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">([[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]]);</span></span>
<span class="line"><span style="color:#6A737D;">// a: [1, 2]</span></span>
<span class="line"><span style="color:#6A737D;">// b: [3, 4]</span></span></code></pre></div><h2 id="对象的解构" tabindex="-1">对象的解构 <a class="header-anchor" href="#对象的解构" aria-label="Permalink to &quot;对象的解构&quot;">​</a></h2><p>对象解构几乎等同于属性访问。</p><p><strong>基本赋值</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  id: </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  isVerified: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">isVerified</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(id); </span><span style="color:#6A737D;">// 42</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(isVerified); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  id: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  isVerified: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">id</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">isVerified</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(id); </span><span style="color:#6A737D;">// 42</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(isVerified); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><strong>赋值给新的变量名</strong> 先匹配属性名，再赋值给变量。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">o</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { p: </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">, q: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">q</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">bar</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> o;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(foo); </span><span style="color:#6A737D;">// 42</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(bar); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">o</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { p: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">, q: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">p</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;">, </span><span style="color:#E36209;">q</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">bar</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> o;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(foo); </span><span style="color:#6A737D;">// 42</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(bar); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><blockquote><p>const { p: foo } = o 从对象 o 中获取名为 p 的属性，并将其赋值给名为 foo 的局部变量。</p></blockquote><p><strong>从作为函数参数传递的对象中提取属性</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 从对象中解构参数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  id: </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  displayName: </span><span style="color:#9ECBFF;">&quot;jdoe&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fullName: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    firstName: </span><span style="color:#9ECBFF;">&quot;Jane&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastName: </span><span style="color:#9ECBFF;">&quot;Doe&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">userId</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">userId</span><span style="color:#E1E4E8;">(user) </span><span style="color:#6A737D;">// 42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从对象中解构参数，重新命名参数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">userDisplayName</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">displayName</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">dname</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dname; </span><span style="color:#6A737D;">// 重新命名的参数 dname</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userDisplayName</span><span style="color:#E1E4E8;">(user)); </span><span style="color:#6A737D;">// \`jdoe\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 从对象中解构参数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  id: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  displayName: </span><span style="color:#032F62;">&quot;jdoe&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  fullName: {</span></span>
<span class="line"><span style="color:#24292E;">    firstName: </span><span style="color:#032F62;">&quot;Jane&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    lastName: </span><span style="color:#032F62;">&quot;Doe&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">userId</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">id</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">userId</span><span style="color:#24292E;">(user) </span><span style="color:#6A737D;">// 42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从对象中解构参数，重新命名参数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">userDisplayName</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">displayName</span><span style="color:#24292E;">: </span><span style="color:#E36209;">dname</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dname; </span><span style="color:#6A737D;">// 重新命名的参数 dname</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userDisplayName</span><span style="color:#24292E;">(user)); </span><span style="color:#6A737D;">// \`jdoe\`</span></span></code></pre></div><p><strong>设置函数参数的默认值</strong></p><p>使用解构的方式，设置默认参数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 设置函数参数的默认值以对象举例子，也是是数组。</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">drawChart</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;big&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">coords</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { x: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> }, </span><span style="color:#FFAB70;">radius</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(size, coords, radius);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [size,coords,radius]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">drawChart</span><span style="color:#E1E4E8;">({ coords: { x: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;"> },radius: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">}); </span><span style="color:#6A737D;">// [&#39;big&#39;, { x: 18, y: 30}, 30]</span></span>
<span class="line"><span style="color:#B392F0;">drawChart</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// [&#39;big&#39;, { x: 0, y: 0 }, 25]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 设置函数参数的默认值以对象举例子，也是是数组。</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">drawChart</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">size</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;big&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">coords</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { x: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> }, </span><span style="color:#E36209;">radius</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(size, coords, radius);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [size,coords,radius]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">drawChart</span><span style="color:#24292E;">({ coords: { x: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;"> },radius: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">}); </span><span style="color:#6A737D;">// [&#39;big&#39;, { x: 18, y: 30}, 30]</span></span>
<span class="line"><span style="color:#6F42C1;">drawChart</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// [&#39;big&#39;, { x: 0, y: 0 }, 25]</span></span></code></pre></div><p>通常简洁的写法，不使用解构的方式。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span><span style="color:#6A737D;">// 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">// 5</span></span></code></pre></div><p><strong>解构嵌套对象和数组</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">metadata</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  title: </span><span style="color:#9ECBFF;">&quot;Scratchpad&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  translations: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      locale: </span><span style="color:#9ECBFF;">&quot;de&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      localization_tags: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">      last_edit: </span><span style="color:#9ECBFF;">&quot;2014-04-14T08:43:37&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      url: </span><span style="color:#9ECBFF;">&quot;/de/docs/Tools/Scratchpad&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      title: </span><span style="color:#9ECBFF;">&quot;JavaScript-Umgebung&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  url: </span><span style="color:#9ECBFF;">&quot;/zh-CN/docs/Tools/Scratchpad&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">: englishTitle, </span><span style="color:#6A737D;">// rename</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">translations</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">: localeTitle, </span><span style="color:#6A737D;">// rename</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> metadata;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(englishTitle); </span><span style="color:#6A737D;">// &quot;Scratchpad&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(localeTitle); </span><span style="color:#6A737D;">// &quot;JavaScript-Umgebung&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">metadata</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  title: </span><span style="color:#032F62;">&quot;Scratchpad&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  translations: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      locale: </span><span style="color:#032F62;">&quot;de&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      localization_tags: [],</span></span>
<span class="line"><span style="color:#24292E;">      last_edit: </span><span style="color:#032F62;">&quot;2014-04-14T08:43:37&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      url: </span><span style="color:#032F62;">&quot;/de/docs/Tools/Scratchpad&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      title: </span><span style="color:#032F62;">&quot;JavaScript-Umgebung&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  url: </span><span style="color:#032F62;">&quot;/zh-CN/docs/Tools/Scratchpad&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">title</span><span style="color:#24292E;">: englishTitle, </span><span style="color:#6A737D;">// rename</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">translations</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#E36209;">title</span><span style="color:#24292E;">: localeTitle, </span><span style="color:#6A737D;">// rename</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> metadata;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(englishTitle); </span><span style="color:#6A737D;">// &quot;Scratchpad&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(localeTitle); </span><span style="color:#6A737D;">// &quot;JavaScript-Umgebung&quot;</span></span></code></pre></div><p><strong><code>For of</code> 迭代和解构</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">people</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;Mike Smith&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    family: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      mother: </span><span style="color:#9ECBFF;">&quot;Jane Smith&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      father: </span><span style="color:#9ECBFF;">&quot;Harry Smith&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      sister: </span><span style="color:#9ECBFF;">&quot;Samantha Smith&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    age: </span><span style="color:#79B8FF;">35</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;Tom Jones&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    family: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      mother: </span><span style="color:#9ECBFF;">&quot;Norah Jones&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      father: </span><span style="color:#9ECBFF;">&quot;Richard Jones&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      brother: </span><span style="color:#9ECBFF;">&quot;Howard Jones&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    age: </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">n</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">family</span><span style="color:#E1E4E8;">: { </span><span style="color:#FFAB70;">father</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">f</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> people) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Name: \${</span><span style="color:#E1E4E8;">n</span><span style="color:#9ECBFF;">}, Father: \${</span><span style="color:#E1E4E8;">f</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Name: Mike Smith, Father: Harry Smith&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Name: Tom Jones, Father: Richard Jones&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">people</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;Mike Smith&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    family: {</span></span>
<span class="line"><span style="color:#24292E;">      mother: </span><span style="color:#032F62;">&quot;Jane Smith&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      father: </span><span style="color:#032F62;">&quot;Harry Smith&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      sister: </span><span style="color:#032F62;">&quot;Samantha Smith&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">35</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;Tom Jones&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    family: {</span></span>
<span class="line"><span style="color:#24292E;">      mother: </span><span style="color:#032F62;">&quot;Norah Jones&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      father: </span><span style="color:#032F62;">&quot;Richard Jones&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      brother: </span><span style="color:#032F62;">&quot;Howard Jones&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">name</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">n</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">family</span><span style="color:#24292E;">: { </span><span style="color:#E36209;">father</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">f</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> people) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Name: \${</span><span style="color:#24292E;">n</span><span style="color:#032F62;">}, Father: \${</span><span style="color:#24292E;">f</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Name: Mike Smith, Father: Harry Smith&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Name: Tom Jones, Father: Richard Jones&quot;</span></span></code></pre></div><p><strong>解构对象时查找原型链</strong> 当解构一个对象时，如果属性本身没有被访问，它将沿着原型链继续查找。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  self: </span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  __proto__: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    prot: </span><span style="color:#9ECBFF;">&quot;456&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">prot</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="color:#6A737D;">// self &quot;123&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// prot &quot;456&quot; (Access to the prototype chain)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  self: </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  __proto__: {</span></span>
<span class="line"><span style="color:#24292E;">    prot: </span><span style="color:#032F62;">&quot;456&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">prot</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#6A737D;">// self &quot;123&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// prot &quot;456&quot; (Access to the prototype chain)</span></span></code></pre></div><h2 id="解构原始数据类型" tabindex="-1">解构原始数据类型 <a class="header-anchor" href="#解构原始数据类型" aria-label="Permalink to &quot;解构原始数据类型&quot;">​</a></h2><p>如果尝试解构基本类型的值，该值将被包装到相应的包装器对象中，并且在包装器对象上访问该属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">toFixed</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a, toFixed); </span></span>
<span class="line"><span style="color:#6A737D;">//a: undefined </span></span>
<span class="line"><span style="color:#6A737D;">//toFixed: ƒ toFixed() { [native code] }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">toFixed</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a, toFixed); </span></span>
<span class="line"><span style="color:#6A737D;">//a: undefined </span></span>
<span class="line"><span style="color:#6A737D;">//toFixed: ƒ toFixed() { [native code] }</span></span></code></pre></div><p>解构 null 或 undefined 会抛出 TypeError</p>`,53);function C(h,g,b,A,D,v){const n=p("lines");return o(),e("div",null,[E,y,i,F,s("blockquote",null,[t(n,{text:"解构赋值写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值"}),a("。"),d]),u])}const m=l(r,[["render",C]]);export{q as __pageData,m as default};
