import{_ as a,o as s,c as t,Q as i}from"./chunks/framework.5b0c684c.js";const o="/blogs/assets/3DVisualization_graphics_3_1-1.d5ae057a.png",l="/blogs/assets/3DVisualization_graphics_3_1-2.6a11afdc.png",p="/blogs/assets/3DVisualization_graphics_3_1-3.ab1a5301.png",r="/blogs/assets/3DVisualization_graphics_3_1-4.039e6d05.png",e="/blogs/assets/3DVisualization_graphics_3_1-5.f816aa9f.png",c="/blogs/assets/3DVisualization_graphics_3_1-6.9f53743f.png",n="/blogs/assets/3DVisualization_graphics_3_1-7.07ddd604.png",_="/blogs/assets/3DVisualization_graphics_3_1-8.c5a255ae.png",g="/blogs/assets/3DVisualization_graphics_3_1-9.7794364a.png",h="/blogs/assets/3DVisualization_graphics_3_1-10.b2e70a85.png",u="/blogs/assets/3DVisualization_graphics_3_1-11.76812fbd.png",m="/blogs/assets/3DVisualization_graphics_3_1-12.4292fad8.png",d="/blogs/assets/3DVisualization_graphics_3_1-13.5a0c024d.png",b="/blogs/assets/3DVisualization_graphics_3_1-14.a4a35edc.png",f="/blogs/assets/3DVisualization_graphics_3_1-15.fc802115.png",A="/blogs/assets/3DVisualization_graphics_3_1-16.e03e59e6.png",q="/blogs/assets/3DVisualization_graphics_3_1-17.b2ce4c5a.png",k="/blogs/assets/3DVisualization_graphics_3_1-18.f01e1f2c.png",D="/blogs/assets/3DVisualization_graphics_3_1-19.b20d61b0.png",V="/blogs/assets/3DVisualization_graphics_3_1-20.cf8ab967.png",z="/blogs/assets/3DVisualization_graphics_3_1-21.34a63741.png",E=JSON.parse('{"title":"抗锯齿（反走样）","description":"","frontmatter":{},"headers":[],"relativePath":"3DVisualization/graphics/3-1-1.md","filePath":"3DVisualization/graphics/3-1-1.md","lastUpdated":1729031503000}'),x={name:"3DVisualization/graphics/3-1-1.md"},P=i('<h1 id="抗锯齿-反走样" tabindex="-1">抗锯齿（反走样） <a class="header-anchor" href="#抗锯齿-反走样" aria-label="Permalink to &quot;抗锯齿（反走样）&quot;">​</a></h1><p><strong>抗锯齿</strong></p><ul><li>抽样法理论，抽查法理论</li><li>在实践中抗锯齿</li></ul><p>可见性/<strong>闭塞性</strong></p><ul><li>Z-缓冲</li></ul><h2 id="采样原理" tabindex="-1">采样原理 <a class="header-anchor" href="#采样原理" aria-label="Permalink to &quot;采样原理&quot;">​</a></h2><p><strong>采样在计算机图形学中是普遍存在的做法</strong>。</p><p>照片：样本图像传感器平面上的<code>采样</code>。 <img src="'+o+'" alt=""></p><p>视频：本质上是在<code>时间</code>上的<code>采样</code>。 <img src="'+l+'" alt=""></p><p><strong>采样所产生的问题同样也是广泛存在的</strong>。</p><p>Artifacts：</p><blockquote><p>计算机图形学中：采样存在错误/混乱/不准确等等这些问题。</p></blockquote><p><img src="'+p+'" alt=""></p><p>出现采样 Artifacts 的原因是：<strong>信号变化太快（频率较高），但采样速度过慢导致</strong>。</p><p>下面让我们深入研究基本原因，看看如何实施反锯齿栅格化。</p><h2 id="采样产生artifacts的原因" tabindex="-1">采样产生<code>Artifacts</code>的原因 <a class="header-anchor" href="#采样产生artifacts的原因" aria-label="Permalink to &quot;采样产生`Artifacts`的原因&quot;">​</a></h2><p>回顾正弦余弦： <img src="'+r+'" alt=""></p><p><img src="'+e+'" alt=""></p><p><strong>傅里叶变换</strong>： <img src="'+c+'" alt=""></p><p><img src="'+n+'" alt=""></p><blockquote><p>这里傅里叶变换其实就是将函数变成不同频率段，并且将它显示出来。</p></blockquote><p><strong>更高的频率需要更快的采样</strong><img src="'+_+'" alt=""></p><p><img src="'+g+'" alt=""></p><blockquote><p>高频信号的采样不足：样本错误地似乎来自一个低频信号。</p><p>在给定的采样率下无法分辨的两个频率被称为&quot;走样&quot;。</p></blockquote><p>这里就在频率的分析上我们就了解了什么是“走样”。</p><h2 id="滤波" tabindex="-1">滤波 <a class="header-anchor" href="#滤波" aria-label="Permalink to &quot;滤波&quot;">​</a></h2><p>傅里叶变换，可以把一个函数从<code>时域</code>变到<code>频域</code>。</p><p><img src="'+h+'" alt=""></p><h2 id="卷积-图形学中" tabindex="-1">卷积（图形学中） <a class="header-anchor" href="#卷积-图形学中" aria-label="Permalink to &quot;卷积（图形学中）&quot;">​</a></h2><p>Filtering = Convolution = Averaging （滤波 = 卷积 = 平均） <img src="'+u+'" alt=""></p><p><img src="'+m+'" alt=""></p><blockquote><p>时域的乘积 = 频域的卷积</p></blockquote><p><img src="'+d+'" alt=""></p><h2 id="采样-重复频率内容" tabindex="-1">采样=重复频率内容 <a class="header-anchor" href="#采样-重复频率内容" aria-label="Permalink to &quot;采样=重复频率内容&quot;">​</a></h2><p><img src="'+b+'" alt=""></p><p>从频率的角度来看为什么会走样： <img src="'+f+'" alt=""></p><h2 id="抗锯齿-反走样-1" tabindex="-1">抗锯齿（反走样） <a class="header-anchor" href="#抗锯齿-反走样-1" aria-label="Permalink to &quot;抗锯齿（反走样）&quot;">​</a></h2><p><strong>减少混叠</strong> 增加采样率：</p><ul><li>本质上是增加了傅里叶域中副本之间的距离。</li><li>更高分辨率的显示器，传感器，框架缓冲区。</li><li>可能需要非常高的分辨率。</li></ul><p>抗锯齿（反走样）：</p><ul><li>在重复之前使傅里叶内容“更窄”。</li></ul><p><img src="'+A+'" alt=""></p><blockquote><p>在采样前过滤掉高频信号，再进行采样。</p></blockquote><p><strong>抗锯齿（反走样）取样</strong>： <img src="'+q+'" alt=""></p><blockquote><p>注意栅格化三角形中的抗锯齿边，其中像素值取中间值。</p></blockquote><p>如何将三角行变模糊呢？</p><ul><li>使用1像素宽的框滤波器（低通、模糊）</li></ul><p><img src="'+k+'" alt=""></p><blockquote><p>通过1像素的f（x、y）框模糊（卷积=滤波=平均）。</p><p>然后在每个像素的中心进行采样。</p></blockquote><p>通过平均像素值计算消除锯齿： <img src="'+D+'" alt=""></p><h2 id="超采样-msaa" tabindex="-1">超采样 --（MSAA） <a class="header-anchor" href="#超采样-msaa" aria-label="Permalink to &quot;超采样 --（MSAA）&quot;">​</a></h2><p>通过对一个像素内的多个位置进行采样并平均其值，近似1像素盒滤波器的效果： <img src="'+V+'" alt=""></p><p>超采样步骤： <img src="'+z+'" alt=""></p><h2 id="快速近似-fxaa-fast-approximate-aa" tabindex="-1">快速近似-- FXAA (Fast Approximate AA) <a class="header-anchor" href="#快速近似-fxaa-fast-approximate-aa" aria-label="Permalink to &quot;快速近似-- FXAA (Fast Approximate AA)&quot;">​</a></h2><p>原理：先进行光栅化，然后对图像进行处理，通过图像匹配的方法找到锯齿部分，再通过算法处理掉。</p><h2 id="taa-temporal-aa" tabindex="-1">TAA -- (Temporal AA) <a class="header-anchor" href="#taa-temporal-aa" aria-label="Permalink to &quot;TAA --  (Temporal AA)&quot;">​</a></h2><p>原理：在时间范围内通过相邻帧数的像素感知是否在三角形内。复用上一帧的感知结果。</p><ol><li>在更高分辨率下渲染当前帧：TAA 通常使用更高的分辨率（例如 2x 或 4x）来渲染当前帧。这可以提供更准确的采样场景。</li><li>执行多重采样：TAA 使用多重采样（MSAA）在高分辨率缓冲区中对每个像素进行多个取样。这有助于减少锯齿伪影。</li><li>解析样本：在渲染当前帧后，TAA 将多个样本解析为单个像素值，以便在较低分辨率的缓冲区中每个像素都只有一个值。这是通过使用“重投影”或“运动矢量”来完成的。</li><li>将当前帧与先前帧混合：TAA 将解析的像素值从当前帧与相应的先前帧像素值进行混合。这是通过使用“加权平均”或“lerp”来完成的。混合系数由当前帧和先前帧之间的运动量确定。</li><li>显示最终图像：混合的像素值随后在屏幕上显示，从而有效地减少锯齿伪影。</li></ol><h2 id="超分辨率-超采样" tabindex="-1">超分辨率/超采样 <a class="header-anchor" href="#超分辨率-超采样" aria-label="Permalink to &quot;超分辨率/超采样&quot;">​</a></h2><ul><li>从低分辨率到高分辨率。</li><li>本质上仍然是解决“样本不够”的问题。</li><li>DLSS（深度学习超级采样）。</li></ul>',60),T=[P];function S(F,v,$,C,M,N){return s(),t("div",null,T)}const I=a(x,[["render",S]]);export{E as __pageData,I as default};
