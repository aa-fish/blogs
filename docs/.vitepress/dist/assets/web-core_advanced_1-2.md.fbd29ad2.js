import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.5b0c684c.js";const u=JSON.parse('{"title":"惰性函数（懒函数）","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/advanced/1-2.md","filePath":"web-core/advanced/1-2.md","lastUpdated":1729031503000}'),p={name:"web-core/advanced/1-2.md"},o=l(`<h1 id="惰性函数-懒函数" tabindex="-1">惰性函数（懒函数） <a class="header-anchor" href="#惰性函数-懒函数" aria-label="Permalink to &quot;惰性函数（懒函数）&quot;">​</a></h1><p><strong><code>优点</code></strong>：避免多次重复的步骤判断，第一次调用判定后，不用重复进行判断。</p><p><strong><code>应用</code></strong>：常用于函数库的编写，单例模式之中。在固定的应用环境不会发生改变，频繁要使用同一判断逻辑的。</p><blockquote><p>如浏览器兼容判断</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCss</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">attr</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;getComputedStyle&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> window){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">getCss</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">attr</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">getComputedStyle</span><span style="color:#E1E4E8;">(element)[attr];</span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">getCss</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">attr</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> element.currentStyle[attr];		</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCss</span><span style="color:#E1E4E8;">(element, attr);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">getCss</span><span style="color:#E1E4E8;">(document.body, </span><span style="color:#9ECBFF;">&#39;margin&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 第一次调用会进行判断，后面的调用使用第一次的判断结果，不会再次判断。</span></span>
<span class="line"><span style="color:#B392F0;">getCss</span><span style="color:#E1E4E8;">(document.body, </span><span style="color:#9ECBFF;">&#39;padding&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">getCss</span><span style="color:#E1E4E8;">(document.body, </span><span style="color:#9ECBFF;">&#39;width&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCss</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">attr</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;getComputedStyle&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> window){</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">getCss</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">attr</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(element)[attr];</span></span>
<span class="line"><span style="color:#24292E;">		} </span></span>
<span class="line"><span style="color:#24292E;">	}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">getCss</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">attr</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> element.currentStyle[attr];		</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCss</span><span style="color:#24292E;">(element, attr);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getCss</span><span style="color:#24292E;">(document.body, </span><span style="color:#032F62;">&#39;margin&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 第一次调用会进行判断，后面的调用使用第一次的判断结果，不会再次判断。</span></span>
<span class="line"><span style="color:#6F42C1;">getCss</span><span style="color:#24292E;">(document.body, </span><span style="color:#032F62;">&#39;padding&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">getCss</span><span style="color:#24292E;">(document.body, </span><span style="color:#032F62;">&#39;width&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div>`,5),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const m=s(p,[["render",t]]);export{u as __pageData,m as default};
