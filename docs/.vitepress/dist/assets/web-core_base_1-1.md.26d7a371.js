import{_ as e,C as t,o as r,c,k as s,a,H as n,Q as o}from"./chunks/framework.5b0c684c.js";const vs=JSON.parse('{"title":"String","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/1-1.md","filePath":"web-core/base/1-1.md","lastUpdated":1729031503000}'),y={name:"web-core/base/1-1.md"},E=s("h1",{id:"string",tabindex:"-1"},[a("String "),s("a",{class:"header-anchor",href:"#string","aria-label":'Permalink to "String"'},"​")],-1),i=s("p",null,"字符串是 JavaScript 的一种基本的数据类型。",-1),F=s("h2",{id:"构造函数",tabindex:"-1"},[a("构造函数 "),s("a",{class:"header-anchor",href:"#构造函数","aria-label":'Permalink to "构造函数"'},"​")],-1),d=s("code",null,"new String()",-1),u=s("li",null,[s("code",null,"String()"),a("当作为函数调用时，它返回的是String类型的原始值。")],-1),g=s("h2",{id:"静态方法",tabindex:"-1"},[a("静态方法 "),s("a",{class:"header-anchor",href:"#静态方法","aria-label":'Permalink to "静态方法"'},"​")],-1),h=s("p",null,[a("静态方法的语法只能固定以 "),s("strong",null,"String.静态方法"),a(" 的使用。")],-1),C=s("h2",{id:"string-fromcharcode",tabindex:"-1"},[a("String.fromCharCode() "),s("a",{class:"header-anchor",href:"#string-fromcharcode","aria-label":'Permalink to "String.fromCharCode()"'},"​")],-1),b=s("li",null,[s("strong",null,"描述"),a("：根据指定的 UTF-16 "),s("code",null,"码元序列"),a("创建的字符串。")],-1),q=s("strong",null,"参数",-1),A=s("code",null,"码元",-1),B=s("li",null,[s("strong",null,"异常"),a("：如果大于0xFFFF则会从 0x后面开始截断并忽略，如：0x"),s("code",null,"A"),a("FFF1，这里的 "),s("code",null,"A"),a(" 会被截掉，最终为0xFFF1。")],-1),D={id:"string-fromcodepoint",tabindex:"-1"},m=s("a",{class:"header-anchor",href:"#string-fromcodepoint","aria-label":'Permalink to "String.fromCodePoint()<Badge text="推荐"/>"'},"​",-1),v=s("li",null,[s("strong",null,"描述"),a("：根据指定的"),s("code",null,"码位序列"),a("返回一个字符串。")],-1),f=s("strong",null,"参数",-1),S=s("li",null,[s("strong",null,"异常"),a("：如果 参数 不是整数、小于 0 或者在转换为数字后大于 0x10FFFF，则会抛出该异常。")],-1),k=o(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>String.fromCharCode 与 String.fromCodePoint 推荐使用后者，序列范围更大。</p></div><h2 id="string-raw" tabindex="-1">String.raw() <a class="header-anchor" href="#string-raw" aria-label="Permalink to &quot;String.raw()&quot;">​</a></h2><ul><li><strong>语法</strong>：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">raw</span><span style="color:#9ECBFF;">\`templateString\`</span></span>
<span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">raw</span><span style="color:#E1E4E8;">(strings, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">substitutions)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">raw</span><span style="color:#032F62;">\`templateString\`</span></span>
<span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">raw</span><span style="color:#24292E;">(strings, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">substitutions)</span></span></code></pre></div><ul><li><strong>描述</strong>：它用于获取模板字符串的原始字符串形式（没有被转义前的样子）。 表达式（例如 \${foo}）会被替换处理，但转义序列（例如 \\n）不会被处理。<code>String.raw</code> 是唯一 一个内置的模板字符串标签函数。</li><li><strong>参数（strings）</strong>：格式正确的模板字符串数组对象，应该是一个具有 raw 属性的对象，其值是一个类数组的字符串对象。例如 { raw: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] }。</li><li><strong>可选参数（substitutions）</strong>：包含的替换表达式对应的值。</li></ul><details class="details custom-block"><summary>String.raw 使用</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 特殊的 \\ \\f,\\n,\\r,\\v 都是有一定意义的，使用String.raw，可以避免转义。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filePath1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">raw</span><span style="color:#9ECBFF;">\`C:</span><span style="color:#79B8FF;">\\D</span><span style="color:#9ECBFF;">evelopment</span><span style="color:#79B8FF;">\\a</span><span style="color:#9ECBFF;">boutme.html\`</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// C:\\Development\\aboutme.html (原始)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filePath2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`C:</span><span style="color:#79B8FF;">\\D</span><span style="color:#9ECBFF;">evelopment</span><span style="color:#79B8FF;">\\a</span><span style="color:#9ECBFF;">boutme.html\`</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// C:Developmentaboutme.html ( \\ 被转义) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数传参</span></span>
<span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">raw</span><span style="color:#E1E4E8;">({ raw: </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;t0e1s2t&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 还可以应用于一些数学、物理、化学公式表达</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 特殊的 \\ \\f,\\n,\\r,\\v 都是有一定意义的，使用String.raw，可以避免转义。</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">filePath1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">raw</span><span style="color:#032F62;">\`C:</span><span style="color:#005CC5;">\\D</span><span style="color:#032F62;">evelopment</span><span style="color:#005CC5;">\\a</span><span style="color:#032F62;">boutme.html\`</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// C:\\Development\\aboutme.html (原始)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">filePath2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`C:</span><span style="color:#005CC5;">\\D</span><span style="color:#032F62;">evelopment</span><span style="color:#005CC5;">\\a</span><span style="color:#032F62;">boutme.html\`</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// C:Developmentaboutme.html ( \\ 被转义) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数传参</span></span>
<span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">raw</span><span style="color:#24292E;">({ raw: </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;"> }, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;t0e1s2t&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 还可以应用于一些数学、物理、化学公式表达</span></span></code></pre></div></details><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><p>实例方法就是写在<code>String.prototype</code>上的方法。</p><h2 id="string-prototype-at" tabindex="-1">String.prototype.at() <a class="header-anchor" href="#string-prototype-at" aria-label="Permalink to &quot;String.prototype.at()&quot;">​</a></h2>`,9),x=s("li",null,[s("strong",null,"描述"),a("：接受一个整数值（正/负），并返回一个新的 String 。")],-1),_=s("strong",null,"参数",-1),P=s("li",null,[s("strong",null,"返回"),a("：由位于指定位置的单个 UTF-16 码元组成的 String。如果找不到指定的索引，则返回 undefined 。")],-1),T=s("h2",{id:"string-prototype-charat",tabindex:"-1"},[a("String.prototype.charAt() "),s("a",{class:"header-anchor",href:"#string-prototype-charat","aria-label":'Permalink to "String.prototype.charAt()"'},"​")],-1),j=s("li",null,[s("strong",null,"描述"),a("：返回一个由给定索引处的单个 UTF-16 码元构成的新字符串。")],-1),w=s("strong",null,"参数",-1),$=s("li",null,[s("strong",null,"返回"),a("：由位于指定位置的单个 UTF-16 码元组成的 String。如果找不到指定的索引，则返回 空字符串 。")],-1),N=s("h2",{id:"string-prototype-charcodeat",tabindex:"-1"},[a("String.prototype.charCodeAt() "),s("a",{class:"header-anchor",href:"#string-prototype-charcodeat","aria-label":'Permalink to "String.prototype.charCodeAt()"'},"​")],-1),z=s("li",null,[s("strong",null,"描述"),a("：获取索引处的 UTF-16 码元。（其值介于 0 和 65535 （0xFFFF）之间）")],-1),L=s("strong",null,"参数",-1),U=s("li",null,[s("strong",null,"返回"),a("： UTF-16 码元。如果找不到指定的索引，则返回 NaN 。")],-1),I={id:"string-prototype-codepointat",tabindex:"-1"},R=s("a",{class:"header-anchor",href:"#string-prototype-codepointat","aria-label":'Permalink to "String.prototype.codePointAt()<Badge text="推荐"/>"'},"​",-1),M=s("li",null,[s("strong",null,"描述"),a("：获取索引处的字符的 Unicode 码位值（Unicode 码位范围从 0 到 1114111（0x10FFFF）。")],-1),V=s("strong",null,"参数",-1),W=s("li",null,[s("strong",null,"返回"),a("： "),s("blockquote",null,[s("p",null,"Unicode 码位值，如果找不到指定的索引，则返回 undefined。"),s("p",null,"如果 index 处的元素是一个 UTF-16 前导代理（leading surrogate），则返回代理对的码位。"),s("p",null,"如果 index 处的元素是一个 UTF-16 后尾代理（trailing surrogate），则只返回后尾代理的码元。")])],-1),O=o(`<div class="tip custom-block"><p class="custom-block-title">在循环中使用 codePointAt()</p><p>因为使用字符串索引进行循环会导致同一码位被访问两次（一次是前导代理，一次是后尾代理），而第二次调用 codePointAt() 时只返回后尾代理项，所以最好避免使用索引进行循环。</p><p>使用索引进行循环一定要注意，可以使用 <code>for...of 语句</code>或<code>字符串展开语法</code>，这两种方法都会调用字符串的 @@iterator，从而按照码位进行迭代。&quot;</p></div><details class="details custom-block"><summary>codePointAt()循环示例</summary><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\ud83d\\udc0e\\ud83d\\udc71\\u2764</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 不推荐</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> str.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(i).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;1f40e&#39;、&#39;dc0e&#39;、&#39;1f471&#39;、&#39;dc71&#39;、&#39;2764&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 推荐</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">codePoint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> str) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(codePoint.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;1f40e&#39;、&#39;1f471&#39;、&#39;2764&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 推荐</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">str].</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">cp</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> cp.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;1f40e&#39;, &#39;1f471&#39;, &#39;2764&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\ud83d\\udc0e\\ud83d\\udc71\\u2764</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 不推荐</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> str.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(i).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;1f40e&#39;、&#39;dc0e&#39;、&#39;1f471&#39;、&#39;dc71&#39;、&#39;2764&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 推荐</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">codePoint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> str) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(codePoint.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;1f40e&#39;、&#39;1f471&#39;、&#39;2764&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 推荐</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">str].</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">cp</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> cp.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;1f40e&#39;, &#39;1f471&#39;, &#39;2764&#39;]</span></span></code></pre></div></details><div class="tip custom-block"><p class="custom-block-title">注意</p><p>避免使用 charCodeAt() 来重新实现 codePointAt()。从 UTF-16 代理到 Unicode 码位的转换相当复杂，</p><p>codePointAt() 可能更加高效，因为它直接使用字符串的内部表示形式。如果需要，可以安装一个 codePointAt() 的 polyfill。</p></div><h2 id="string-prototype-concat" tabindex="-1">String.prototype.concat() <a class="header-anchor" href="#string-prototype-concat" aria-label="Permalink to &quot;String.prototype.concat()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法将一个或多个字符串连接到调用的字符串，并返回一个新的字符串，不会影响原字符串。</li></ul>`,5),H={class:"info custom-block"},J=s("p",{class:"custom-block-title"},"INFO",-1),K=s("p",null,"NMD：与加号/字符串连接运算符（+，+=）非常相似，不同之处在于 concat() 直接将其参数强制转换为字符串进行连接，而加号运算符首先将其操作数强制转换为原始值，然后再进行连接。",-1),Z=o('<h2 id="string-prototype-startswith" tabindex="-1">String.prototype.startsWith() <a class="header-anchor" href="#string-prototype-startswith" aria-label="Permalink to &quot;String.prototype.startsWith()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法用来判断当前字符串是否以另外一个给定的子字符串开头，并根据判断结果返回 true 或 false。</li><li><strong>参数</strong>：要在该字符串开头搜索的子串。不能是正则表达式。所有不是正则表达式的值都会被强制转换为字符串，省略或传入 undefined，该方法会在字符串中搜索 &quot;undefined&quot;。</li><li>[可选参数]：指定搜索到哪个位置结束。 默认为 str.length</li><li><strong>异常</strong>：参数不能是正则表达式，否则会抛出异常。</li></ul><h2 id="string-prototype-endswith" tabindex="-1">String.prototype.endsWith() <a class="header-anchor" href="#string-prototype-endswith" aria-label="Permalink to &quot;String.prototype.endsWith()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法用于判断一个字符串是否以指定字符串结尾。返回 true / false。</li><li><strong>参数</strong>：以指定结尾的字符串，传入的参数强制转换为字符串，省略或传入 undefined，该方法会在字符串中搜索 &quot;undefined&quot;。</li><li>[可选参数]：指定从什么位置开始。 默认为 0。</li><li><strong>异常</strong>：参数不能是正则表达式，否则会抛出异常。</li></ul><h2 id="string-prototype-includes" tabindex="-1">String.prototype.includes() <a class="header-anchor" href="#string-prototype-includes" aria-label="Permalink to &quot;String.prototype.includes()&quot;">​</a></h2>',5),Q=s("li",null,[s("strong",null,"描述"),a("：方法执行区分大小写的搜索，以确定是否可以在一个字符串中找到另一个字符串，并根据情况返回 true 或 false。")],-1),G=s("li",null,[s("strong",null,"参数"),a('：searchString（要搜索的字符串），传入的参数强制转换为字符串。省略或传入 undefined，该方法会在字符串中搜索 "undefined"。')],-1),X=s("li",null,[s("strong",null,"异常"),a("：参数不能是正则表达式，否则会抛出异常。")],-1),Y=s("h2",{id:"string-prototype-indexof",tabindex:"-1"},[a("String.prototype.indexOf() "),s("a",{class:"header-anchor",href:"#string-prototype-indexof","aria-label":'Permalink to "String.prototype.indexOf()"'},"​")],-1),ss=s("li",null,[s("strong",null,"描述"),a("：方法在字符串中搜索指定子字符串，并返回其第一次出现的位置索引否则返回-1。")],-1),as=s("li",null,[s("strong",null,"参数"),a('： searchString（要搜索的字符串），传入的参数强制转换为字符串。省略或传入 undefined，该方法会在字符串中搜索 "undefined"。')],-1),ns=s("h2",{id:"string-prototype-lastindexof",tabindex:"-1"},[a("String.prototype.lastIndexOf() "),s("a",{class:"header-anchor",href:"#string-prototype-lastindexof","aria-label":'Permalink to "String.prototype.lastIndexOf()"'},"​")],-1),ls=s("li",null,[s("strong",null,"描述"),a("：方法在字符串中搜索指定子字符串，并返回其最后一次出现的位置索引否则返回-1。")],-1),os=s("li",null,[s("strong",null,"参数"),a('： searchString（要搜索的字符串），传入的参数强制转换为字符串。省略或传入 undefined，该方法会在字符串中搜索 "undefined"。')],-1),ps=o(`<h2 id="string-prototype-iswellformed" tabindex="-1">String.prototype.isWellFormed() <a class="header-anchor" href="#string-prototype-iswellformed" aria-label="Permalink to &quot;String.prototype.isWellFormed()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回一个表示该字符串是否包含单独代理项的布尔值。如果字符串不包含单独代理项，返回 true，否则返回 false。<br> isWellFormed() 让你能够测试一个字符串是否是格式正确的（即不包含单独代理项）。由于引擎能够直接访问字符串的内部表示，与自定义实现相比 isWellFormed() 更高效。如果你需要将字符串转换为格式正确的字符串，可以使用 toWellFormed() 方法。isWellFormed() 让你可以对格式正确和格式错误的字符串进行不同的处理，比如抛出一个错误或将其标记为无效。</li></ul><h2 id="string-prototype-towellformed" tabindex="-1">String.prototype.toWellFormed() <a class="header-anchor" href="#string-prototype-towellformed" aria-label="Permalink to &quot;String.prototype.toWellFormed()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回一个字符串，其中该字符串的所有单独代理项都被替换为 Unicode 替换字符 U+FFFD。toWellFormed() 迭代字符串的码元，并将任何单独代理项替换为 Unicode 替换字符 U+FFFD �。这确保了返回的字符串格式正确并可用于期望正确格式字符串的函数，比如 encodeURI。由于引擎能够直接访问字符串的内部表示，与自定义实现相比 toWellFormed() 更高效。</li></ul><h2 id="string-prototype-localecompare" tabindex="-1">String.prototype.localeCompare() <a class="header-anchor" href="#string-prototype-localecompare" aria-label="Permalink to &quot;String.prototype.localeCompare()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回一个数字，表示参考字符串在排序顺序中是在给定字符串之前、之后还是与之相同。在支持 Intl.Collator API 的实现中，该方法仅是调用了 Intl.Collator 方法。当比较大量字符串时，例如对大型数组进行排序，最好创建一个 Intl.Collator 对象，并使用其 compare() 方法提供的函数。</li><li><strong>参数</strong>：locales 和 options 参数可以自定义函数的行为，并让应用程序指定应使用哪种语言的格式约定。</li><li>[可选参数]：表示缩写语言代码。</li><li>[可选参数]：一个调整输出格式的对象。</li><li><strong>返回</strong>： <blockquote><ol><li>当 referenceStr 在 compareString 前面时返回负数；<br></li><li>当 referenceStr 在 compareString 后面时返回正数；<br></li><li>当两者相等时返回 0；</li></ol></blockquote></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ä&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">localeCompare</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;z&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;de&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 负值：在德语中，ä 排在 z 之前</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ä&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">localeCompare</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;z&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;sv&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 正值：在瑞典语中，ä 排在 z 之后</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ä&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">localeCompare</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;z&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;de&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 负值：在德语中，ä 排在 z 之前</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ä&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">localeCompare</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;z&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;sv&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 正值：在瑞典语中，ä 排在 z 之后</span></span></code></pre></div><h2 id="string-prototype-match" tabindex="-1">String.prototype.match() <a class="header-anchor" href="#string-prototype-match" aria-label="Permalink to &quot;String.prototype.match()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法检索字符串与<code>正则表达式</code>进行匹配的结果。</li><li><strong>参数</strong>：一个正则表达式对象或者任何具有 Symbol.match 方法的对象。如果 regexp 不是 RegExp 对象并且对象上无 Symbol.match 方法，则会使用 <code>new RegExp(regexp)</code> 将其隐式地转换为 RegExp。如果match参数为空则相当于<code>match(/( ? : )/)</code>，配得到[&quot;&quot;]</li><li><strong>返回</strong>： <ol><li>如果使用 g 标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。<br></li><li>如果没有使用 g 标志，则只返回第一个完整匹配及其相关捕获组。在这种情况下，match() 方法将返回与 RegExp.prototype.exec() 相同的结果（一个带有一些额外属性的数组）。</li></ol></li></ul><h2 id="string-prototype-matchall" tabindex="-1">String.prototype.matchAll() <a class="header-anchor" href="#string-prototype-matchall" aria-label="Permalink to &quot;String.prototype.matchAll()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回一个迭代器，该迭代器包含了检索字符串与正则表达式进行匹配的所有结果（包括捕获组）。</li><li><strong>参数</strong>：一个正则表达式对象，或者是任何具有 Symbol.matchAll 方法的对象。正则表达式，必须设置了全局（g）标志。（也会隐式转换RegExp）</li><li><strong>返回</strong>：一个匹配结果的可迭代迭代器对象（它不可重新开始）。每个匹配结果都是一个数组，其形状与 RegExp.prototype.exec() 的返回值相同。</li><li><strong>异常</strong>：如果 regexp 是一个正则表达式，且没有设置全局（g）标志（其 flags 属性不包含 &quot;g&quot;），则会抛出该异常。</li></ul><details class="details custom-block"><summary>示例代码</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;table football, foosball&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regexp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">foo</span><span style="color:#79B8FF;">[a-z]</span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">matches</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">matchAll</span><span style="color:#E1E4E8;">(regexp);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">match</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> matches) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`找到 \${</span><span style="color:#E1E4E8;">match</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">} 起始位置=\${</span><span style="color:#E1E4E8;">match</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">} 结束位置=\${</span></span>
<span class="line"><span style="color:#9ECBFF;">      </span><span style="color:#E1E4E8;">match</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">match</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">].</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#9ECBFF;">}.\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 找到 football 起始位置=6 结束位置=14.</span></span>
<span class="line"><span style="color:#6A737D;">// 找到 foosball 起始位置=16 结束位置=24.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;table football, foosball&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regexp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /foo</span><span style="color:#005CC5;">[a-z]</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">matches</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">matchAll</span><span style="color:#24292E;">(regexp);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">match</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> matches) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`找到 \${</span><span style="color:#24292E;">match</span><span style="color:#032F62;">[</span><span style="color:#005CC5;">0</span><span style="color:#032F62;">]</span><span style="color:#032F62;">} 起始位置=\${</span><span style="color:#24292E;">match</span><span style="color:#032F62;">.</span><span style="color:#24292E;">index</span><span style="color:#032F62;">} 结束位置=\${</span></span>
<span class="line"><span style="color:#032F62;">      </span><span style="color:#24292E;">match</span><span style="color:#032F62;">.</span><span style="color:#24292E;">index</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#24292E;">match</span><span style="color:#032F62;">[</span><span style="color:#005CC5;">0</span><span style="color:#032F62;">].</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#032F62;">}.\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 找到 football 起始位置=6 结束位置=14.</span></span>
<span class="line"><span style="color:#6A737D;">// 找到 foosball 起始位置=16 结束位置=24.</span></span></code></pre></div></details><h2 id="string-prototype-normalize" tabindex="-1">String.prototype.normalize() <a class="header-anchor" href="#string-prototype-normalize" aria-label="Permalink to &quot;String.prototype.normalize()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回该字符串的 Unicode 标准化形式。Unicode 为每个字符分配一个唯一的数值，称为码位。抽象字符可以由一个或多个码位或码位序列来表示。</li><li><strong>参数</strong>： <ol><li>NFC: 规范分解，然后进行规范组合。<br></li><li>NFD: 规范分解。<br></li><li>NFKC: 兼容分解，然后进行规范组合。<br></li><li>NFKD: 规范分解。<br> 用于指定 Unicode 标准化形式。如果省略或为 undefined，则默认为 &quot;NFC&quot;。</li></ol></li><li><strong>异常</strong>: 如果 参数 不是上述指定的值之一，将抛出该异常。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> string1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\uFB00</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//&#39;ﬀ&#39;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> string2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\u0066\\u0066</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//&#39;ff&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">string1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> string1.</span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NFKD&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;ff&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">string2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> string2.</span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NFKD&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;ff&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">string1 </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> string2 </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> string1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\uFB00</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//&#39;ﬀ&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> string2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u0066\\u0066</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//&#39;ff&#39;</span></span>
<span class="line"><span style="color:#24292E;">string1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> string1.</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NFKD&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;ff&#39;</span></span>
<span class="line"><span style="color:#24292E;">string2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> string2.</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NFKD&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;ff&#39;</span></span>
<span class="line"><span style="color:#24292E;">string1 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> string2 </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="string-prototype-padend" tabindex="-1">String.prototype.padEnd() <a class="header-anchor" href="#string-prototype-padend" aria-label="Permalink to &quot;String.prototype.padEnd()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法会将当前字符串从末尾开始填充给定的字符串（如果需要会重复填充），直到达到给定的长度。填充是从当前字符串的末尾开始的。</li><li><strong>参数</strong>：当前 str 填充后的长度。如果该值小于或等于 str.length，则会直接返回当前 str。</li><li>[可选参数]：用于填充当前 str 的字符串。如果 padString 太长，无法适应 targetLength，则会被截断：对于从左到右的语言，左侧的部分将会被保留；对于从右到左的语言，右侧的部分将会被保留。默认值为“ ” (U+0020)。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;abc       &quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;abcfoofoof&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;abc123&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;abc&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;abc       &quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;abcfoofoof&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;abc123&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;abc&quot;</span></span></code></pre></div><h2 id="string-prototype-padstart" tabindex="-1">String.prototype.padStart() <a class="header-anchor" href="#string-prototype-padstart" aria-label="Permalink to &quot;String.prototype.padStart()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法用另一个字符串填充当前字符串（如果需要会重复填充），直到达到给定的长度。填充是从当前字符串的开头开始的。</li><li><strong>参数</strong>：当前 str 填充后的长度。如果该值小于或等于 str.length，则会直接返回当前 str。</li><li>[可选参数]：用于填充当前 str 的字符串。如果 padString 太长，无法适应 targetLength，则会从末尾被截断。默认值为 Unicode“空格”字符（U+0020）。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;       abc&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;foofoofabc&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;123465&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;123abc&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;00000abc&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;abc&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;       abc&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;foofoofabc&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;123465&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;123abc&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;00000abc&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;abc&quot;</span></span></code></pre></div><h2 id="string-prototype-repeat" tabindex="-1">String.prototype.repeat() <a class="header-anchor" href="#string-prototype-repeat" aria-label="Permalink to &quot;String.prototype.repeat()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法构造并返回一个新字符串，其中包含指定数量的所调用的字符串副本，这些副本连接在一起。</li><li><strong>参数</strong>：介于 0 和 +Infinity 之间的整数。表示在新构造的字符串中重复了多少遍原字符串。(向下取整)</li><li><strong>异常</strong>：如果 count 为负值，或者 count 超过了字符串的最大长度，将抛出错误。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// RangeError</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;abc&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3.5</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;abcabcabc&#39;（count 将被转换为整数）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// RangeError</span></span>
<span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;abc&#39;</span></span>
<span class="line"><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3.5</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;abcabcabc&#39;（count 将被转换为整数）</span></span></code></pre></div><h2 id="string-prototype-replace" tabindex="-1">String.prototype.replace() <a class="header-anchor" href="#string-prototype-replace" aria-label="Permalink to &quot;String.prototype.replace()&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(pattern, replacement)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(pattern, replacement)</span></span></code></pre></div><ul><li><strong>描述</strong>：该方法并不改变调用它的字符串本身，而是返回一个新的字符串，其中一个、多个或所有匹配的 pattern 被替换为 replacement。pattern 可以是字符串或 RegExp，replacement 可以是字符串或一个在每次匹配时调用的函数。如果 pattern 是字符串，则只会替换第一个匹配项。原始的字符串不会改变。</li><li><strong>参数1</strong>：可以是字符串或者一个带有 Symbol.replace 方法的对象，典型的例子就是正则表达式。任何没有 Symbol.replace 方法的值都会被强制转换为字符串。</li><li><strong>参数2</strong>：可以是字符串或函数。 <ol><li>如果是字符串，它将替换由 pattern 匹配的子字符串。支持一些特殊的替换模式，请参阅下面<code>替换字符串可以包括以下特殊替换模式</code>。</li><li>如果是函数，将为每个匹配调用该函数，并将其返回值用作替换文本。下面的指定函数作为替换项部分描述了提供给此函数的参数。</li></ol></li></ul><p><strong>替换字符串可以包括以下特殊替换模式</strong></p><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">插入值</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$$</code></td><td style="text-align:left;">插入一个 <code>&quot;$&quot;</code>。</td></tr><tr><td style="text-align:left;"><code>$&amp;</code></td><td style="text-align:left;">插入匹配的子字符串。</td></tr><tr><td style="text-align:left;"><strong>$\`</strong></td><td style="text-align:left;">插入匹配子字符串之前的字符串片段。</td></tr><tr><td style="text-align:left;"><code>$&#39;</code></td><td style="text-align:left;">插入匹配子字符串之后的字符串片段。</td></tr><tr><td style="text-align:left;"><code>$n</code></td><td style="text-align:left;">插入第 <code>n</code>（索引从 1 开始）个捕获组，其中 <code>n</code> 是小于 100 的正整数。</td></tr><tr><td style="text-align:left;"><code>$</code></td><td style="text-align:left;">插入名称为 <code>Name</code> 的命名捕获组。</td></tr></tbody></table><p>只有当 pattern 参数是一个 RegExp 对象时，$n 和 $&lt; Name &gt; 才可用。如果 pattern 是字符串，或者相应的捕获组在正则表达式中不存在，则该模式将被替换为一个字面量。如果该组存在但未匹配（因为它是一个分支的一部分），则将用空字符串替换它。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;20240110&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regexp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{4}</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formatDate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(regexp,</span><span style="color:#9ECBFF;">&quot;$1-$2-$3&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(formatDate) </span><span style="color:#6A737D;">// 2024-01-10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;20240110&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regexp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{4}</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">g</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">formatDate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(regexp,</span><span style="color:#032F62;">&quot;$1-$2-$3&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(formatDate) </span><span style="color:#6A737D;">// 2024-01-10</span></span></code></pre></div><p><strong>指定函数作为替换项</strong> 你可以将第二个参数指定为函数。在这种情况下，匹配完成后将调用该函数。函数的结果（返回值）将用作替换字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;20240110&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regexp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{4}</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formatDate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(regexp,(</span><span style="color:#FFAB70;">$</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">$1</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">$2</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">$3</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">$1</span><span style="color:#9ECBFF;">}-\${</span><span style="color:#E1E4E8;">$2</span><span style="color:#9ECBFF;">}-\${</span><span style="color:#E1E4E8;">$3</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(formatDate) </span><span style="color:#6A737D;">// 2024-01-10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;20240110&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regexp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{4}</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">g</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">formatDate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(regexp,(</span><span style="color:#E36209;">$</span><span style="color:#24292E;">,</span><span style="color:#E36209;">$1</span><span style="color:#24292E;">,</span><span style="color:#E36209;">$2</span><span style="color:#24292E;">,</span><span style="color:#E36209;">$3</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">$1</span><span style="color:#032F62;">}-\${</span><span style="color:#24292E;">$2</span><span style="color:#032F62;">}-\${</span><span style="color:#24292E;">$3</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(formatDate) </span><span style="color:#6A737D;">// 2024-01-10</span></span></code></pre></div><h2 id="string-prototype-replaceall" tabindex="-1">String.prototype.replaceAll() <a class="header-anchor" href="#string-prototype-replaceall" aria-label="Permalink to &quot;String.prototype.replaceAll()&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(pattern, replacement)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(pattern, replacement)</span></span></code></pre></div><ul><li><strong>描述</strong>：方法返回一个新字符串，其中所有匹配 pattern 的部分都被替换为 replacement。pattern 可以是一个字符串或一个 RegExp，replacement 可以是一个字符串或一个在每次匹配时调用的函数。原始字符串保持不变。</li><li><strong>参数1</strong>：可以是一个字符串或一个具有 Symbol.replace 方法的对象，典型的例子是正则表达式。任何没有 Symbol.replace 方法的值都将被强制转换为字符串。如果 pattern 是一个正则表达式，则必须设置全局（g）标志，否则会抛出 TypeError。</li><li><strong>参数2</strong>：可以是一个字符串或一个函数。替换字符串的语义与 String.prototype.replace() 相同。</li><li><strong>异常</strong>：如果 pattern 是一个正则表达式，并且没有设置全局（g）标志（其 flags 属性不包含 &quot;g&quot;），则会抛出该异常。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 字符串replacement</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Apple Ant Airplane Anchor Animal&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lowString1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> string.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(lowString1)  </span><span style="color:#6A737D;">// apple ant airplane anchor animal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数replacement</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lowString2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> string.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(A)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">match</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(match) </span><span style="color:#6A737D;">// A</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// A 替换成 a</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(lowString2) </span><span style="color:#6A737D;">// apple ant airplane anchor animal</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 字符串replacement</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Apple Ant Airplane Anchor Animal&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lowString1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> string.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(lowString1)  </span><span style="color:#6A737D;">// apple ant airplane anchor animal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数replacement</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lowString2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> string.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(A)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">match</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(match) </span><span style="color:#6A737D;">// A</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// A 替换成 a</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(lowString2) </span><span style="color:#6A737D;">// apple ant airplane anchor animal</span></span></code></pre></div><h2 id="string-prototype-search" tabindex="-1">String.prototype.search() <a class="header-anchor" href="#string-prototype-search" aria-label="Permalink to &quot;String.prototype.search()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法用于在 String 对象中执行正则表达式的搜索，寻找匹配项。</li><li><strong>参数</strong>：一个正则表达式对象，或者具有 Symbol.search 方法的任意对象。如果 regexp 不是 RegExp 对象，并且不具有 Symbol.search 方法，则会使用 new RegExp(regexp) 将其隐式转换为 RegExp。</li><li><strong>返回</strong>：如果匹配成功，则返回正则表达式在字符串中首次匹配的索引；否则，返回 -1。</li></ul><p>regexp 的 g 标志对 search() 方法的结果没有影响，搜索总是以正则表达式的 lastIndex 为 0 进行。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hey JudE&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">re</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[A-Z]</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reDot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[.]</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(re)); </span><span style="color:#6A737D;">// 返回 4，这是第一个大写字母“J”的索引</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(reDot)); </span><span style="color:#6A737D;">// 返回 -1，找不到点符号“.”</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hey JudE&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">re</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#005CC5;">[A-Z]</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">reDot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#005CC5;">[.]</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(re)); </span><span style="color:#6A737D;">// 返回 4，这是第一个大写字母“J”的索引</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(reDot)); </span><span style="color:#6A737D;">// 返回 -1，找不到点符号“.”</span></span></code></pre></div><h2 id="string-prototype-slice" tabindex="-1">String.prototype.slice() <a class="header-anchor" href="#string-prototype-slice" aria-label="Permalink to &quot;String.prototype.slice()&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(indexStart, indexEnd)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(indexStart, indexEnd)</span></span></code></pre></div>`,43),ts=s("li",null,[s("strong",null,"描述"),a("：方法提取字符串的一部分，并将其作为新字符串返回，而不修改原始字符串。")],-1),es=s("li",null,[s("strong",null,"参数"),a("：要返回的子字符串中包含的第一个字符的索引。（从第几位开始） "),s("ol",null,[s("li",null,"indexStart >= str.length，则返回一个空字符串。"),s("li",null,"indexStart < 0，则索引从字符串末尾开始计数。从 (indexStart + str.length, 0) 。"),s("li",null,"indexStart 被省略、为 undefined，或无法转换为数字，则将其视为 0。")])],-1),rs=s("ol",null,[s("li",null,"indexEnd 被省略、为 undefined，或无法转换为数字，或者 indexEnd >= str.length，则 slice() 提取到字符串的末尾。"),s("li",null,"indexEnd < 0，则索引从字符串末尾开始计数。从 (indexStart + str.length, 0) 。"),s("li",null,"在标准化负值后，indexEnd <= indexStart（indexEnd 表示位于 indexStart 之前的字符），则返回一个空字符串。")],-1),cs=o(`<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;The morning is upon us.&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// str1 的长度是 23。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str1.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// he morn</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str1.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// morning is upon u</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str1.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// is upon us.</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str1.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str1.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">// &quot;&quot;，在标准化负值后 起始位置为12，结束位置为11，indexEnd &lt;= indexStart</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;The morning is upon us.&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// str1 的长度是 23。</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str1.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// he morn</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str1.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// morning is upon u</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str1.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// is upon us.</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str1.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str1.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">// &quot;&quot;，在标准化负值后 起始位置为12，结束位置为11，indexEnd &lt;= indexStart</span></span></code></pre></div><h2 id="string-prototype-substring" tabindex="-1">String.prototype.substring() <a class="header-anchor" href="#string-prototype-substring" aria-label="Permalink to &quot;String.prototype.substring()&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(indexStart, indexEnd)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(indexStart, indexEnd)</span></span></code></pre></div>`,3),ys=s("li",null,[s("strong",null,"描述"),a("：方法返回该字符串从起始索引到结束索引（不包括）的部分，如果未提供结束索引，则返回到字符串末尾的部分。")],-1),Es=s("li",null,[s("strong",null,"参数"),a("：返回子字符串中第一个要包含的字符的索引。")],-1),is=s("li",null,"如果 indexStart 等于 indexEnd，则 substring() 返回一个空字符串。",-1),Fs=s("li",null,"如果 indexStart 大于 indexEnd，则 substring() 的效果就像交换了这两个参数一样；",-1),ds=s("li",null,"任何小于 0 或大于 str.length 的参数值都会被视为分别等于 0 和 str.length。",-1),us=s("li",null,"任何值为 NaN 的参数将被视为等于 0。",-1),gs=o(`<details class="details custom-block"><summary>示例</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">anyString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Mozilla&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// anyString.length = 7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(anyString.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &#39;M&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(anyString.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &#39;M&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(anyString.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &#39;Mozill&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(anyString.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &#39;lla&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(anyString.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &#39;lla&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(anyString.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &#39;lla&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(anyString.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &#39;Mozilla&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(anyString.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &#39;Mozilla&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取字符串的最后 4 个字符</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(text.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(text.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 打印“illa”</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取字符串的最后 5 个字符</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(text.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(text.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 打印“zilla”</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">anyString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Mozilla&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// anyString.length = 7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(anyString.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &#39;M&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(anyString.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &#39;M&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(anyString.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &#39;Mozill&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(anyString.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &#39;lla&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(anyString.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &#39;lla&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(anyString.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &#39;lla&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(anyString.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &#39;Mozilla&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(anyString.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &#39;Mozilla&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取字符串的最后 4 个字符</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(text.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(text.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 打印“illa”</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取字符串的最后 5 个字符</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(text.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(text.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 打印“zilla”</span></span></code></pre></div></details><div class="tip custom-block"><p class="custom-block-title">substring() 和 slice() 之间的区别</p><p>substring() 和 slice() 方法几乎相同，但在处理负数参数时有一些细微差别。</p><ol><li>substring() 方法在 indexStart 大于 indexEnd 的情况下会交换它的两个参数，这意味着仍会返回一个字符串。而 slice() 方法在这种情况下返回一个空字符串。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Mozilla&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// substring</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(text.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &quot;zil&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// slice</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(text.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Mozilla&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// substring</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(text.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &quot;zil&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// slice</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(text.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre></div><ol start="2"><li>如果两个参数中的任何一个或两个都是负数或 NaN，substring() 方法将把它们视为 0。slice() 方法也将 NaN 参数视为 0，但当给定负值时，它会从字符串的末尾开始反向计数以找到索引。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// substring</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(text.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &quot;Mo&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(text.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// slice （从末尾开始反向计数）</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(text.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(text.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &quot;zil&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// substring</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(text.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &quot;Mo&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(text.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// slice （从末尾开始反向计数）</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(text.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(text.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &quot;zil&quot;</span></span></code></pre></div></div><h2 id="string-prototype-split" tabindex="-1">String.prototype.split() <a class="header-anchor" href="#string-prototype-split" aria-label="Permalink to &quot;String.prototype.split()&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(separator, limit)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(separator, limit)</span></span></code></pre></div><ul><li><strong>描述</strong>：方法接受<code>一个模式</code>(也可以是正则)，通过搜索模式将字符串分割成一个有序的子串列表，将这些子串放入一个数组，并返回该数组。</li><li><strong>参数</strong>：描述每个分割应该发生在哪里的模式。可以是 undefined，一个字符串，或者一个具有 Symbol.split 方法的对象——典型的例子是正则表达式。省略 separator 或传递 undefined 会导致 split() 返回一个只包含所调用字符串数组。所有不是 undefined 的值或不具有 <a href="./.html">Symbol.split</a> 方法的对象都被强制转换为字符串。</li><li>[可选参数]：一个非负整数，指定数组中包含的子字符串的数量限制。当提供此参数时，split 方法会在指定 separator 每次出现时分割该字符串，但在已经有 limit 个元素时停止分割。任何剩余的文本都不会包含在数组中。 <ol><li>如果在达到极限之前就达到了字符串的末端，那么数组包含的条目可能少于 limit。</li><li>如果 limit 为 0，则返回 []。</li><li>limit&gt;= str.length 或者 小于 0，则都返回完整的字符串分割数组。</li></ol></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abc abc abc abc abc&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [abc,abc,abc,abc,abc]</span></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [abc,abc]</span></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [0]</span></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [abc,abc,abc,abc,abc]</span></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [abc,abc,abc,abc,abc]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abc abc abc abc abc&#39;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [abc,abc,abc,abc,abc]</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [abc,abc]</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [0]</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [abc,abc,abc,abc,abc]</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [abc,abc,abc,abc,abc]</span></span></code></pre></div><h2 id="string-prototype-tolowercase" tabindex="-1">String.prototype.toLowerCase() <a class="header-anchor" href="#string-prototype-tolowercase" aria-label="Permalink to &quot;String.prototype.toLowerCase()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回将字符串转换为小写形式后的值。不会影响字符串本身的值。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ALPHABET&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// &#39;alphabet&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ALPHABET&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// &#39;alphabet&#39;</span></span></code></pre></div><h2 id="string-prototype-touppercase" tabindex="-1">String.prototype.toUpperCase() <a class="header-anchor" href="#string-prototype-touppercase" aria-label="Permalink to &quot;String.prototype.toUpperCase()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回将字符串转换为大写形式后的值。不会影响字符串本身的值。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;alphabet&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// &#39;ALPHABET&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;alphabet&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// &#39;ALPHABET&#39;</span></span></code></pre></div><h2 id="string-prototype-tolocalelowercase" tabindex="-1">String.prototype.toLocaleLowerCase() <a class="header-anchor" href="#string-prototype-tolocalelowercase" aria-label="Permalink to &quot;String.prototype.toLocaleLowerCase()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回根据特定区域设置的大小写映射规则将字符串转换为小写形式的值。不会影响字符串本身的值。</li><li>[可选参数]：一个带有 BCP 47 语言标签的字符串，或者是这种字符串的数组。指示要根据特定区域设置的大小写映射规则进行转换的区域设置。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;ALPHABET&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toLocaleLowerCase</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// &#39;alphabet&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">locales</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;tr&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;TR&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;tr-TR&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;tr-u-co-search&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;tr-x-turkish&quot;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\u0130</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toLocaleLowerCase</span><span style="color:#E1E4E8;">(locales) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;i&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;ALPHABET&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toLocaleLowerCase</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// &#39;alphabet&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">locales</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;tr&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;TR&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tr-TR&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tr-u-co-search&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tr-x-turkish&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u0130</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toLocaleLowerCase</span><span style="color:#24292E;">(locales) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;i&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="string-prototype-tolocaleuppercase" tabindex="-1">String.prototype.toLocaleUpperCase() <a class="header-anchor" href="#string-prototype-tolocaleuppercase" aria-label="Permalink to &quot;String.prototype.toLocaleUpperCase()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回根据特定区域设置的大小写映射规则将字符串转换为大写形式的值。不会影响字符串本身的值。</li><li>[可选参数]：一个带有 BCP 47 语言标签的字符串，或者是这种字符串的数组。指示要根据特定区域设置的大小写映射规则进行转换的区域设置。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;alphabet&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toLocaleUpperCase</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// &#39;ALPHABET&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">locales</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;lt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;LT&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;lt-LT&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;lt-u-co-phonebk&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;lt-x-lietuva&quot;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;i</span><span style="color:#79B8FF;">\\u0307</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toLocaleUpperCase</span><span style="color:#E1E4E8;">(locales); </span><span style="color:#6A737D;">// &#39;I&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;alphabet&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toLocaleUpperCase</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// &#39;ALPHABET&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">locales</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;lt&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;LT&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;lt-LT&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;lt-u-co-phonebk&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;lt-x-lietuva&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#032F62;">&quot;i</span><span style="color:#005CC5;">\\u0307</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toLocaleUpperCase</span><span style="color:#24292E;">(locales); </span><span style="color:#6A737D;">// &#39;I&#39;</span></span></code></pre></div><h2 id="string-prototype-trim" tabindex="-1">String.prototype.trim() <a class="header-anchor" href="#string-prototype-trim" aria-label="Permalink to &quot;String.prototype.trim()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法会从字符串的两端移除空白字符，并返回一个新的字符串，而不会修改原始字符串。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;   foo  &quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// &#39;foo&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;   foo  &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// &#39;foo&#39;</span></span></code></pre></div><h2 id="string-prototype-trimstart" tabindex="-1">String.prototype.trimStart() <a class="header-anchor" href="#string-prototype-trimstart" aria-label="Permalink to &quot;String.prototype.trimStart()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法会从字符串的两端移除空白字符，并返回一个新的字符串，而不会修改原始字符串。trimLeft() 是该方法的别名。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;  foo  &quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#E1E4E8;">str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">trimStart</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str); </span><span style="color:#6A737D;">// &#39;foo  &#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;  foo  &quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">trimStart</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str); </span><span style="color:#6A737D;">// &#39;foo  &#39;</span></span></code></pre></div><h2 id="string-prototype-trimend" tabindex="-1">String.prototype.trimEnd() <a class="header-anchor" href="#string-prototype-trimend" aria-label="Permalink to &quot;String.prototype.trimEnd()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法会从字符串的两端移除空白字符，并返回一个新的字符串，而不会修改原始字符串。trimRight() 是该方法的别名。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;  foo  &quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#E1E4E8;">str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">trimEnd</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str); </span><span style="color:#6A737D;">// &#39;   foo&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;  foo  &quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">trimEnd</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str); </span><span style="color:#6A737D;">// &#39;   foo&#39;</span></span></code></pre></div><h2 id="string-prototype-tostring" tabindex="-1">String.prototype.toString() <a class="header-anchor" href="#string-prototype-tostring" aria-label="Permalink to &quot;String.prototype.toString()&quot;">​</a></h2><ul><li><strong>描述</strong>： <ol><li>String 对象重写了 Object 的 toString 方法；</li><li>它不会继承 Object.prototype.toString()。</li><li>对于 String 值，toString 方法返回字符串本身（如果它是原始值）或 String 对象封装的字符串。</li><li>它的实现与 String.prototype.valueOf() 完全相同。</li><li>当一个 String 对象在期望字符串的上下文中使用时（比如在模板字面量中），JavaScript 会自动调用 toString() 方法。</li><li>String 原始值不会使用 toString() 方法来进行字符串强制转换——因为它们已经是字符串，所以不会进行转换。</li></ol></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello world&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">// x 是 字符对象</span></span>
<span class="line"><span style="color:#E1E4E8;">x.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 字符串原始值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;已经被重写了&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${&quot;foo&quot;}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;foo&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#F97583;">new</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">String</span><span style="color:#9ECBFF;">(</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;已经被重写了&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">// x 是 字符对象</span></span>
<span class="line"><span style="color:#24292E;">x.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 字符串原始值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">String</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;已经被重写了&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${&quot;foo&quot;}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;foo&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#D73A49;">new</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">String</span><span style="color:#032F62;">(</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;已经被重写了&quot;</span></span></code></pre></div><h2 id="string-prototype-valueof" tabindex="-1">String.prototype.valueOf() <a class="header-anchor" href="#string-prototype-valueof" aria-label="Permalink to &quot;String.prototype.valueOf()&quot;">​</a></h2><ul><li><strong>描述</strong>：String 的 valueOf() 方法以字符串数据类型返回 String 对象的原始值。此值等价于 String.prototype.toString()。此方法通常由 JavaScript 在内部调用，而不是在代码中显式调用。</li></ul><h2 id="已弃用" tabindex="-1">已弃用 <a class="header-anchor" href="#已弃用" aria-label="Permalink to &quot;已弃用&quot;">​</a></h2><h3 id="anchor" tabindex="-1">anchor <a class="header-anchor" href="#anchor" aria-label="Permalink to &quot;anchor&quot;">​</a></h3><h3 id="big" tabindex="-1">big <a class="header-anchor" href="#big" aria-label="Permalink to &quot;big&quot;">​</a></h3><h3 id="blink" tabindex="-1">blink <a class="header-anchor" href="#blink" aria-label="Permalink to &quot;blink&quot;">​</a></h3><h3 id="bold" tabindex="-1">bold <a class="header-anchor" href="#bold" aria-label="Permalink to &quot;bold&quot;">​</a></h3><h3 id="fixed" tabindex="-1">fixed <a class="header-anchor" href="#fixed" aria-label="Permalink to &quot;fixed&quot;">​</a></h3><h3 id="fontcolor" tabindex="-1">fontcolor <a class="header-anchor" href="#fontcolor" aria-label="Permalink to &quot;fontcolor&quot;">​</a></h3><h3 id="fontsize" tabindex="-1">fontsize <a class="header-anchor" href="#fontsize" aria-label="Permalink to &quot;fontsize&quot;">​</a></h3><h3 id="small" tabindex="-1">small <a class="header-anchor" href="#small" aria-label="Permalink to &quot;small&quot;">​</a></h3><h3 id="strike" tabindex="-1">strike <a class="header-anchor" href="#strike" aria-label="Permalink to &quot;strike&quot;">​</a></h3><h3 id="sub" tabindex="-1">sub <a class="header-anchor" href="#sub" aria-label="Permalink to &quot;sub&quot;">​</a></h3><h3 id="substr" tabindex="-1">substr <a class="header-anchor" href="#substr" aria-label="Permalink to &quot;substr&quot;">​</a></h3><h3 id="sup" tabindex="-1">sup <a class="header-anchor" href="#sup" aria-label="Permalink to &quot;sup&quot;">​</a></h3><h3 id="italics" tabindex="-1">italics <a class="header-anchor" href="#italics" aria-label="Permalink to &quot;italics&quot;">​</a></h3><h3 id="link" tabindex="-1">link --&gt; <a class="header-anchor" href="#link" aria-label="Permalink to &quot;link --&gt;&quot;">​</a></h3>`,47);function hs(Cs,bs,qs,As,Bs,Ds){const l=t("lines"),p=t("Badge");return r(),c("div",null,[E,i,F,s("ul",null,[s("li",null,[d,a(" 构造函数创建的是 "),n(l,{text:"String 对象"}),a("。")]),u]),g,h,C,s("ul",null,[b,s("li",null,[q,a("：接收一个或多个由介于 "),n(l,{text:" 0 和 65535（0xFFFF）"}),a(" 之间的数表示的 UTF-16 "),A,a("。（参数为负数其实也可以，约束松散）。")]),B]),s("h2",D,[a("String.fromCodePoint()"),n(p,{text:"推荐"}),a(),m]),s("ul",null,[v,s("li",null,[f,a("：Unicode 码位范围从 "),n(l,{text:"0 到 1114111（0x10FFFF）"}),a("。")]),S]),k,s("ul",null,[x,s("li",null,[_,a("：要返回的字符串字符的索引（位置）。当传递负数时，支持从字符串末端开始的相对索引 。"),n(l,{text:"调用时参数会被隐式转为number类型的整数"}),a("，当结果为NaN时，默认返回索引为 0 对应的字符")]),P]),T,s("ul",null,[j,s("li",null,[w,a("：从零开始的正整数，字符的索引。"),n(l,{text:"调用时参数会被隐式转为number类型的整数"}),a("，当结果为NaN时，默认返回索引为 0 对应的字符。")]),$]),N,s("ul",null,[z,s("li",null,[L,a("：字符的索引，从零开始的正整数。"),n(l,{text:"调用时参数会被隐式转为number类型的整数"}),a("，当结果为NaN时，默认返回索引为 0 对应的字符。")]),U]),s("h2",I,[a("String.prototype.codePointAt()"),n(p,{text:"推荐"}),a(),R]),s("ul",null,[M,s("li",null,[V,a("：字符的索引，从零开始的正整数。"),n(l,{text:"调用时参数会被隐式转为number类型的整数"}),a("，当结果为NaN时，默认返回索引为 0 对应的字符。")]),W]),O,s("div",H,[J,K,n(l,{text:"此处测试并没有发现有什么不同(2024)"})]),Z,s("ul",null,[Q,G,s("li",null,[a("[可选参数]："),n(l,{text:"指定从什么位置开始搜索"}),a("。默认值为 0。")]),X]),Y,s("ul",null,[ss,as,s("li",null,[a("[可选参数]："),n(l,{text:"指定从什么位置开始搜索"}),a("，大于字符串长度则不会搜索，小于0则从0开始搜索。默认值为 0。返回值还是字符串原来位置。")])]),ns,s("ul",null,[ls,os,s("li",null,[a("[可选参数]："),n(l,{text:"在指定字符串长度范围内搜索"}),a("，大于字符串长度则全部搜索，小于0则于0相同只搜索0位置。默认值为+Infinity。返回值还是字符串原来位置。")])]),ps,s("ul",null,[ts,es,s("li",null,[a("[可选参数]：要返回的子字符串中排除的第一个字符的索引（到第几位）。("),n(l,{text:"不包含结束位置"}),a(") "),rs])]),cs,s("ul",null,[ys,Es,s("li",null,[a("[可选参数]：返回子字符串中第一个要排除的字符的索引。 "),s("ol",null,[s("li",null,[a("如果省略了 indexEnd，则 substring() 提取字符直到字符串的末尾。("),n(l,{text:"不包含结束位置"}),a(")")]),is,Fs,ds,us])])]),gs])}const fs=e(y,[["render",hs]]);export{vs as __pageData,fs as default};
