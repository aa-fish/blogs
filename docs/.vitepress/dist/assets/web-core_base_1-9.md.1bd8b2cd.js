import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.5b0c684c.js";const p="/blogs/assets/web-core_base_1_9-2.d8c2dea2.png",o="/blogs/assets/web-core_base_1_9-1.e859bff3.png",b=JSON.parse('{"title":"Blob","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/1-9.md","filePath":"web-core/base/1-9.md","lastUpdated":1729031503000}'),e={name:"web-core/base/1-9.md"},t=l('<h1 id="blob" tabindex="-1">Blob <a class="header-anchor" href="#blob" aria-label="Permalink to &quot;Blob&quot;">​</a></h1><p><code>File</code>、<code>Blob</code>、<code>FileReader</code>、<code>ArrayBuffer</code>、<code>Base64</code> 关系图。</p><p><img src="'+p+`" alt="图片"></p><h2 id="blob-1" tabindex="-1">Blob <a class="header-anchor" href="#blob-1" aria-label="Permalink to &quot;Blob&quot;">​</a></h2><p>Blob 全称为 binary large object ，即二进制大对象，它是 JavaScript 中的一个对象，表示原始的类似文件的数据。下面是 MDN 中对 Blob 的解释：</p><blockquote><p>Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。</p></blockquote><p>实际上，<strong>Blob 对象是包含有只读原始数据的类文件对象</strong>。简单来说，Blob 对象就是一个 <strong>不可修改</strong> 的二进制文件。</p><h3 id="blob构造函数参数" tabindex="-1">Blob构造函数参数 <a class="header-anchor" href="#blob构造函数参数" aria-label="Permalink to &quot;Blob构造函数参数&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blob</span><span style="color:#E1E4E8;">(array, options);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span><span style="color:#24292E;">(array, options);</span></span></code></pre></div><ul><li><strong>array</strong>：由 ArrayBuffer、ArrayBufferView、Blob、DOMString 等对象构成的，将会被放进 Blob；</li><li><strong>options</strong>：可选的 BlobPropertyBag 字典，它可能会指定如下两个属性 <ul><li>type：默认值为 &quot;&quot;，表示将会被放入到 blob 中的数组内容的 <strong>MIME 类型</strong>。</li><li>endings：默认值为&quot;transparent&quot;，用于指定包含行结束符\\n的字符串如何被写入，不常用。</li></ul></li></ul><p>常见的MIME类型</p><table><thead><tr><th>类型</th><th>描述</th><th>典型事例</th></tr></thead><tbody><tr><td>text</td><td>表示文件是普通文本</td><td>text/plain, text/html, text/css, text/javascript</td></tr><tr><td>image</td><td>表示是图像文件，包括gif，但是不包含视频</td><td>image/gif, image/png, image/jpeg, image/bmp, image/webp, image/x-icon</td></tr><tr><td>audio</td><td>表示是音频文件</td><td>audio/midi, audio/mpeg, audio/webm, audio/ogg, audio/wav</td></tr><tr><td>video</td><td>表示是视频文件</td><td>video/webm, video/mp4</td></tr><tr><td>application</td><td>表示文二进制数据</td><td>application/octet-stream, application/pkcs12, application/vnd.mspowerpoint, application/xhtml+xml, application/xml, application/pdf</td></tr></tbody></table><h3 id="blob属性和方法" tabindex="-1">Blob属性和方法 <a class="header-anchor" href="#blob属性和方法" aria-label="Permalink to &quot;Blob属性和方法&quot;">​</a></h3><p>通过造函数出来的对象拥有的属性方法：(2个属性4个方法)</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> blob </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blob</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">],{type:</span><span style="color:#9ECBFF;">&#39;text/plain&#39;</span><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> blob </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">],{type:</span><span style="color:#032F62;">&#39;text/plain&#39;</span><span style="color:#24292E;">})</span></span></code></pre></div><ul><li><strong>blob.size</strong>：返回Blob对象中所包含数据的大小(字节)。</li><li><strong>blob.tyoe</strong>：Blob对象所包含数据的MIME类型。如果类型未知，则该值为空字符串。</li><li><strong>blob.stream()</strong>：返回一个ReadableStream对象，读取后返回 Blob的数据。</li><li><strong>blob.arrayBuffer()</strong>：返回一个 Promise 对象，包含 blob 中的数据，并在 ArrayBuffer 中以二进制数据的形式呈现。</li><li><strong>blob.text()</strong>：方法返回一个 Promise 对象，包含 blob 中的内容，使用 UTF-8 格式编码。</li><li><strong>blob.slice(start, end, contentType)</strong>: 返回一个新的 Blob 对象，它包含了原始 Blob 对象的某一个段的数据。（用于切割文件，字节长度单位）。 <ul><li>start: 开始位置</li><li>end: 结束位置</li><li>contentType：切割后文件类型</li></ul></li></ul><details class="details custom-block"><summary>ReadableStream拓展 （使用 stream() 函数与其返回的ReadableStream对象，你将得到一些有趣的能力：）</summary><ul><li>调用方法getReader()，在返回的 stream 上获取一个对象，通过ReadableStreamDefaultReader接口提供的read()方法读取 blob 对象的方法。</li><li>调用返回 stream 对象的pipeTo()方法将 blob 对象的数据传输到可写流。</li><li>调用返回 stream 对象的pipeThrough()方法，通过一个TransformStream对象或其它任意可读可写对传输流对象。</li><li>调用返回 stream 对象的tee()方法以准备可读流。该方法会返回一个数组，该数组包含两个新的 ReadableStream 对象，每个对象都会返回 Blob的内容。</li></ul></details><h2 id="file" tabindex="-1">File <a class="header-anchor" href="#file" aria-label="Permalink to &quot;File&quot;">​</a></h2><p><strong>File 对象是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中。Blob 的属性和方法都可以用于 File 对象。</strong></p><blockquote><p><span style="color:red;"><strong>注意：File 对象中只存在于浏览器环境中，在 Node.js 环境中不存在。</strong></span></p></blockquote><p><strong>在 JavaScript 中，主要有两种方法来获取 File 对象：</strong></p><h3 id="input" tabindex="-1">input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input&quot;">​</a></h3><p><code>&lt;input type=&quot;file&quot; id=&quot;fileInput&quot; multiple=&quot;multiple&quot;&gt;</code></p><ul><li>type=&quot;file&quot;：指定 input 的输入类型为文件。</li><li>id=&quot;fileInput&quot;：指定 input 的唯一 id。</li><li>multiple=&quot;multiple&quot;：指定 input 可以同时上传多个文件。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fileInput</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fileInput&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">fileInput.</span><span style="color:#B392F0;">onchange</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(e.target.files);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fileInput</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fileInput&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">fileInput.</span><span style="color:#6F42C1;">onchange</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(e.target.files);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>每个 File 对象都包含文件的一些属性，这些属性都继承自 Blob 对象：</p><ul><li>lastModified：引用文件最后修改日期，为自1970年1月1日0:00以来的毫秒数；</li><li>lastModifiedDate：引用文件的最后修改日期；</li><li>name：引用文件的文件名；</li><li>size：引用文件的文件大小；</li><li>type：文件的媒体类型（MIME）；</li><li>webkitRelativePath：文件的路径或 URL。 可以通过对比 size 属性来限制文件大小，通过对比 type 来限制上传文件的格式等。</li></ul><h3 id="文件拖拽" tabindex="-1">文件拖拽 <a class="header-anchor" href="#文件拖拽" aria-label="Permalink to &quot;文件拖拽&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dragBox&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dragBox&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dragBox</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dragBox&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">dragBox.</span><span style="color:#B392F0;">ondragover</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//阻止默认事件</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">dragBox.</span><span style="color:#B392F0;">ondrop</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//阻止默认事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">files</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.dataTransfer.files;</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(files)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dragBox</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dragBox&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">dragBox.</span><span style="color:#6F42C1;">ondragover</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">preventDefault</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//阻止默认事件</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">dragBox.</span><span style="color:#6F42C1;">ondrop</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">preventDefault</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//阻止默认事件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">files</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.dataTransfer.files;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(files)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="filereader" tabindex="-1">FileReader <a class="header-anchor" href="#filereader" aria-label="Permalink to &quot;FileReader&quot;">​</a></h2><p>FileReader 是一个异步 API，用于读取文件并提取其内容以供进一步使用。FileReader 可以将 Blob 读取为不同的格式。</p><blockquote><p>注意：FileReader 仅用于以安全的方式从用户（远程）系统读取文件内容，不能用于从文件系统中按路径名简单地读取文件。</p></blockquote><p><strong>用 FileReader 构造函数来创建一个 FileReader 对象：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">reader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="filereader属性" tabindex="-1">FileReader属性 <a class="header-anchor" href="#filereader属性" aria-label="Permalink to &quot;FileReader属性&quot;">​</a></h3><ul><li><strong>error</strong>：表示在读取文件时发生的错误；</li><li><strong>result</strong>：文件内容。该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。</li><li><strong>readyState</strong>：表示FileReader状态的数字。取值如下： <table><thead><tr><th style="text-align:left;">常量名</th><th style="text-align:left;">值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>EMPTY</code></td><td style="text-align:left;"><code>0</code></td><td style="text-align:left;">还没有加载任何数据。</td></tr><tr><td style="text-align:left;"><code>LOADING</code></td><td style="text-align:left;"><code>1</code></td><td style="text-align:left;">数据正在被加载。</td></tr><tr><td style="text-align:left;"><code>DONE</code></td><td style="text-align:left;"><code>2</code></td><td style="text-align:left;">已完成全部的读取请求。</td></tr></tbody></table></li></ul><h3 id="filereader方法" tabindex="-1">FileReader方法 <a class="header-anchor" href="#filereader方法" aria-label="Permalink to &quot;FileReader方法&quot;">​</a></h3><ul><li><strong>FileReader.abort()</strong>：该方法可以取消 FileReader 的读取操作，触发之后 readyState 为已完成（DONE）。</li><li><strong>FileReader.readAsArrayBuffer(blob)</strong>：<span class="fbg-1">读取指定的 Blob 或 File 的对象。当读取操作完成时，readyState 变成 DONE（已完成）</span>，并触发 loadend 事件，同时 result 属性将包含一个 <strong>ArrayBuffer 对象以表示所读取文件的数据</strong>。</li><li><strong>FileReader.readAsDataURL(blob)</strong>：<span class="fbg-1">读取指定的 Blob 或 File 的对象。当读取操作完成时，readyState 变成 DONE（已完成）</span>，并触发 loadend 事件，同时 result 属性将包含一个<strong>data:URL 格式的字符串（base64 编码）以表示所读取文件的内容</strong>。</li><li><strong>FileReader.readAsText(blob,encoding)</strong>：<span class="fbg-1">读取指定的 Blob 或 File 的对象。当读取操作完成时，readyState 变成 DONE（已完成）</span>，并触发 loadend 事件，同时 result 属性将包含一个<strong>文本字符串的形式包含文件的内容</strong>。（不适用于大文件，对于大型文件，首选readAsArrayBuffer(blob)） <ul><li>第一个参数：Blob类型 或 File类型</li><li>第二个参数：编码类型 (可选)，传入一个字符串类型的编码类型，如缺省，则默认为“utf-8”类型。</li></ul></li><li><strong>FileReader.readAsBinaryString(blob)</strong> <span class="tag-2">非标准</span>：读取指定的 Blob 或 File 对象，当读取完成的时候，readyState 会变成DONE（已完成），并触发 loadend 事件，同时 result 属性将包含所读取文件原始二进制格式。</li></ul><h3 id="filereader事件" tabindex="-1">FileReader事件 <a class="header-anchor" href="#filereader事件" aria-label="Permalink to &quot;FileReader事件&quot;">​</a></h3><ul><li><strong>loadstart</strong>：当文件读取操作开始时，将触发。</li><li><strong>abort</strong>：该事件在读取操作被中断时触发。</li><li><strong>error</strong>：该事件在读取操作发生错误时触发。</li><li><strong>load</strong>：该事件在读取操作完成时触发。</li><li><strong>loadend</strong>: 无论文件读取是否成功完成，都会触发。</li><li><strong>progress</strong>：该事件在读取 Blob 时触发。</li></ul><p><strong>progress 事件提供了两个属性：loaded（已读取量）和total（需读取总量）。</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addListeners</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">reader</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    reader.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;loadstart&#39;</span><span style="color:#E1E4E8;">, handleEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    reader.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;load&#39;</span><span style="color:#E1E4E8;">, handleEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    reader.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;loadend&#39;</span><span style="color:#E1E4E8;">, handleEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    reader.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;progress&#39;</span><span style="color:#E1E4E8;">, handleEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    reader.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, handleEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    reader.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abort&#39;</span><span style="color:#E1E4E8;">, handleEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">e</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">type</span><span style="color:#9ECBFF;">}: \${</span><span style="color:#E1E4E8;">e</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">loaded</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;load&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(reader.result)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;progress&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> e.loaded </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> e.total) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">percent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (e.loaded </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> e.total) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`上传进度: \${</span><span style="color:#E1E4E8;">Math</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">round</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">percent</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">} %\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">fileInput.</span><span style="color:#B392F0;">onchange</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.target.files[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (file) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        reader.</span><span style="color:#B392F0;">readAsDataURL</span><span style="color:#E1E4E8;">(file)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addListeners</span><span style="color:#E1E4E8;">(reader)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">reader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addListeners</span><span style="color:#24292E;">(</span><span style="color:#E36209;">reader</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    reader.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;loadstart&#39;</span><span style="color:#24292E;">, handleEvent);</span></span>
<span class="line"><span style="color:#24292E;">    reader.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;load&#39;</span><span style="color:#24292E;">, handleEvent);</span></span>
<span class="line"><span style="color:#24292E;">    reader.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;loadend&#39;</span><span style="color:#24292E;">, handleEvent);</span></span>
<span class="line"><span style="color:#24292E;">    reader.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;progress&#39;</span><span style="color:#24292E;">, handleEvent);</span></span>
<span class="line"><span style="color:#24292E;">    reader.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, handleEvent);</span></span>
<span class="line"><span style="color:#24292E;">    reader.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abort&#39;</span><span style="color:#24292E;">, handleEvent);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleEvent</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">e</span><span style="color:#032F62;">.</span><span style="color:#24292E;">type</span><span style="color:#032F62;">}: \${</span><span style="color:#24292E;">e</span><span style="color:#032F62;">.</span><span style="color:#24292E;">loaded</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;load&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reader.result)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;progress&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> e.loaded </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> e.total) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">percent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (e.loaded </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> e.total) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`上传进度: \${</span><span style="color:#24292E;">Math</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">round</span><span style="color:#032F62;">(</span><span style="color:#24292E;">percent</span><span style="color:#032F62;">)</span><span style="color:#032F62;">} %\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">fileInput.</span><span style="color:#6F42C1;">onchange</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.target.files[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (file) {</span></span>
<span class="line"><span style="color:#24292E;">        reader.</span><span style="color:#6F42C1;">readAsDataURL</span><span style="color:#24292E;">(file)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addListeners</span><span style="color:#24292E;">(reader)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="arraybuffer" tabindex="-1">ArrayBuffer <a class="header-anchor" href="#arraybuffer" aria-label="Permalink to &quot;ArrayBuffer&quot;">​</a></h2><p>ArrayBuffer 对象用来表示通用的、固定长度的<strong>原始二进制数据缓冲区</strong>。ArrayBuffer 的内容<strong>不能直接操作</strong>，只能通过 <code>DataView</code> 对象或 <code>TypedArrray</code> 对象来访问。这些对象用于读取和写入缓冲区内容。</p><h3 id="arraybuffer构造函数" tabindex="-1">ArrayBuffer构造函数 <a class="header-anchor" href="#arraybuffer构造函数" aria-label="Permalink to &quot;ArrayBuffer构造函数&quot;">​</a></h3><p><code>new ArrayBuffer(bytelength)</code></p><ul><li>返回：返回一个新的指定大小的ArrayBuffer对象，内容初始化为0。</li><li>参数：它接受一个参数，即 bytelength，表示要创建数组缓冲区的大小（以字节为单位。）；</li></ul><h3 id="arraybuffer属性" tabindex="-1">ArrayBuffer属性 <a class="header-anchor" href="#arraybuffer属性" aria-label="Permalink to &quot;ArrayBuffer属性&quot;">​</a></h3><ul><li><strong>ArrayBuffer.prototype.byteLength</strong>：它是一个只读属性，表示 ArrayBuffer 的 byte 的大小，在 ArrayBuffer 构造完成时生成，不可改变。</li></ul><h3 id="arraybuffer方法" tabindex="-1">ArrayBuffer方法 <a class="header-anchor" href="#arraybuffer方法" aria-label="Permalink to &quot;ArrayBuffer方法&quot;">​</a></h3><ul><li><strong>ArrayBuffer.prototype.slice()</strong>：用来截取 ArrayBuffer 实例，它返回一个新的 ArrayBuffer。它的内容是这个 ArrayBuffer 的字节副本，从 begin（包括），到 end（不包括）</li><li><strong>ArrayBuffer.isView()</strong>：返回值是一个布尔值。如果参数是 ArrayBuffer 的视图实例则返回 true，否则返回 false。<strong>这个方法就是用来判断参数是否是 TypedArray 实例或者 DataView 实例</strong>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">([]);                  </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">({});                  </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">rayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">));   </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">());    </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Float32Array</span><span style="color:#E1E4E8;">());  </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dv</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">(dv);                  </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">([]);                  </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">({});                  </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">rayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">));   </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">());    </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Float32Array</span><span style="color:#24292E;">());  </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dv</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">(dv);                  </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h3 id="typedarray、dataview" tabindex="-1">TypedArray、DataView <a class="header-anchor" href="#typedarray、dataview" aria-label="Permalink to &quot;TypedArray、DataView&quot;">​</a></h3><p>ArrayBuffer 本身就是一个黑盒，不能直接读写所存储的数据，需要借助以下视图对象来读写：</p><ul><li><p><strong>TypedArray</strong>：用来生成内存的视图，通过9个构造函数，可以生成9种数据格式的视图。</p></li><li><p><strong>DataViews</strong>：用来生成内存的视图，可以自定义格式和字节序。</p></li></ul><p><img src="`+o+`" alt="图片"></p><blockquote><p><strong>TypedArray视图 vs DataView视图</strong> <br> 两者区别主要是字节序，前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。（类似TS中数组和元组）</p></blockquote><blockquote><p><strong>ArrayBuffer 与 Blob</strong> <br> Blob 作为一个整体文件，适合用于传输；当需要对二进制数据进行操作时（比如要修改某一段数据时），就可以使用 ArrayBuffer。</p></blockquote><h4 id="typedarray" tabindex="-1"><code>TypedArray</code> <a class="header-anchor" href="#typedarray" aria-label="Permalink to &quot;\`TypedArray\`&quot;">​</a></h4><p>TypedArray 对象一共提供 9 种类型的视图</p><table><thead><tr><th>元素</th><th>类型化数组</th><th>字节</th><th>描述</th></tr></thead><tbody><tr><td>Int8</td><td>Int8Array</td><td>1</td><td>8 位 <code>有</code> 符号整数</td></tr><tr><td>Uint8</td><td>Uint8Array</td><td>1</td><td>8 位 <code>无</code> 符号整数</td></tr><tr><td>Uint8C</td><td>Uint8ClampedArray</td><td>1</td><td>8 位 <code>无</code> 符号整数</td></tr><tr><td>Int16</td><td>Int16Array</td><td>2</td><td>16 位 <code>有</code> 符号整数</td></tr><tr><td>Uint16</td><td>Uint16Array</td><td>2</td><td>16 位 <code>无</code> 符号整数</td></tr><tr><td>Int32</td><td>Int32Array</td><td>4</td><td>32 位 <code>有</code> 符号整数</td></tr><tr><td>Uint32</td><td>Uint32Array</td><td>4</td><td>32 位 <code>无</code> 符号整数</td></tr><tr><td>Float32</td><td>Float32Array</td><td>4</td><td>32 位浮点</td></tr><tr><td>Float64</td><td>Float64Array</td><td>8</td><td>64 位浮点</td></tr></tbody></table><blockquote><p><strong>Uint8Array：</strong> 将 ArrayBuffer 中的每个字节视为一个整数，可能的值从 0 到 255 （一个字节等于 8 位）。 这样的值称为“8 位无符号整数”。</p></blockquote><blockquote><p><strong>Uint16Array</strong>：将 ArrayBuffer 中任意两个字节视为一个整数，可能的值从 0 到 65535。 这样的值称为“16 位无符号整数”。</p></blockquote><blockquote><p><strong>Uint32Array</strong>：将 ArrayBuffer 中任何四个字节视为一个整数，可能值从 0 到 4294967295，这样的值称为“32 位无符号整数”。</p></blockquote><p>这些构造函数生成的对象统称为 TypedArray 对象。它们和正常的数组很类似，都有length 属性，都能用索引获取数组元素，所有数组的方法都可以在类型化数组上面使用。</p><p>类型化数组和数组有什么区别:</p><ul><li>类型化数组的元素都是连续的，不会为空；</li><li>类型化数组的所有成员的类型和格式相同；</li><li>类型化数组元素默认值为 0；</li><li>类型化数组本质上只是一个视图层，不会存储数据，数据都存储在更底层的 ArrayBuffer 对象中。</li></ul><p><strong>TypedArray属性方法</strong>：</p><p>TypedArray 的语法如下（<strong>TypedArray只是一个概念，实际使用的是那9个对象</strong>）：</p><ul><li><strong>new TypedArray(length)</strong>：通过分配指定长度内容进行分配。</li><li><strong>new TypedArray(typedArray)</strong>：接收一个视图实例作为参数。</li><li><strong>new TypedArray(object)</strong>：参数可以是一个普通数组。</li><li><strong>new TypedArray(buffer, byteOffset, length)</strong>： <ul><li>buffer:一个ArrayBuffer对象。</li><li>byteOffset(可选):视图开始的字节序号，默认从0开始。</li><li>length:视图包含的数据个数，默认直到本段内存区域结束。</li></ul></li></ul><p><strong>BYTES_PER_ELEMENT</strong></p><p>每种视图的构造函数都有一个 BYTES_PER_ELEMENT 属性，表示这种数据类型占据的字节数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Int8Array.</span><span style="color:#79B8FF;">BYTES_PER_ELEMENT</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">Uint8Array.</span><span style="color:#79B8FF;">BYTES_PER_ELEMENT</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">Int16Array.</span><span style="color:#79B8FF;">BYTES_PER_ELEMENT</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#E1E4E8;">Uint16Array.</span><span style="color:#79B8FF;">BYTES_PER_ELEMENT</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#E1E4E8;">Int32Array.</span><span style="color:#79B8FF;">BYTES_PER_ELEMENT</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#E1E4E8;">Uint32Array.</span><span style="color:#79B8FF;">BYTES_PER_ELEMENT</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#E1E4E8;">Float32Array.</span><span style="color:#79B8FF;">BYTES_PER_ELEMENT</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#E1E4E8;">Float64Array.</span><span style="color:#79B8FF;">BYTES_PER_ELEMENT</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Int8Array.</span><span style="color:#005CC5;">BYTES_PER_ELEMENT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">Uint8Array.</span><span style="color:#005CC5;">BYTES_PER_ELEMENT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">Int16Array.</span><span style="color:#005CC5;">BYTES_PER_ELEMENT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">Uint16Array.</span><span style="color:#005CC5;">BYTES_PER_ELEMENT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">Int32Array.</span><span style="color:#005CC5;">BYTES_PER_ELEMENT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#24292E;">Uint32Array.</span><span style="color:#005CC5;">BYTES_PER_ELEMENT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#24292E;">Float32Array.</span><span style="color:#005CC5;">BYTES_PER_ELEMENT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#24292E;">Float64Array.</span><span style="color:#005CC5;">BYTES_PER_ELEMENT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 8</span></span></code></pre></div><p>BYTES_PER_ELEMENT 属性也可以在类型化数组的实例上获取：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint32Array</span><span style="color:#E1E4E8;">(buffer); </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Uint32Array.</span><span style="color:#79B8FF;">BYTES_PER_ELEMENT</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">view</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint32Array</span><span style="color:#24292E;">(buffer); </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Uint32Array.</span><span style="color:#005CC5;">BYTES_PER_ELEMENT</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 4</span></span></code></pre></div><p><strong>TypedArray.prototype.buffer</strong> TypedArray 实例的 buffer 属性会返回内存中对应的 ArrayBuffer对象，只读属性。</p><p><strong>TypedArray.prototype.slice()</strong> TypeArray 实例的 slice方法可以返回一个指定位置的新的 TypedArray实例。</p><p><strong>TypedArray.byteLength</strong>：TypedArray 占据的内存长度，单位为字节。</p><p><strong>TypedArray.length</strong>：ypedArray 元素个数。</p><h4 id="dataview" tabindex="-1"><code>DataView</code> <a class="header-anchor" href="#dataview" aria-label="Permalink to &quot;\`DataView\`&quot;">​</a></h4><p>DataView 视图是一个可以从 二进制 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。</p><p>DataView视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，ArrayBuffer对象的各种TypedArray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而DataView视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的。</p><p><strong>new DataView(buffer,byteOffset,byteLength)</strong>:</p><ul><li><strong>buffer</strong>：一个已经存在的 ArrayBuffer 对象，DataView 对象的数据源。</li><li><strong>byteOffse</strong>t：可选，此 DataView 对象的第一个字节在 buffer 中的字节偏移。如果未指定，则默认从第一个字节开始。</li><li><strong>byteLength</strong>：可选，此 DataView 对象的字节长度。如果未指定，这个视图的长度将匹配 buffer 的长度。</li></ul><p><strong>DataView实例下常用属性：</strong></p><blockquote><p><strong>buffer</strong>：返回对应的ArrayBuffer对象；</p><p><strong>byteLength</strong>：返回占据的内存字节长度；</p><p><strong>byteOffset</strong>：返回当前视图从对应的ArrayBuffer对象的哪个字节开始。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">view.buffer;     </span><span style="color:#6A737D;">// ArrayBuffer对象</span></span>
<span class="line"><span style="color:#E1E4E8;">view.byteLength; </span><span style="color:#6A737D;">// 16</span></span>
<span class="line"><span style="color:#E1E4E8;">view.byteOffset; </span><span style="color:#6A737D;">// 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">view</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">view.buffer;     </span><span style="color:#6A737D;">// ArrayBuffer对象</span></span>
<span class="line"><span style="color:#24292E;">view.byteLength; </span><span style="color:#6A737D;">// 16</span></span>
<span class="line"><span style="color:#24292E;">view.byteOffset; </span><span style="color:#6A737D;">// 0</span></span></code></pre></div><p><strong>DataView读取内存</strong>: DataView 实例提供了以下方法来读取内存，它们的参数都是一个字节序号，表示开始读取的字节位置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">getInt8：读取1个字节，返回一个8位整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">getUint8：读取1个字节，返回一个无符号的8位整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">getInt16：读取2个字节，返回一个16位整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">getUint16：读取2个字节，返回一个无符号的16位整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">getInt32：读取4个字节，返回一个32位整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">getUint32：读取4个字节，返回一个无符号的32位整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">getFloat32：读取4个字节，返回一个32位浮点数。</span></span>
<span class="line"><span style="color:#e1e4e8;">getFloat64：读取8个字节，返回一个64位浮点数。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">getInt8：读取1个字节，返回一个8位整数。</span></span>
<span class="line"><span style="color:#24292e;">getUint8：读取1个字节，返回一个无符号的8位整数。</span></span>
<span class="line"><span style="color:#24292e;">getInt16：读取2个字节，返回一个16位整数。</span></span>
<span class="line"><span style="color:#24292e;">getUint16：读取2个字节，返回一个无符号的16位整数。</span></span>
<span class="line"><span style="color:#24292e;">getInt32：读取4个字节，返回一个32位整数。</span></span>
<span class="line"><span style="color:#24292e;">getUint32：读取4个字节，返回一个无符号的32位整数。</span></span>
<span class="line"><span style="color:#24292e;">getFloat32：读取4个字节，返回一个32位浮点数。</span></span>
<span class="line"><span style="color:#24292e;">getFloat64：读取8个字节，返回一个64位浮点数。</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从第1个字节读取一个8位无符号整数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">view1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> view.</span><span style="color:#B392F0;">getUint8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从第2个字节读取一个16位无符号整数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">view2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> view.</span><span style="color:#B392F0;">getUint16</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从第4个字节读取一个16位无符号整数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">view3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> view.</span><span style="color:#B392F0;">getUint16</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">24</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">view</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从第1个字节读取一个8位无符号整数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">view1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> view.</span><span style="color:#6F42C1;">getUint8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从第2个字节读取一个16位无符号整数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">view2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> view.</span><span style="color:#6F42C1;">getUint16</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从第4个字节读取一个16位无符号整数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">view3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> view.</span><span style="color:#6F42C1;">getUint16</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>DataView写入内存</strong>: DataView 实例提供了以下方法来写入内存，它们都接受两个参数，第一个参数表示开始写入数据的字节序号，第二个参数为写入的数据。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">setInt8：写入1个字节的8位整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">setUint8：写入1个字节的8位无符号整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">setInt16：写入2个字节的16位整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">setUint16：写入2个字节的16位无符号整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">setInt32：写入4个字节的32位整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">setUint32：写入4个字节的32位无符号整数。</span></span>
<span class="line"><span style="color:#e1e4e8;">setFloat32：写入4个字节的32位浮点数。</span></span>
<span class="line"><span style="color:#e1e4e8;">setFloat64：写入8个字节的64位浮点数。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">setInt8：写入1个字节的8位整数。</span></span>
<span class="line"><span style="color:#24292e;">setUint8：写入1个字节的8位无符号整数。</span></span>
<span class="line"><span style="color:#24292e;">setInt16：写入2个字节的16位整数。</span></span>
<span class="line"><span style="color:#24292e;">setUint16：写入2个字节的16位无符号整数。</span></span>
<span class="line"><span style="color:#24292e;">setInt32：写入4个字节的32位整数。</span></span>
<span class="line"><span style="color:#24292e;">setUint32：写入4个字节的32位无符号整数。</span></span>
<span class="line"><span style="color:#24292e;">setFloat32：写入4个字节的32位浮点数。</span></span>
<span class="line"><span style="color:#24292e;">setFloat64：写入8个字节的64位浮点数。</span></span></code></pre></div><h2 id="object-url" tabindex="-1">Object URL <a class="header-anchor" href="#object-url" aria-label="Permalink to &quot;Object URL&quot;">​</a></h2><p>Object URL（MDN定义名称）又称Blob URL（W3C定义名称），是HTML5中的新标准。它是一个用来表示File Object 或Blob Object 的URL。</p><p>其实 Blob URL/Object URL 是一种伪协议，允许将 Blob 和 File 对象用作图像、二进制数据下载链接等的 URL 源。</p><p>对于 Blob/File 对象，<strong>可以使用 URL构造函数的 <code>createObjectURL()</code> 方法创建将给出的对象的 URL</strong>。这个 URL 对象表示指定的 File 对象或 Blob 对象。我们可以在 img、script 标签中或者 a 和 link 标签的 href 属性中使用这个 URL。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;file&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;fileInput&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;preview&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fileInput</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fileInput&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">preview</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;preview&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">fileInput.</span><span style="color:#B392F0;">onchange</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  preview.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(e.target.files[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(preview.src);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;file&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;fileInput&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;preview&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fileInput</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fileInput&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">preview</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;preview&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">fileInput.</span><span style="color:#6F42C1;">onchange</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  preview.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createObjectURL</span><span style="color:#24292E;">(e.target.files[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(preview.src);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>createObjectURL() 可以将Blob/File对象转化为URL，通过这个URL 就可以实现文件下载或者图片显示等。</p><p>当我们使用createObjectURL()方法创建一个data URL 时，就需要使用revokeObjectURL()方法从内存中清除它来释放内存。虽然浏览器会在文档卸载时自动释放 Data URL，但为了提高性能，我们应该使用createObjectURL()来手动释放它。revokeObjectURL()方法接受一个Data URL 作为其参数，返回undefined。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objUrl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&quot;filename&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(objUrl);</span></span>
<span class="line"><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">revokeObjectURL</span><span style="color:#E1E4E8;">(objUrl);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objUrl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createObjectURL</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&quot;filename&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(objUrl);</span></span>
<span class="line"><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">revokeObjectURL</span><span style="color:#24292E;">(objUrl);</span></span></code></pre></div><h2 id="base64" tabindex="-1">Base64 <a class="header-anchor" href="#base64" aria-label="Permalink to &quot;Base64&quot;">​</a></h2><p>Base64 是一种基于64个可打印字符来表示二进制数据的表示方法。Base64 编码普遍应用于需要通过被设计为处理文本数据的媒介上储存和传输二进制数据而需要编码该二进制数据的场景。这样是为了保证数据的完整并且不用在传输过程中修改这些数据。</p><p>在 JavaScript 中，有两个函数被分别用来处理解码和编码 base64 字符串：</p><ul><li>atob()：解码，解码一个 Base64 字符串；</li><li>btoa()：编码，从一个字符串或者二进制数据编码一个 Base64 字符串。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">btoa</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;JavaScript&quot;</span><span style="color:#E1E4E8;">)       </span><span style="color:#6A737D;">// &#39;SmF2YVNjcmlwdA==&#39;</span></span>
<span class="line"><span style="color:#B392F0;">atob</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;SmF2YVNjcmlwdA==&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;JavaScript&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">btoa</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JavaScript&quot;</span><span style="color:#24292E;">)       </span><span style="color:#6A737D;">// &#39;SmF2YVNjcmlwdA==&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">atob</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;SmF2YVNjcmlwdA==&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;JavaScript&#39;</span></span></code></pre></div><p><strong>base64 的实际应用场景</strong></p><ol><li>其实多数场景就是基于Data URL。比如，使用toDataURL()方法把 canvas 画布内容生成 base64 编码格式的图片：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">canvas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;canvas&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ctx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2d&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dataUrl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">toDataURL</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">canvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;canvas&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ctx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> canvas.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2d&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dataUrl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> canvas.</span><span style="color:#6F42C1;">toDataURL</span><span style="color:#24292E;">();</span></span></code></pre></div><ol start="2"><li>使用readAsDataURL()方法把上传的文件转为base64格式的data URI。比如上传头像展示或者编辑：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;file&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;fileInput&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;preview&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fileInput</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fileInput&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">preview</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;preview&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">fileInput.</span><span style="color:#B392F0;">onchange</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  reader.</span><span style="color:#B392F0;">readAsDataURL</span><span style="color:#E1E4E8;">(e.target.files[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">reader.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  preview.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.target.result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(e.target.result);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;file&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;fileInput&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;preview&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fileInput</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fileInput&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">preview</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;preview&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">reader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">fileInput.</span><span style="color:#6F42C1;">onchange</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  reader.</span><span style="color:#6F42C1;">readAsDataURL</span><span style="color:#24292E;">(e.target.files[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">reader.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  preview.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.target.result;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(e.target.result);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>将图片（二进制数据）转化为可打印的字符，也便于数据的传输。</p><p>另外，一些小的图片都可以使用 base64 格式进行展示，img标签和background的 url 属性都支持使用base64 格式的图片，这样做也可以减少 HTTP 请求。</p><h2 id="格式转换" tabindex="-1">格式转换 <a class="header-anchor" href="#格式转换" aria-label="Permalink to &quot;格式转换&quot;">​</a></h2><p><strong>ArrayBuffer → blob</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">blob</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blob</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(buffer, byteOffset, length)]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">blob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(buffer, byteOffset, length)]);</span></span></code></pre></div><p><strong>ArrayBuffer → base64</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">base64</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">btoa</span><span style="color:#E1E4E8;">(String.fromCharCode.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(arrayBuffer)));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">base64</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">btoa</span><span style="color:#24292E;">(String.fromCharCode.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(arrayBuffer)));</span></span></code></pre></div><p><strong>base64 → blob</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">base64toBlob</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">base64Data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">contentType</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sliceSize</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">byteCharacters</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">atob</span><span style="color:#E1E4E8;">(base64Data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">byteArrays</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> offset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; offset </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> byteCharacters.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; offset </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> sliceSize) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> byteCharacters.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(offset, offset </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> sliceSize);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">byteNumbers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(slice.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> slice.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      byteNumbers[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slice.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">byteArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(byteNumbers);</span></span>
<span class="line"><span style="color:#E1E4E8;">    byteArrays.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(byteArray);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">blob</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blob</span><span style="color:#E1E4E8;">(byteArrays, {type: contentType});</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> blob;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">base64toBlob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">base64Data</span><span style="color:#24292E;">, </span><span style="color:#E36209;">contentType</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sliceSize</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">byteCharacters</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">atob</span><span style="color:#24292E;">(base64Data);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">byteArrays</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; offset </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> byteCharacters.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; offset </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> sliceSize) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">slice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> byteCharacters.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(offset, offset </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sliceSize);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">byteNumbers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(slice.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> slice.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      byteNumbers[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slice.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">byteArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(byteNumbers);</span></span>
<span class="line"><span style="color:#24292E;">    byteArrays.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(byteArray);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">blob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span><span style="color:#24292E;">(byteArrays, {type: contentType});</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> blob;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>blob → ArrayBuffer</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">blobToArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">blob</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      reader.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(reader.result);</span></span>
<span class="line"><span style="color:#E1E4E8;">      reader.</span><span style="color:#B392F0;">onerror</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> reject;</span></span>
<span class="line"><span style="color:#E1E4E8;">      reader.</span><span style="color:#B392F0;">readAsArrayBuffer</span><span style="color:#E1E4E8;">(blob);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">blobToArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">blob</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">reader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      reader.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(reader.result);</span></span>
<span class="line"><span style="color:#24292E;">      reader.</span><span style="color:#6F42C1;">onerror</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> reject;</span></span>
<span class="line"><span style="color:#24292E;">      reader.</span><span style="color:#6F42C1;">readAsArrayBuffer</span><span style="color:#24292E;">(blob);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>blob → base64</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">blobToBase64</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">blob</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    reader.</span><span style="color:#B392F0;">onloadend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(reader.result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    reader.</span><span style="color:#B392F0;">readAsDataURL</span><span style="color:#E1E4E8;">(blob);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">blobToBase64</span><span style="color:#24292E;">(</span><span style="color:#E36209;">blob</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">reader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    reader.</span><span style="color:#6F42C1;">onloadend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(reader.result);</span></span>
<span class="line"><span style="color:#24292E;">    reader.</span><span style="color:#6F42C1;">readAsDataURL</span><span style="color:#24292E;">(blob);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>blob → Object URL</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objectUrl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(blob);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objectUrl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createObjectURL</span><span style="color:#24292E;">(blob);</span></span></code></pre></div>`,126),r=[t];function c(y,E,i,d,F,u){return a(),n("div",null,r)}const B=s(e,[["render",c]]);export{b as __pageData,B as default};
