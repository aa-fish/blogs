import{_ as t,o as l,c as o,Q as e}from"./chunks/framework.5b0c684c.js";const x=JSON.parse('{"title":"svg基础图形","description":"","frontmatter":{},"headers":[],"relativePath":"3DVisualization/svg/index.md","filePath":"3DVisualization/svg/index.md","lastUpdated":1729031503000}'),s={name:"3DVisualization/svg/index.md"},a=e(`<h1 id="svg基础图形" tabindex="-1">svg基础图形 <a class="header-anchor" href="#svg基础图形" aria-label="Permalink to &quot;svg基础图形&quot;">​</a></h1><h2 id="几种使用方法" tabindex="-1">几种使用方法 <a class="header-anchor" href="#几种使用方法" aria-label="Permalink to &quot;几种使用方法&quot;">​</a></h2><ol><li>在浏览器直接打开</li><li>内嵌到 HTML 中（推荐⭐⭐⭐）</li><li>CSS 背景图（推荐⭐）</li><li>使用 img 标签引入（推荐⭐）</li><li>使用 iframe 标签引入（不推荐❌）</li><li>使用 embed 标签引入（不推荐❌）</li><li>使用 object 标签引入（不推荐❌）</li></ol><h2 id="svg重要属性" tabindex="-1">SVG重要属性 <a class="header-anchor" href="#svg重要属性" aria-label="Permalink to &quot;SVG重要属性&quot;">​</a></h2><ul><li>viewBox</li><li>preserveAspectRatio</li></ul><h2 id="基本绘制" tabindex="-1">基本绘制 <a class="header-anchor" href="#基本绘制" aria-label="Permalink to &quot;基本绘制&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">width</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;300&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">height</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;300&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">viewBox</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;0 0 2000 2000&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">circle</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cx</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;150&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cy</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;150&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;150&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">circle</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">svg</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">width</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;300&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">height</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;300&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">viewBox</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;0 0 2000 2000&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">circle</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cx</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;150&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cy</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;150&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">r</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;150&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">circle</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">svg</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="基本图形" tabindex="-1">基本图形 <a class="header-anchor" href="#基本图形" aria-label="Permalink to &quot;基本图形&quot;">​</a></h2><ul><li><p>圆</p><ul><li>语法：<code>&lt;circle cx=&quot;100&quot; cy=&quot;100&quot; r=&quot;100&quot; /&gt;</code></li><li>属性：cx、cy为圆的坐标，r为圆的半径</li></ul></li><li><p>椭圆</p><ul><li>语法：<code>&lt;ellipse cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;100&quot; ry=&quot;50&quot; /&gt;</code></li><li>属性：cx、cy为椭圆的坐标，rx、ry为椭圆半径</li></ul></li><li><p>矩形</p><ul><li>语法：<code>&lt;rect x=&quot;0&quot; y=&quot;0&quot; rx=&quot;5&quot; ry=&quot;5&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;</code></li><li>属性：x、y为矩形右上坐标，rx、ry矩形圆角，width、height矩形宽高</li></ul></li><li><p>线条</p><ul><li>语法：<code>&lt;line x1=&quot;50&quot; y1=&quot;50&quot; x2=&quot;100&quot; y2=&quot;100&quot; /&gt;</code></li><li>属性：x1、y1起始坐标，x2、y2结束坐标</li></ul></li><li><p>折线</p><ul><li>语法：<code>&lt;polyline points=&quot;0 0,20 20, 20 40, 40 60, 60 80&quot; style=&quot;fill:none; stroke: #000000;&quot; /&gt;</code></li><li>属性：points折线集合点，style（不设置看不到效果）</li></ul></li><li><p>多边形</p><ul><li>语法：<code>&lt;polygon points=&quot;0 0,20 20, 20 40, 40 60, 60 80&quot; style=&quot;fill:none; stroke: #000000;&quot; /&gt;</code></li><li>属性：points折线集合点，style（不设置看不到效果）</li></ul></li></ul><h3 id="path" tabindex="-1"><strong>path</strong> <a class="header-anchor" href="#path" aria-label="Permalink to &quot;**path**&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">注意：</p><p>所有命令中，大写为<strong>绝对定位</strong>，小写为<strong>相对定位(相对于前一个点)</strong>。</p></div><div class="tip custom-block"><p class="custom-block-title">直线命令</p><ol><li>M（Move to）: 移动虚拟画笔到指定的（x,y）坐标，仅移动不绘制,常用于起始点，用来指明画笔应该从何处开始绘制。 <ul><li>语法：M x y</li><li>参数：x、y为坐标</li></ul></li><li>L（Line to）: 绘制一点并且和之前的点（也就是L命令前面的点）连成一条直线。 <ul><li>语法：L x y</li><li>参数：x、y为坐标</li></ul></li><li>H（Horizontal Line to）: 可以从之前的点绘制一条水平的直线，H命令可以等价于y值和之前点相同的L命令。 <ul><li>语法：H x</li><li>参数：x 为坐标</li></ul></li><li>V（Vertical Line to）：可以从之前的点绘制一条垂直的直线，V命令可以等价于x值和之前点相同的L命令。 <ul><li>语法：V y</li><li>参数：y 为坐标</li></ul></li></ol></div><div class="tip custom-block"><p class="custom-block-title">曲线命令</p><ol><li>Q（Quadratic Bezier Curve to）：来绘制一条二次贝塞尔曲线，二次贝塞尔曲线需要一个控制点，用来确定起点和终点的曲线斜率。 <ul><li>语法：Q x1 y1, x y</li><li>参数：x、y为终点位置，x1、y1为控制点</li></ul></li><li>T（Smooth Quadratic Bezier Curve to）：是一个延长二次贝塞尔曲线命令，T命令可以<strong>通过前一个控制点推断出后一个控制点</strong>。 <ul><li>语法：T x y 或者 t x y</li><li>参数：x、y为终点位置</li></ul></li><li>C（Curve to）：用来绘制一条三次贝塞尔曲线，相对于二次贝塞尔曲线多了一个控制点。 <ul><li>C x1 y1, x2 y2, x y</li><li>x、y为终点位置，x1、y1为曲线起始点的控制点，x2、y2为曲线终止的控制点</li></ul></li><li>S（Smooth Curve to）：三次贝塞尔曲线的S命令和二次贝塞尔曲线的T命令比较相似。 <ul><li>语法：S x2 y2, x y</li><li>参数：x、y为终点位置，x2、y2为曲线终止的控制点。</li></ul></li><li>A（Elliptical Arc）：用于画弧形，它可以截取圆或椭圆的弧形成的曲线 <ul><li>语法：A rx ry x-axis-rotation large-arc-flag sweep-flag x y</li><li>参数： <ul><li>rx、ry分别为X轴的半径和Y轴的半径</li><li>x-axis-rotation为弧度在X轴的旋转角度</li><li>large-arc-flag决定弧线是大于还是小于180度，0表示小角度弧，1表示大角度弧</li><li>sweep-flag为弧的方向，0表示从起点到终点沿逆时针画弧，1表示从起点到终点沿顺时针画弧</li><li>x、y为弧形的终点</li></ul></li></ul></li></ol></div><div class="tip custom-block"><p class="custom-block-title">结束命令</p><ol><li>Z（Close path）：Z命令是一个闭合命令，他会从当前点画一条直线到路径的起始点。不区分大小写。 <ul><li>无线参数（所以不区分大小写）</li></ul></li></ol></div><h2 id="分组" tabindex="-1">分组 <a class="header-anchor" href="#分组" aria-label="Permalink to &quot;分组&quot;">​</a></h2><p><strong><code>&lt;g&gt;</code></strong></p><ol><li>将所有子元素作为一个组合，通常还有一个唯一的id作为名称;</li><li>每个组合还可以拥有自己的<code>&lt;title&gt;</code>和<code>&lt;desc&gt;</code>来供基于文本的xml应用程序识别或者为视障用户提供更好的可访问性;</li><li>阅读器会读取<code>&lt;title&gt;</code>和<code>&lt;desc&gt;</code>元素的内容。鼠标悬停或者轻触组合内的图形时，会显示<code>&lt;title&gt;</code>元素内容的提示框;</li><li>可以组合元素并可以提供一些注释，组合还可以比较嵌套;</li></ol><p><strong><code>&lt;use&gt;</code></strong></p><ol><li>复杂的图形中经常会出现重复元素，svg 使用<code>&lt;use&gt;</code>元素为定义在<code>&lt;g&gt;</code>元素内的组合或者任意独立图形元素提供了类似复杂黏贴的能力;</li><li>定义了一组<code>&lt;g&gt;</code>图形对象后，使用<code>&lt;use&gt;</code>标签再次显示它们。要指定想要的重用的组合就给xlink:href属性指定URI即可，同时还要指定x和y的位置以表示组合应该移动到的位置;</li><li><code>&lt;use&gt;</code>元素并不限制只使用在同一个文件内的对象，还可以指定任意有效的文件或者URI;</li></ol><p><strong><code>&lt;defs&gt;</code></strong></p><ol><li>SVG规范推荐我们将所有想要复用的对象放置在元素内，这样SVG阅读器进入流式环境中就能更轻松地处理数据;</li><li>由于组合在<code>&lt;defs&gt;</code>元素内，它们不会立刻绘制到屏幕上，而是作为&quot;模板&quot;供其他地方使用。</li></ol><p><strong><code>&lt;symbol&gt;</code></strong></p><ul><li>作为模板，同<code>&lt;defs&gt;</code>一样，内部的所有元素都不会展现在画布上，因此咱们无需把它放在 规范内。然而，咱们还是习惯将它放到 <code>&lt;defs&gt;</code>中，因为 symbol 也是咱们定义的供后续使用的元素。</li></ul><p><strong><code>&lt;image&gt;</code></strong></p><ul><li>顾名思义里面放图片的，至于说是矢量图(vector)还是位图(raster)，都成，用起来也方便：</li></ul><div class="tip custom-block"><p class="custom-block-title">总结</p><ul><li>使用 <code>&lt;g&gt;</code> 来组合形状。</li><li>对于需要有额外特性的组合使用 <code>&lt;symbol&gt;</code></li><li>使用 <code>&lt;defs&gt;</code> 元素定义组合和模板。</li><li>使用 <code>&lt;use&gt;</code> 元素来放置你定义的组合和模板。</li></ul></div><h2 id="style属性" tabindex="-1"><strong>style属性</strong> <a class="header-anchor" href="#style属性" aria-label="Permalink to &quot;**style属性**&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><em>fill</em></td><td style="text-align:left;">图形内部使用哪种颜色进行填充，如果未指定，则会使用<strong>黑色</strong>填充，也可以指定为 none，即不填充图形内部，保持透明</td></tr><tr><td style="text-align:left;"><em>fill-opacity</em></td><td style="text-align:left;">定义填充颜色透明度（合法的范围是：0 - 1）</td></tr><tr><td style="text-align:left;"><em>stroke</em></td><td style="text-align:left;">定义图形边框的颜色</td></tr><tr><td style="text-align:left;"><em>stroke-width</em></td><td style="text-align:left;">定义图形边框的宽度</td></tr><tr><td style="text-align:left;"><em>stroke-opacity</em></td><td style="text-align:left;">定义轮廓颜色的透明度（合法的范围是：0 - 1）</td></tr><tr><td style="text-align:left;"><em>stroke-linecap</em></td><td style="text-align:left;">定义轮廓终点的形状：butt（默认值）、round（由stroke-width大小控制）、square（多出一段由stroke-width大小控制的长度）</td></tr><tr><td style="text-align:left;"><em>stroke-linejoin</em></td><td style="text-align:left;">定义了轮廓连接处的样式：miter（默认值）、round（用圆角连接，实现平滑效果）、bevel：连接处会形成一个斜面</td></tr><tr><td style="text-align:left;"><em>stroke-dasharray</em></td><td style="text-align:left;">定义轮廓为虚线</td></tr><tr><td style="text-align:left;"><em>stroke-dashoffset</em></td><td style="text-align:left;">定义轮廓为虚线路径开始的距离。值可为正值、负值、百分比。</td></tr><tr><td style="text-align:left;"><em>stroke-miterlimit</em></td><td style="text-align:left;">定义轮廓两条线交汇在一起形成一个尖角</td></tr><tr><td style="text-align:left;"><em>shape-rendering</em></td><td style="text-align:left;">geometricPrecision/定义轮开启关闭（crispEdges）反锯齿功能</td></tr><tr><td style="text-align:left;"><em>opacity</em></td><td style="text-align:left;">定义元素的透明值（合法的范围是：0 - 1）</td></tr></tbody></table><p><strong>注意：形状元素、文本内容元素 对<code>fill-rules</code>属性的使用</strong></p><p>fill-rule属性用来设置复杂形状的填充规则。它有两种填充方式：nonzero 和 evenodd。 该属性简单说就是判断某点属于该形状的“内部”还是“外部”</p><h2 id="文字" tabindex="-1">文字 <a class="header-anchor" href="#文字" aria-label="Permalink to &quot;文字&quot;">​</a></h2><p><code>&lt;text&gt;&lt;/text&gt;</code></p><ul><li>x、y： x和y属性决定了文字的绘制起点;</li><li>dx、yx：dx和dy属性与x和y属性不同的是，x和y属性是绝对的坐标，而dx和dy属性是相对于当前位置的偏移量;</li><li>rotate：可以把文字旋转一个角度;</li><li>textLength：定了一个字符串的计算长度;</li><li>lengthAdjust：spacing(只拉伸或压缩间距（文字不变形）)、spacingAndGlyphs(同时拉伸或压缩间距和文字本身（文字变形）);</li><li>fill、stroke：填充和轮廓也都可以应用于文字;</li><li>CSS文字属性：同样也可以应用于SVG（font-weight、font-size、font-family、font-style、font-variant、font-stretch、font-size-adjust、kerning、letter-spacing、word-spacing、text-decoration ... ）;</li></ul><p><code>&lt;tspan&gt;&lt;/tspan&gt;</code></p><ul><li>tspan标签和text标签一样都可以用来添加文字，的text标签的属性在tspan标签中也适用，属于行类元素;</li><li>tspan标签必须是一个text元素的子元素或别的子元素tspan的子元素;</li><li>需要注意的是tspan标签的x、y和 dx、dy 会对标签后面的内容造成影响;</li></ul><p><code>&lt;textPath&gt;&lt;/textPath&gt;</code></p><ul><li>可以利用它的xlink:href属性取得一个任意路径，并且可以让字符顺着路径渲染;</li></ul><h2 id="渐变" tabindex="-1">渐变 <a class="header-anchor" href="#渐变" aria-label="Permalink to &quot;渐变&quot;">​</a></h2><p><strong><code>&lt;stop&gt;&lt;/stop&gt;</code>标签用来定义渐变的颜色坡度，具有三个属性：</strong></p><ul><li>offset：定义渐变开始和结束的位置;</li><li>stop-color：（定义颜色）;</li><li>stop-opacity：（定义透明度）;</li></ul><p><strong>线性渐变</strong></p><ul><li>语法：<code>&lt;linearGradient x1=&quot;&quot; y1=&quot;&quot; x2=&quot;&quot; y2=&quot;&quot;&gt;&lt;/linearGradient&gt;</code></li><li>属性：x1、y1定义线性渐变的起点， x2、y2定义渐变的终点;</li></ul><p><strong>径向渐变</strong></p><ul><li>语法：<code>&lt;radialGradient cx=&quot;&quot; cy=&quot;&quot; r=&quot;&quot; fx=&quot;&quot; fy=&quot;&quot;&gt;&lt;/radialGradient&gt;</code></li><li>属性： cx、cy、r分别为圆的坐标和半径，也就是渐变的范围，fx、fy定义渐变的中心点，也叫渐变的焦点。</li></ul><h2 id="裁剪和蒙层" tabindex="-1">裁剪和蒙层 <a class="header-anchor" href="#裁剪和蒙层" aria-label="Permalink to &quot;裁剪和蒙层&quot;">​</a></h2><p><strong>裁剪</strong><code>&lt;clipPath id=&quot;clipPath&quot;&gt;&lt;path d=&quot;&quot;&gt;&lt;/path&gt;&lt;/clipPath&gt;</code> ---&gt; &quot;clip-path=&quot;url(#clipPath)&quot;</p><p><strong>蒙层</strong><code>&lt;mark id=&quot;clipPath&quot;&gt;&lt;path d=&quot;&quot;&gt;&lt;/path&gt;&lt;/mark&gt;</code> ---&gt; &quot;mask=&quot;url(#Mask)&quot;</p><h2 id="动画" tabindex="-1">动画 <a class="header-anchor" href="#动画" aria-label="Permalink to &quot;动画&quot;">​</a></h2>`,48),i=[a];function n(r,c,p,d,u,y){return l(),o("div",null,i)}const h=t(s,[["render",n]]);export{x as __pageData,h as default};
