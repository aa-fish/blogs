import{_ as t,C as p,o as c,c as r,k as s,a,H as n,Q as l}from"./chunks/framework.5b0c684c.js";const T=JSON.parse('{"title":"Object","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/1-6.md","filePath":"web-core/base/1-6.md","lastUpdated":1729031503000}'),y={name:"web-core/base/1-6.md"},E=l(`<h1 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h1><h2 id="object描述" tabindex="-1">Object描述 <a class="header-anchor" href="#object描述" aria-label="Permalink to &quot;Object描述&quot;">​</a></h2><ul><li>Object 是 JavaScript 的一种数据类型。它用于存储各种键值集合和更复杂的实体。可以通过 Object() 构造函数或者使用对象字面量的方式创建对象。</li><li>在 JavaScript 中，几乎所有的对象都是 Object 的实例；一个典型的对象从 Object.prototype 继承属性（包括方法），尽管这些属性可能被覆盖（或重写）。</li><li>唯一不从 Object.prototype 继承的对象是那些 null 原型对象，或者是从其他 null 原型对象继承而来的对象。</li></ul><p>通过原型链，所有对象都能观察到 Object.prototype 对象的改变，除非这些改变所涉及的属性和方法沿着原型链被进一步重写。尽管有潜在的危险，但这为覆盖或扩展对象的行为提供了一个非常强大的机制。为了使其更加安全，Object.prototype 是核心 JavaScript 语言中唯一具有不可变原型的对象——Object.prototype 的原型始终为 null 且不可更改。</p><h2 id="null-原型对象" tabindex="-1">null 原型对象 <a class="header-anchor" href="#null-原型对象" aria-label="Permalink to &quot;null 原型对象&quot;">​</a></h2><p>几乎所有的 JavaScript 对象最终都继承自 Object.prototype。通过一下方法将原型更改为null:</p><ul><li>创建<code>Object.create(null)</code>对象；</li><li>设置<code>__proto__: null</code>；</li><li>调用<code>Object.setPrototypeOf(obj, null)</code>方法；</li></ul><details class="details custom-block"><summary>null 原型对象拓展</summary><p>null 原型对象可能会有一些预期外的行为表现，因为它不会从 Object.prototype 继承任何对象方法。</p><p>这在调试时尤其需要注意，因为常见的对象属性转换/检测实用方法可能会产生错误或丢失信息。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">normalObj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}; </span><span style="color:#6A737D;">// 创建一个普通对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullObj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 创建一个 &quot;null&quot; 原型对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`normalObj 是：\${</span><span style="color:#E1E4E8;">normalObj</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 显示 &quot;normalObj 是：[object Object]&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`nullObj 是：\${</span><span style="color:#E1E4E8;">nullObj</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 抛出错误：Cannot convert object to primitive value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(normalObj); </span><span style="color:#6A737D;">// 显示 [object Object]</span></span>
<span class="line"><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(nullObj); </span><span style="color:#6A737D;">// 抛出错误：Cannot convert object to primitive value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">normalObj.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 显示 {}</span></span>
<span class="line"><span style="color:#E1E4E8;">nullObj.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// nullObj.valueOf is not a function</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">normalObj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}; </span><span style="color:#6A737D;">// 创建一个普通对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullObj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 创建一个 &quot;null&quot; 原型对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`normalObj 是：\${</span><span style="color:#24292E;">normalObj</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 显示 &quot;normalObj 是：[object Object]&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`nullObj 是：\${</span><span style="color:#24292E;">nullObj</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 抛出错误：Cannot convert object to primitive value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(normalObj); </span><span style="color:#6A737D;">// 显示 [object Object]</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(nullObj); </span><span style="color:#6A737D;">// 抛出错误：Cannot convert object to primitive value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">normalObj.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 显示 {}</span></span>
<span class="line"><span style="color:#24292E;">nullObj.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// nullObj.valueOf is not a function</span></span></code></pre></div><p>我们可以通过为 null 原型对象分配属性的方式将 toString 方法添加回去：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">nullObj.valueOf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.valueOf; </span></span>
<span class="line"><span style="color:#E1E4E8;">nullObj.valueOf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString; </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(nullObj.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 显示 &quot;[object Object]&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">nullObj.valueOf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.valueOf; </span></span>
<span class="line"><span style="color:#24292E;">nullObj.valueOf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString; </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(nullObj.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 显示 &quot;[object Object]&quot;</span></span></code></pre></div><hr><p>在实践中，null 原型对象通常被用作 map 的简单替代品。由于存在 Object.prototype 属性，会导致一些错误：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { alice: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">, bob: </span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasPerson</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> ages;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ages[name];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">hasPerson</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hasOwnProperty&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true  因为hasPerson的原型链上有hasOwnProperty属性</span></span>
<span class="line"><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;toString&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// [Function: toString]  因为getAge的原型链上有toString方法</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { alice: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">, bob: </span><span style="color:#005CC5;">27</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasPerson</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> ages;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ages[name];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">hasPerson</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hasOwnProperty&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true  因为hasPerson的原型链上有hasOwnProperty属性</span></span>
<span class="line"><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;toString&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [Function: toString]  因为getAge的原型链上有toString方法</span></span></code></pre></div><p>使用一个 null 原型对象可以消除这种风险，同时不会令 hasPerson 和 getAge 函数变得复杂：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  alice: { value: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">, enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  bob: { value: </span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;">, enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">hasPerson</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hasOwnProperty&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;toString&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  alice: { value: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">, enumerable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  bob: { value: </span><span style="color:#005CC5;">27</span><span style="color:#24292E;">, enumerable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">hasPerson</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hasOwnProperty&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;toString&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// undefined</span></span></code></pre></div><hr><p>JavaScript 还具有内置的 API，用于生成 null 原型对象，特别是那些将对象用作临时键值对集合的 API。例如：</p><ol><li>Object.groupBy() 方法的返回值；</li><li>RegExp.prototype.exec() 方法返回结果中的 groups 和 indices.groups 属性；</li><li>Array.prototype[Symbol.unscopables] 属性（所有 [Symbol.unscopables] 对象原型都应该为 null）；</li><li>通过 import * as ns from &quot;module&quot; 或 import() 获取的模块命名空间对象；</li></ol><p><code>null 原型对象</code>这个术语通常也包括其原型链中没有 Object.prototype 的任何对象。当使用类时，可以通过 extends null 来创建这样的对象。</p></details><h2 id="对象强制转换" tabindex="-1">对象强制转换 <a class="header-anchor" href="#对象强制转换" aria-label="Permalink to &quot;对象强制转换&quot;">​</a></h2><h2 id="内置操作过程" tabindex="-1">内置操作过程 <a class="header-anchor" href="#内置操作过程" aria-label="Permalink to &quot;内置操作过程&quot;">​</a></h2><ul><li>对象则按原样返回。</li><li>Number、String、Boolean、Symbol、BigInt 等基本类型被封装成其对应的基本类型对象。</li><li>undefined 和 null 则抛出 TypeError。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>JavaScript 中实现相同效果的最佳方式是使用 Object() 构造函数</strong>。对于 undefined 或 null，它会返回一个普通对象而不是抛出 TypeError 异常。</p></div><div class="info custom-block"><p class="custom-block-title">使用对象强制转换的地方包括：</p><ol><li>for...in 循环的 object 参数。</li><li>Array 方法的 this 值。</li><li>Object 方法的参数，如 Object.keys()。</li><li>当访问基本类型的属性时进行自动转换，因为基本类型没有属性。</li><li>在调用非严格函数时的 this 值。基本类型值被封装为对象，而 null 和 undefined 被替换为全局对象。</li></ol><p><code>与转换为基本类型不同</code>，<code>对象强制转换</code>过程本身无法以任何方式被观察到，因为它不会调用像 toString 或 valueOf 方法这样的自定义代码。</p></div><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(value)</span></span>
<span class="line"><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(value)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(value)</span></span>
<span class="line"><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(value)</span></span></code></pre></div><p>当调用或者构造 Object() 构造函数本身时，其返回值是一个对象：</p><ol><li>如果该值是 null 或者 undefined，它会生成并返回一个空对象。</li><li>如果该值已经是一个对象，则返回该值。</li><li>否则，它将返回与<code>给定值对应的类型的对象</code>。</li></ol><p>当通过继承 Object 的类的构造函数中的 super() 隐式调用 Object() 时，它以 new.target.prototype 为原型初始化一个新对象。传递给 super() 的任意值都将被忽略——例如，即使你传递一个数字，构造函数中的 this 值也不会变成 Number 实例。</p><h2 id="数据描述符-和-访问器描述符" tabindex="-1">数据描述符 和 访问器描述符 <a class="header-anchor" href="#数据描述符-和-访问器描述符" aria-label="Permalink to &quot;数据描述符 和 访问器描述符&quot;">​</a></h2><h2 id="访问器描述符" tabindex="-1">访问器描述符 <a class="header-anchor" href="#访问器描述符" aria-label="Permalink to &quot;访问器描述符&quot;">​</a></h2><ul><li>configurable: 此属性描述符的类型可以更改并且属性可以从相应的对象中删除，则为 true。默认为 false。</li><li>enumerable：此属性在枚举相应对象的属性时应显示出来，则为 true。默认为 false。</li><li>get：作为该属性的 getter 函数，如果没有 getter 则为 undefined。函数返回值将被用作属性的值。默认为 undefined。</li><li>set：作为该属性的 setter 函数，如果没有 setter 则为 undefined。该函数将只接收一个参数，即被分配给属性的新值。默认为 undefined。</li></ul><h2 id="数据描述符" tabindex="-1">数据描述符 <a class="header-anchor" href="#数据描述符" aria-label="Permalink to &quot;数据描述符&quot;">​</a></h2><ul><li>value：与属性关联的值。可以是任何有效的 JavaScript 值（数字、对象、函数等）。默认为 undefined。</li><li>writable：如果与属性关联的值可以使用赋值运算符更改，则为 true。默认为 false。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>同时设置 [value 或 writable] 和 [get 或 set] 键，则会抛出异常。</p></div><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><h2 id="object-create" tabindex="-1">Object.create() <a class="header-anchor" href="#object-create" aria-label="Permalink to &quot;Object.create()&quot;">​</a></h2><ul><li><strong>描述</strong>：Object.create() 静态方法以一个现有对象作为原型，创建一个新对象。</li></ul><h2 id="object-is" tabindex="-1">Object.is() <a class="header-anchor" href="#object-is" aria-label="Permalink to &quot;Object.is()&quot;">​</a></h2><ul><li><strong>描述</strong>：判定两个值是否为相同值。Object.is() 不会对其操作数进行类型转换。</li></ul><div class="info custom-block"><p class="custom-block-title">如果以下其中一项成立，则两个值相同,</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">(value1, value2)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">is</span><span style="color:#24292E;">(value1, value2)</span></span></code></pre></div><ol><li>都是 undefined</li><li>都是 null</li><li>都是 true 或者都是 false</li><li>都是长度相同、字符相同、顺序相同的字符串</li><li>都是相同的对象（意味着两个值都引用了内存中的同一对象）</li><li>都是 BigInt 且具有相同的数值</li><li>都是 symbol 且引用相同的 symbol 值</li><li>都是数字（且都是 +0，都是 -0，都是 NaN，都有相同的值，非零且都不是 NaN）</li></ol><hr><p><code>Object.is() 与 == </code></p><p>Object.is() 与 == 运算符并不等价。== 运算符在测试相等性之前，会对两个操作数进行类型转换（如果它们不是相同的类型），这可能会导致一些非预期的行为，例如 &quot;&quot; == false 的结果是 true，但是 Object.is() 不会对其操作数进行类型转换。</p><hr><p><code>Object.is() 与 ===</code></p><p>Object.is() 也不等价于 === 运算符。Object.is() 和 === 之间的唯一区别在于它们处理带符号的 0 和 NaN 值的时候。=== 运算符（和 == 运算符）将数值 -0 和 +0 视为相等，但是会将 NaN 视为彼此不相等。</p></div><h2 id="object-hasown" tabindex="-1">Object.hasOwn() <a class="header-anchor" href="#object-hasown" aria-label="Permalink to &quot;Object.hasOwn()&quot;">​</a></h2><ul><li><strong>描述</strong>：如果指定的对象自身有指定的属性，则静态方法 Object.hasOwn() 返回 true。如果属性是继承的或者不存在，该方法返回 false。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li>Object.hasOwn() 旨在取代 Object.prototype.hasOwnProperty()。</li></ol><hr><ol start="2"><li>只判定<code>对象的直接属性</code>,它不像 in 运算符，这个方法不检查对象的原型链中的指定属性。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">hasOwn</span><span style="color:#E1E4E8;">(obj,</span><span style="color:#9ECBFF;">&#39;valueOf&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;valueOf&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> obj </span><span style="color:#6A737D;">// true  去原型链上查找了</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">hasOwn</span><span style="color:#24292E;">(obj,</span><span style="color:#032F62;">&#39;valueOf&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#032F62;">&#39;valueOf&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj </span><span style="color:#6A737D;">// true  去原型链上查找了</span></span></code></pre></div></div><h2 id="object-assign" tabindex="-1">Object.assign() <a class="header-anchor" href="#object-assign" aria-label="Permalink to &quot;Object.assign()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法只会拷贝源对象可枚举的的自有属性到目标对象。该方法在源对象上使用 [Get]，在目标对象上使用 [Set]，因此它会调用 getter 和 setter。（对象合并）</li></ul><h2 id="object-entries" tabindex="-1">Object.entries() <a class="header-anchor" href="#object-entries" aria-label="Permalink to &quot;Object.entries()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个数组，包含给定对象自有的可枚举字符串键属性的键值对。</li></ul><h2 id="object-values" tabindex="-1">Object.values() <a class="header-anchor" href="#object-values" aria-label="Permalink to &quot;Object.values()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个给定对象的自有可枚举字符串键属性值组成的数组。</li></ul><h2 id="object-keys" tabindex="-1">Object.keys() <a class="header-anchor" href="#object-keys" aria-label="Permalink to &quot;Object.keys()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个由给定对象自身的可枚举的字符串键属性名组成的数组。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, c: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">(obj) </span><span style="color:#6A737D;">// [ [&#39;a&#39;, 1], [&#39;b&#39;, 2], [&#39;c&#39;, 3]</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">(obj)  </span><span style="color:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(obj)    </span><span style="color:#6A737D;">// [a, b, c]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, c: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">(obj) </span><span style="color:#6A737D;">// [ [&#39;a&#39;, 1], [&#39;b&#39;, 2], [&#39;c&#39;, 3]</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(obj)  </span><span style="color:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(obj)    </span><span style="color:#6A737D;">// [a, b, c]</span></span></code></pre></div><h2 id="object-fromentries" tabindex="-1">Object.fromEntries() <a class="header-anchor" href="#object-fromentries" aria-label="Permalink to &quot;Object.fromEntries()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法将键值对列表转换为一个对象。</li></ul><details class="details custom-block"><summary>示例</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 数组</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">fromEntries</span><span style="color:#E1E4E8;">(arr); </span><span style="color:#6A737D;">//  { 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">object1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, c: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> }; </span><span style="color:#6A737D;">// 计算为 { a: 2, b: 4, c: 6 }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">object2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">fromEntries</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">(object1).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(([</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [key, val </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 数组</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">fromEntries</span><span style="color:#24292E;">(arr); </span><span style="color:#6A737D;">//  { 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">object1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, c: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> }; </span><span style="color:#6A737D;">// 计算为 { a: 2, b: 4, c: 6 }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">object2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">fromEntries</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">(object1).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(([</span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">val</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [key, val </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div></details><h2 id="object-freeze" tabindex="-1">Object.freeze() <a class="header-anchor" href="#object-freeze" aria-label="Permalink to &quot;Object.freeze()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法可以使一个对象被冻结。当于阻止其扩展然后将所有现有属性的描述符的 configurable 特性更改为 false——对于数据属性，将同时把 writable 特性更改为 false。</li></ul><details class="details custom-block"><summary>示例</summary><ol><li>尝试冻结带有元素的 <code>TypedArray</code> 或 <code>DataView</code>；</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">freeze</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 没有元素</span></span>
<span class="line"><span style="color:#6A737D;">// Uint8Array []</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">freeze</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 有元素</span></span>
<span class="line"><span style="color:#6A737D;">// TypeError: Cannot freeze array buffer views with elements</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">freeze</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">))); </span><span style="color:#6A737D;">// 没有元素</span></span>
<span class="line"><span style="color:#6A737D;">// DataView {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">freeze</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 没有元素</span></span>
<span class="line"><span style="color:#6A737D;">// Uint8Array []</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">freeze</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 有元素</span></span>
<span class="line"><span style="color:#6A737D;">// TypeError: Cannot freeze array buffer views with elements</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">freeze</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">))); </span><span style="color:#6A737D;">// 没有元素</span></span>
<span class="line"><span style="color:#6A737D;">// DataView {}</span></span></code></pre></div><hr><ol start="2"><li>冻结对象或数组，不能被修改，严格模式将抛出 TypeError；</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {B: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">freeze</span><span style="color:#E1E4E8;">(a);</span><span style="color:#6A737D;">// a 数组无法被修改</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">freeze</span><span style="color:#E1E4E8;">(b);</span><span style="color:#6A737D;">// a 对象无法被修改</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {B: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">freeze</span><span style="color:#24292E;">(a);</span><span style="color:#6A737D;">// a 数组无法被修改</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">freeze</span><span style="color:#24292E;">(b);</span><span style="color:#6A737D;">// a 对象无法被修改</span></span></code></pre></div><hr><ol start="3"><li>“浅冻结”：调用 Object.freeze(object) 的结果仅适用于 object 本身的直接属性，</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  b: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">freeze</span><span style="color:#E1E4E8;">(a); </span><span style="color:#6A737D;">// 这里冻结的是 a 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">a.b.c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;aValue&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// c 不是a的直接属性，可以被修改</span></span>
<span class="line"><span style="color:#E1E4E8;">a.b.c; </span><span style="color:#6A737D;">// &#39;aValue&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  b: {},</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">freeze</span><span style="color:#24292E;">(a); </span><span style="color:#6A737D;">// 这里冻结的是 a 对象</span></span>
<span class="line"><span style="color:#24292E;">a.b.c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;aValue&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// c 不是a的直接属性，可以被修改</span></span>
<span class="line"><span style="color:#24292E;">a.b.c; </span><span style="color:#6A737D;">// &#39;aValue&#39;</span></span></code></pre></div></details><h2 id="object-isfrozen" tabindex="-1">Object.isFrozen() <a class="header-anchor" href="#object-isfrozen" aria-label="Permalink to &quot;Object.isFrozen()&quot;">​</a></h2><ul><li><strong>描述</strong>：判断一个对象是否被冻结。</li></ul><h2 id="object-preventextensions" tabindex="-1">Object.preventExtensions() <a class="header-anchor" href="#object-preventextensions" aria-label="Permalink to &quot;Object.preventExtensions()&quot;">​</a></h2><ul><li><strong>描述</strong>： <ol><li>防止新属性被添加到对象中（即防止该对象被扩展）。它还可以防止对象的原型被重新指定。</li><li>与 Object.seal() 和 Object.freeze() 不同，Object.preventExtensions() 调用了内在的 JavaScript 行为，不能用几个其他操作的组合替代。</li><li>它还有它的 Reflect 对应方法（仅存在于内部操作中）。</li><li>该方法使得目标对象的 [Prototype] 不可变；任何重新赋值 [Prototype] 操作都会抛出 TypeError 。</li><li>Object.preventExtensions() 只能防止添加自有属性。但其对象类型的原型依然可以添加新的属性。</li></ol></li></ul><h2 id="object-isextensible" tabindex="-1">Object.isExtensible() <a class="header-anchor" href="#object-isextensible" aria-label="Permalink to &quot;Object.isExtensible()&quot;">​</a></h2><ul><li><strong>描述</strong>：判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。</li></ul><h2 id="object-seal" tabindex="-1">Object.seal() <a class="header-anchor" href="#object-seal" aria-label="Permalink to &quot;Object.seal()&quot;">​</a></h2><ul><li><strong>描述</strong>： <ol><li>方法密封一个对象。密封一个对象会阻止其扩展并且使得现有属性不可配置。</li><li>不能添加新属性、不能删除现有属性或更改其可枚举性和可配置性、不能重新分配其原型。但它不会防止数据属性的值被更改。</li><li>不同于 Object.freeze() 的是，通过 Object.seal() 密封的对象可以更改其现有属性，只要它们是可写的。</li></ol></li></ul><h2 id="object-issealed" tabindex="-1">Object.isSealed() <a class="header-anchor" href="#object-issealed" aria-label="Permalink to &quot;Object.isSealed()&quot;">​</a></h2><ul><li><strong>描述</strong>：法判断一个对象是否被密封。</li></ul><h2 id="object-defineproperties" tabindex="-1">Object.defineProperties() <a class="header-anchor" href="#object-defineproperties" aria-label="Permalink to &quot;Object.defineProperties()&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperties</span><span style="color:#E1E4E8;">(obj, props)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperties</span><span style="color:#24292E;">(obj, props)</span></span></code></pre></div><ul><li><strong>描述</strong>：方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。</li></ul><details class="details custom-block"><summary>示例</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperties</span><span style="color:#E1E4E8;">(obj, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  property1: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    writable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  property2: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value: </span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    writable: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperties</span><span style="color:#24292E;">(obj, {</span></span>
<span class="line"><span style="color:#24292E;">  property1: {</span></span>
<span class="line"><span style="color:#24292E;">    value: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    writable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  property2: {</span></span>
<span class="line"><span style="color:#24292E;">    value: </span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    writable: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div></details><h2 id="object-defineproperty" tabindex="-1">Object.defineProperty() <a class="header-anchor" href="#object-defineproperty" aria-label="Permalink to &quot;Object.defineProperty()&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(obj, prop, descriptor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(obj, prop, descriptor)</span></span></code></pre></div><ul><li><strong>描述</strong>：方法会直接在一个对象上定义一个新属性，或修改其现有属性，并返回此对象。</li></ul><details class="details custom-block"><summary>示例</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">o</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}; </span><span style="color:#6A737D;">// 创建一个新对象</span></span>
<span class="line"><span style="color:#6A737D;">// 通过 defineProperty 使用数据描述符添加对象属性的示例</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(o, </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  value: </span><span style="color:#79B8FF;">37</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  writable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  configurable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;a&#39; 属性存在于对象 o 中，其值为 37</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">38</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(o, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    bValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  configurable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">o</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}; </span><span style="color:#6A737D;">// 创建一个新对象</span></span>
<span class="line"><span style="color:#6A737D;">// 通过 defineProperty 使用数据描述符添加对象属性的示例</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(o, </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  value: </span><span style="color:#005CC5;">37</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  writable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  enumerable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  configurable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;a&#39; 属性存在于对象 o 中，其值为 37</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">38</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(o, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bValue;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    bValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newValue;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  enumerable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  configurable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div></details>`,66),i={id:"object-setprototypeof",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#object-setprototypeof","aria-label":`Permalink to "Object.setPrototypeOf()<Badge text="不推荐" type='danger'/>"`},"​",-1),b=l(`<ul><li><strong>描述</strong>：方法可以将一个指定对象的原型（即内部的 [Prototype] 属性）设置为另一个对象或者 null。（存在性能问题）</li></ul><h2 id="object-getownpropertydescriptor" tabindex="-1">Object.getOwnPropertyDescriptor() <a class="header-anchor" href="#object-getownpropertydescriptor" aria-label="Permalink to &quot;Object.getOwnPropertyDescriptor()&quot;">​</a></h2><ul><li><strong>描述</strong>： <ol><li>返回一个对象，该对象描述给定对象上特定属性（即直接存在于对象上而不在对象的原型链中的属性）的配置。</li><li>返回的对象是可变的，但对其进行更改不会影响原始属性的配置。</li><li>如果指定的属性存在于对象上，则返回其属性描述符，否则返回 undefined。</li></ol></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { bar: </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">getOwnPropertyDescriptor</span><span style="color:#E1E4E8;">(a, </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(b);</span></span>
<span class="line"><span style="color:#6A737D;">// {</span></span>
<span class="line"><span style="color:#6A737D;">//   configurable: true,</span></span>
<span class="line"><span style="color:#6A737D;">//   enumerable: true,</span></span>
<span class="line"><span style="color:#6A737D;">//   value: 42,</span></span>
<span class="line"><span style="color:#6A737D;">//   writable: true</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { bar: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">getOwnPropertyDescriptor</span><span style="color:#24292E;">(a, </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#6A737D;">// {</span></span>
<span class="line"><span style="color:#6A737D;">//   configurable: true,</span></span>
<span class="line"><span style="color:#6A737D;">//   enumerable: true,</span></span>
<span class="line"><span style="color:#6A737D;">//   value: 42,</span></span>
<span class="line"><span style="color:#6A737D;">//   writable: true</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span></code></pre></div><h2 id="object-getownpropertydescriptors" tabindex="-1">Object.getOwnPropertyDescriptors() <a class="header-anchor" href="#object-getownpropertydescriptors" aria-label="Permalink to &quot;Object.getOwnPropertyDescriptors()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回给定对象的所有自有属性描述符。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">getOwnPropertyDescriptors</span><span style="color:#E1E4E8;">(obj)</span></span>
<span class="line"><span style="color:#6A737D;">// a: {value: 1, writable: true, enumerable: true, configurable: true}</span></span>
<span class="line"><span style="color:#6A737D;">// b: {value: 2, writable: true, enumerable: true, configurable: true}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">getOwnPropertyDescriptors</span><span style="color:#24292E;">(obj)</span></span>
<span class="line"><span style="color:#6A737D;">// a: {value: 1, writable: true, enumerable: true, configurable: true}</span></span>
<span class="line"><span style="color:#6A737D;">// b: {value: 2, writable: true, enumerable: true, configurable: true}</span></span></code></pre></div><h2 id="object-getownpropertynames" tabindex="-1">Object.getOwnPropertyNames() <a class="header-anchor" href="#object-getownpropertynames" aria-label="Permalink to &quot;Object.getOwnPropertyNames()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个数组，其包含给定对象中所有自有属性（包括不可枚举属性，但不包括使用 symbol 值作为名称的属性）。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">getOwnPropertyNames</span><span style="color:#E1E4E8;">(obj) </span><span style="color:#6A737D;">//[&#39;a&#39;, &#39;b&#39;] 不会包括使用 symbol 值作为名称的属性</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">getOwnPropertyNames</span><span style="color:#24292E;">(obj) </span><span style="color:#6A737D;">//[&#39;a&#39;, &#39;b&#39;] 不会包括使用 symbol 值作为名称的属性</span></span></code></pre></div><h2 id="object-getownpropertysymbols" tabindex="-1">Object.getOwnPropertySymbols() <a class="header-anchor" href="#object-getownpropertysymbols" aria-label="Permalink to &quot;Object.getOwnPropertySymbols()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个包含给定对象所有自有 Symbol 属性的数组。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Symbol.</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">obj[a] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;localSymbol&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">obj[b] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;globalSymbol&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">obj[c] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;c&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">getOwnPropertySymbols</span><span style="color:#E1E4E8;">(obj); </span><span style="color:#6A737D;">// [Symbol(a), Symbol(b)]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Symbol.</span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">obj[a] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;localSymbol&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">obj[b] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;globalSymbol&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">obj[c] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;c&quot;</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">getOwnPropertySymbols</span><span style="color:#24292E;">(obj); </span><span style="color:#6A737D;">// [Symbol(a), Symbol(b)]</span></span></code></pre></div><h2 id="object-getprototypeof" tabindex="-1">Object.getPrototypeOf() <a class="header-anchor" href="#object-getprototypeof" aria-label="Permalink to &quot;Object.getPrototypeOf()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回指定对象的原型（即内部 [Prototype] 属性的值）。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">proto</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(proto);</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">getPrototypeOf</span><span style="color:#E1E4E8;">(obj) </span><span style="color:#6A737D;">// {a:1}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">proto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(proto);</span></span>
<span class="line"><span style="color:#24292E;">obj.b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(obj) </span><span style="color:#6A737D;">// {a:1}</span></span></code></pre></div>`,16),F={id:"object-groupby",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#object-groupby","aria-label":`Permalink to "Object.groupBy() <Badge text="实验" type='danger'/>"`},"​",-1),g=s("h2",{id:"实例方法",tabindex:"-1"},[a("实例方法 "),s("a",{class:"header-anchor",href:"#实例方法","aria-label":'Permalink to "实例方法"'},"​")],-1),h={id:"object-prototype-hasownproperty",tabindex:"-1"},j=s("a",{class:"header-anchor",href:"#object-prototype-hasownproperty","aria-label":`Permalink to "Object.prototype.hasOwnProperty()<Badge text="不推荐" type='danger'/>"`},"​",-1),C=l(`<p>推荐使用 <code>Object.hasOwn()</code></p><h2 id="object-prototype-isprototypeof" tabindex="-1">Object.prototype.isPrototypeOf() <a class="header-anchor" href="#object-prototype-isprototypeof" aria-label="Permalink to &quot;Object.prototype.isPrototypeOf()&quot;">​</a></h2><ul><li><strong>描述</strong>： <ol><li>用于检查一个对象是否存在于另一个对象的原型链中。</li><li>所有继承自 Object.prototype 的对象（即除了 null 原型对象之外的所有对象）都继承了 isPrototypeOf() 方法。</li><li>如果作为参数的 object 不是对象（即基本类型），则该方法直接返回 false。否则，this 值被转换为对象，并且在 object 的原型链中搜索 this 值，直到到达链的末端或找到 this 值为止。</li></ol></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>与 instanceof 运算符不同。在表达式 object instanceof AFunction 中，会检查 object 的原型链是否与 AFunction.prototype 匹配，而不是与 AFunction本身匹配。</p></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bar</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Baz</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bar</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bar</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bar</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">baz</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Baz</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 原型链：</span></span>
<span class="line"><span style="color:#6A737D;">// foo: Foo --&gt; Object</span></span>
<span class="line"><span style="color:#6A737D;">// bar: Bar --&gt; Foo --&gt; Object</span></span>
<span class="line"><span style="color:#6A737D;">// baz: Baz --&gt; Bar --&gt; Foo --&gt; Object</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Baz</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isPrototypeOf</span><span style="color:#E1E4E8;">(baz)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Baz</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isPrototypeOf</span><span style="color:#E1E4E8;">(bar)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Baz</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isPrototypeOf</span><span style="color:#E1E4E8;">(foo)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Bar</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isPrototypeOf</span><span style="color:#E1E4E8;">(baz)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Bar</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isPrototypeOf</span><span style="color:#E1E4E8;">(foo)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Foo</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isPrototypeOf</span><span style="color:#E1E4E8;">(baz)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Foo</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isPrototypeOf</span><span style="color:#E1E4E8;">(bar)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isPrototypeOf</span><span style="color:#E1E4E8;">(baz)); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Baz</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bar</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bar</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">baz</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Baz</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 原型链：</span></span>
<span class="line"><span style="color:#6A737D;">// foo: Foo --&gt; Object</span></span>
<span class="line"><span style="color:#6A737D;">// bar: Bar --&gt; Foo --&gt; Object</span></span>
<span class="line"><span style="color:#6A737D;">// baz: Baz --&gt; Bar --&gt; Foo --&gt; Object</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Baz</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isPrototypeOf</span><span style="color:#24292E;">(baz)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Baz</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isPrototypeOf</span><span style="color:#24292E;">(bar)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Baz</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isPrototypeOf</span><span style="color:#24292E;">(foo)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Bar</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isPrototypeOf</span><span style="color:#24292E;">(baz)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Bar</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isPrototypeOf</span><span style="color:#24292E;">(foo)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Foo</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isPrototypeOf</span><span style="color:#24292E;">(baz)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Foo</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isPrototypeOf</span><span style="color:#24292E;">(bar)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isPrototypeOf</span><span style="color:#24292E;">(baz)); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="object-prototype-propertyisenumerable" tabindex="-1">Object.prototype.propertyIsEnumerable() <a class="header-anchor" href="#object-prototype-propertyisenumerable" aria-label="Permalink to &quot;Object.prototype.propertyIsEnumerable()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个布尔值，表示指定的属性是否是对象的可枚举自有属性。</li></ul><p>等价于：Object.getOwnPropertyDescriptor(obj, prop)?.enumerable ?? false。</p><h2 id="object-prototype-tolocalestring" tabindex="-1">Object.prototype.toLocaleString() <a class="header-anchor" href="#object-prototype-tolocalestring" aria-label="Permalink to &quot;Object.prototype.toLocaleString()&quot;">​</a></h2><ul><li><strong>描述</strong>： <ol><li>返回一个表示对象的字符串。该方法旨在由派生对象重写，以达到其特定于语言环境的目的。</li><li>提供此方法是为了给对象一个通用的 toLocaleString 方法，即使不是所有对象都会使用它。在核心语言中，这些内置对象重写了 toLocaleString 以提供特定于语言环境的格式： <ul><li>Array：Array.prototype.toLocaleString()</li><li>Number：Number.prototype.toLocaleString()</li><li>Date：Date.prototype.toLocaleString()</li><li>TypedArray：TypedArray.prototype.toLocaleString()</li><li>BigInt：BigInt.prototype.toLocaleString()</li></ul></li></ol></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">testDate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">deDate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> testDate.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;de&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;29.5.2020, 18:04:24&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">frDate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> testDate.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fr&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;29/05/2020, 18:04:24&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">testNumber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2901234564</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">deNumber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> testNumber.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;de&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;2.901.234.564&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">frNumber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> testNumber.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fr&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;2 901 234 564&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">testDate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">deDate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> testDate.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;de&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;29.5.2020, 18:04:24&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">frDate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> testDate.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fr&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;29/05/2020, 18:04:24&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">testNumber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2901234564</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">deNumber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> testNumber.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;de&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;2.901.234.564&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">frNumber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> testNumber.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fr&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;2 901 234 564&quot;</span></span></code></pre></div><h2 id="object-prototype-tostring" tabindex="-1">Object.prototype.toString() <a class="header-anchor" href="#object-prototype-tostring" aria-label="Permalink to &quot;Object.prototype.toString()&quot;">​</a></h2><ul><li><strong>描述</strong>： <ol><li>JavaScript 调用 toString 方法将对象转换为一个原始值。你很少需要自己去调用 toString 方法；当遇到需要原始值的对象时，JavaScript 会自己调用它。</li><li>该方法由字符串转换优先调用，但是数字的强制转换和原始值的强制转换会优先调用 valueOf()。然而，因为基本的 valueOf() 方法返回一个对象，toString() 方法通常在结束时调用，除非对象重写了 valueOf()。</li><li>所有继承自 Object.prototype 的对象（即，除了 null-prototype 对象之外的对象）都继承 toString() 方法。</li><li>当你创建一个自定义对象时，你可以重写 toString() 以调用自定义方法，以便将自定义对象转换为一个字符串。或者，你可以增加一个 <a href="./.html">Symbol.toPrimitive</a> 方法，该方法允许对转换过程有更多的控制，并且对于任意的类型转换，且总是优先于 valueOf 或 toString。</li><li>要将基本的 Object.prototype.toString() 用于重写的对象（或者在 null 或 undefined 上调用它），你需要在它上面调用 Function.prototype.call() 或者 Function.prototype.apply()，将要检查的对象作为第一个参数传递（称为 thisArg）。</li><li>Object.prototype.toString() 返回 &quot;[object Type]&quot;，这里的 Type 是对象的类型。</li><li>如果对象有 Symbol.toStringTag 属性，其值是一个字符串，则它的值将被用作 Type。许多内置的对象，包括 Map 和 Symbol，都有 Symbol.toStringTag。</li></ol></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">([]); </span><span style="color:#6A737D;">// &quot;[object Array]&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">([]); </span><span style="color:#6A737D;">// &quot;[object Array]&quot;</span></span></code></pre></div><h2 id="object-prototype-valueof" tabindex="-1">Object.prototype.valueOf() <a class="header-anchor" href="#object-prototype-valueof" aria-label="Permalink to &quot;Object.prototype.valueOf()&quot;">​</a></h2>`,15),v=s("strong",null,"描述",-1),O=s("li",null,"JavaScript 调用 valueOf 方法来将对象转换成基本类型值。你很少需要自己调用 valueOf 方法；当遇到需要基本类型值的对象时，JavaScript 会自动的调用该方法。",-1),A=s("li",null,[s("code",null,"强制数字类型转换"),a("和"),s("code",null,"强制基本类型转换"),a("优先会调用该方法，而"),s("code",null,"强制字符串转换"),a("会优先调用 toString()，并且 toString() 很可能返回字符串值。因此在这种情况下不会调用 valueOf()。")],-1),D=s("li",null,"从 Object.prototype 继承的所有对象（即，除了null 原型对象之外的所有对象）都继承了 toString() 方法。",-1),B=s("li",null,"许多内置对象重写此方法以返回适当的基本类型值。创建自定义对象时，可以重写 valueOf() 来调用自定义方法，以便将自定义对象转换为基本类型值。",-1),f=s("li",null,"通常，valueOf() 用于返回对对象具有意义的值——与 toString() 不同，它不需要字符串。",-1),m=s("li",null,[a("你可以添加一个 "),s("a",{href:"./.html"},"Symbol.toPrimitive"),a(" 方法，该方法允许对转换过程进行更多控制，并且对于任何类型的转换，始终优先于 valueOf 或 toString。")],-1),q=l(`<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 基本的 valueOf() 方法返回 this 值本身，如果尚未转换为对象，则转换成对象。因此，任何基本类型转换算法都不会使用它的返回值。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { foo: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> obj); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.valueOf.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;primitive&quot;</span><span style="color:#E1E4E8;">));</span><span style="color:#6A737D;">// [String: &#39;primitive&#39;]（一个包装对象）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 基本的 valueOf() 方法返回 this 值本身，如果尚未转换为对象，则转换成对象。因此，任何基本类型转换算法都不会使用它的返回值。</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> obj); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.valueOf.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;primitive&quot;</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">// [String: &#39;primitive&#39;]（一个包装对象）</span></span></code></pre></div><p><strong>对对象使用一元加运算符</strong></p><p>一元加（+）对其操作数进行强制数字转换，对于大多数没有 <a href="./.html">Symbol.toPrimitive</a> 的对象，这意味着调用其 valueOf()。但是，如果对象没有自定义的 valueOf() 方法，则基本实现将导致忽略 valueOf()，而使用 toString() 的返回值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">+new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 当前时间戳；与 new Date().getTime() 相同</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">{}; </span><span style="color:#6A737D;">// NaN（toString() 返回 &quot;[object Object]&quot;）</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">[]; </span><span style="color:#6A737D;">// 0（toString() 返回一个空的字符串列表）</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// 1（toString() 返回 &quot;1&quot;）</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// NaN（toString() 返回 &quot;1,2&quot;）</span></span>
<span class="line"><span style="color:#F97583;">+new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// NaN（toString() 返回 &quot;[object Set]&quot;）</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">{ </span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> }; </span><span style="color:#6A737D;">// 42</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">+new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 当前时间戳；与 new Date().getTime() 相同</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">{}; </span><span style="color:#6A737D;">// NaN（toString() 返回 &quot;[object Object]&quot;）</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">[]; </span><span style="color:#6A737D;">// 0（toString() 返回一个空的字符串列表）</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 1（toString() 返回 &quot;1&quot;）</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// NaN（toString() 返回 &quot;1,2&quot;）</span></span>
<span class="line"><span style="color:#D73A49;">+new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// NaN（toString() 返回 &quot;[object Set]&quot;）</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> }; </span><span style="color:#6A737D;">// 42</span></span></code></pre></div>`,4);function k(P,S,_,w,x,z){const o=p("Badge"),e=p("lines");return c(),r("div",null,[E,s("h2",i,[a("Object.setPrototypeOf()"),n(o,{text:"不推荐",type:"danger"}),a(),u]),b,s("h2",F,[a("Object.groupBy() "),n(o,{text:"实验",type:"danger"}),a(),d]),g,s("h2",h,[a("Object.prototype.hasOwnProperty()"),n(o,{text:"不推荐",type:"danger"}),a(),j]),C,s("ul",null,[s("li",null,[v,a("： "),s("ol",null,[O,A,D,s("li",null,[n(e,{text:"Object.prototype.valueOf() 的基本实现被有意设计为无用的返回一个对象；其返回值将永远不会被任何基本类型转换算法使用"}),a("。")]),B,f,m])])]),q])}const V=t(y,[["render",k]]);export{T as __pageData,V as default};
