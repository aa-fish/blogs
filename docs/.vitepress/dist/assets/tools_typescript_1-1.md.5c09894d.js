import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.5b0c684c.js";const E=JSON.parse('{"title":"语言类型","description":"","frontmatter":{},"headers":[],"relativePath":"tools/typescript/1-1.md","filePath":"tools/typescript/1-1.md","lastUpdated":1729031503000}'),p={name:"tools/typescript/1-1.md"},e=l(`<h1 id="语言类型" tabindex="-1">语言类型 <a class="header-anchor" href="#语言类型" aria-label="Permalink to &quot;语言类型&quot;">​</a></h1><h2 id="强类型与弱类型" tabindex="-1">强类型与弱类型 <a class="header-anchor" href="#强类型与弱类型" aria-label="Permalink to &quot;强类型与弱类型&quot;">​</a></h2><ul><li><strong>强类型与弱类型语言从<code>类型安全</code>的维度进行区分</strong>。区分点在于<code>是否支持隐形类型转化</code></li></ul><blockquote><p>弱类型：<span class="line1">支持隐式类型转换</span>（松散）。</p><p>强类型：<span class="line1">不支持隐式类型转换</span>。（严格）</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//  √  弱类型：支持 m + n</span></span>
<span class="line"><span style="color:#6A737D;">//  ×  强类型：不支持 m + n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//  √  弱类型：支持 m + n</span></span>
<span class="line"><span style="color:#6A737D;">//  ×  强类型：不支持 m + n</span></span></code></pre></div><h2 id="动态类型与静态类型" tabindex="-1">动态类型与静态类型 <a class="header-anchor" href="#动态类型与静态类型" aria-label="Permalink to &quot;动态类型与静态类型&quot;">​</a></h2><ul><li><strong>动态类型与静态类型语言从<code>类型检查</code>的维度进行区分</strong>。</li></ul><blockquote><p>静态类型：变量使用前需声明数据类型，程序运行过程中<span class="line1">数据类型不允许改变</span>。（严格）</p><p>动态类型：变量使用前不需要声明数据类型，程序运行过程中<span class="line1">数据类型可以改变</span>。（松散）</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//  x  静态类型：不支持 n = &#39;a&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//  √  动态类型：支持 n = &#39;a&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//  x  静态类型：不支持 n = &#39;a&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//  √  动态类型：支持 n = &#39;a&#39;</span></span></code></pre></div><h2 id="强类语言的优势" tabindex="-1">强类语言的优势 <a class="header-anchor" href="#强类语言的优势" aria-label="Permalink to &quot;强类语言的优势&quot;">​</a></h2><ul><li>提早暴露编码错误</li><li>编码更准备可靠</li><li>减少不必要的类型判断</li></ul><h2 id="javascript弱类动态语言" tabindex="-1">Javascript弱类动态语言 <a class="header-anchor" href="#javascript弱类动态语言" aria-label="Permalink to &quot;Javascript弱类动态语言&quot;">​</a></h2><p>脚本语言没有编译环节，直接在运行环境中运行。而静态类型语言需要在编译阶段进行类型检查（Javascript没有指定类型）。所以 Javascript 被设计成了<code>弱类动态语言</code>。</p>`,13),o=[e];function t(c,r,i,d,y,h){return a(),n("div",null,o)}const _=s(p,[["render",t]]);export{E as __pageData,_ as default};
