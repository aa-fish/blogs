import{_ as a,o as s,c as e,Q as n}from"./chunks/framework.5b0c684c.js";const f=JSON.parse('{"title":"DataView","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/1-12.md","filePath":"web-core/base/1-12.md","lastUpdated":1729031503000}'),t={name:"web-core/base/1-12.md"},l=n(`<h1 id="dataview" tabindex="-1">DataView <a class="header-anchor" href="#dataview" aria-label="Permalink to &quot;DataView&quot;">​</a></h1><p>DataView 视图是一个可以从二进制 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序（endianness）问题。</p><h2 id="dataview-与-字节序" tabindex="-1">DataView 与 字节序 <a class="header-anchor" href="#dataview-与-字节序" aria-label="Permalink to &quot;DataView 与 字节序&quot;">​</a></h2><ul><li>多字节的数字格式在内存中的表示方式因机器架构而异（与<code>字节序</code>相关）。</li><li>DataView 访问器（accessor）提供了对如何访问数据的明确控制，而不管执行代码的计算机的字节序如何。</li></ul><h2 id="dataview-64-位整数值" tabindex="-1">DataView 64 位整数值 <a class="header-anchor" href="#dataview-64-位整数值" aria-label="Permalink to &quot;DataView 64 位整数值&quot;">​</a></h2><ul><li>某些浏览器不支持 DataView.prototype.setBigInt64() 和 DataView.prototype.setBigUint64()。因此，要在代码中启用跨浏览器的 64 位操作，你可以实现自己的 getUint64() 函数，以获得精度达到 Number.MAX_SAFE_INTEGER 的值——这对于某些情况足够使用。</li><li>如果你需要完整的 64 位的范围，你可以创建 BigInt。此外，尽管原生 BigInt 比等效的用户态的库快得多，但由于其大小可变的性质，BigInt 始终比 JavaScript 中的 32 位整数要慢得多。</li></ul><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(buffer)</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(buffer, byteOffset)</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(buffer, byteOffset, byteLength)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(buffer)</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(buffer, byteOffset)</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(buffer, byteOffset, byteLength)</span></span></code></pre></div><ul><li><strong>参数</strong>： <ul><li><code>buffer</code>: DataView对象的存储的现有ArrayBuffer或SharedArrayBuffer。</li><li><code>byteOffset[可选]</code>：缓冲区中第一个字节的偏移量（以字节为单位）。如果未指定，缓冲区视图将从第一个字节开始。</li><li><code>byteLength[可选]</code>：字节数组长度。如果未指定，视图的长度将与缓冲区的长度匹配。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(buffer, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">view.</span><span style="color:#B392F0;">setInt16</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">view.</span><span style="color:#B392F0;">getInt16</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 42</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">view</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">view.</span><span style="color:#6F42C1;">setInt16</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">view.</span><span style="color:#6F42C1;">getInt16</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 42</span></span></code></pre></div><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><h2 id="dataview-prototype-buffer" tabindex="-1">DataView.prototype.buffer <a class="header-anchor" href="#dataview-prototype-buffer" aria-label="Permalink to &quot;DataView.prototype.buffer&quot;">​</a></h2><ul><li><strong>描述</strong>：描述了在构造时被 DataView 引用的 ArrayBuffer。</li></ul><h2 id="dataview-prototype-bytelength" tabindex="-1">DataView.prototype.byteLength <a class="header-anchor" href="#dataview-prototype-bytelength" aria-label="Permalink to &quot;DataView.prototype.byteLength&quot;">​</a></h2><ul><li><strong>描述</strong>：描述了视图从它的 ArrayBuffer 开始的字节长度。</li></ul><h2 id="dataview-prototype-byteoffset" tabindex="-1">DataView.prototype.byteOffset <a class="header-anchor" href="#dataview-prototype-byteoffset" aria-label="Permalink to &quot;DataView.prototype.byteOffset&quot;">​</a></h2><ul><li><strong>描述</strong>：描述了从 ArrayBuffer 开始的字节偏移量。</li></ul><h2 id="实例方法" tabindex="-1">实例方法： <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法：&quot;">​</a></h2><h2 id="getbigint64" tabindex="-1">getBigInt64() <a class="header-anchor" href="#getbigint64" aria-label="Permalink to &quot;getBigInt64()&quot;">​</a></h2><ul><li><strong>描述</strong>：从 DataView 开始获取一个指定偏移量的有符号 64 位整数 (long long) 。</li></ul><h2 id="get-typedarray-10个" tabindex="-1">get+TypedArray() (10个) <a class="header-anchor" href="#get-typedarray-10个" aria-label="Permalink to &quot;get+TypedArray() (10个)&quot;">​</a></h2><ul><li>此处的<code>TypedArray</code>是一个具体的实例化对象，它是TypedArray的子类。具体使用查阅文档。</li></ul><h2 id="set-typedarray-11个" tabindex="-1">set+TypedArray() (11个) <a class="header-anchor" href="#set-typedarray-11个" aria-label="Permalink to &quot;set+TypedArray() (11个)&quot;">​</a></h2><ul><li>此处的<code>TypedArray</code>是一个具体的实例化对象，它是TypedArray的子类。具体使用查阅文档。</li></ul>`,24),o=[l];function p(r,c,i,y,d,E){return s(),e("div",null,o)}const u=a(t,[["render",p]]);export{f as __pageData,u as default};
