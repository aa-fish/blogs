import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.5b0c684c.js";const d=JSON.parse('{"title":"Number","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/1-3.md","filePath":"web-core/base/1-3.md","lastUpdated":1729031503000}'),o={name:"web-core/base/1-3.md"},p=l(`<h1 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number&quot;">​</a></h1><h2 id="浮点数-ieee-754-标准" tabindex="-1">浮点数（IEEE 754）标准 <a class="header-anchor" href="#浮点数-ieee-754-标准" aria-label="Permalink to &quot;浮点数（IEEE 754）标准&quot;">​</a></h2><p>JavaScript中数值通常以字面量形式表示。且没有单独的整数类型，日常使用的字面量数值是浮点数值，而不是整数。</p><h2 id="浮点数拓展-ieee-754" tabindex="-1">浮点数拓展（IEEE 754） <a class="header-anchor" href="#浮点数拓展-ieee-754" aria-label="Permalink to &quot;浮点数拓展（IEEE 754）&quot;">​</a></h2><details class="details custom-block"><summary>浮点数拓展（IEEE 754）</summary><p>IEEE二进制浮点数算术标准IEEE 754是20世纪80代以来最广泛使用的浮点数运算标准。javascript的浮点数运算就是采用了IEEE 754的标准。</p><p>IEEE 754规定了四种表示浮点数值的方式：</p><ol><li>单精确度（32位）</li><li>双精确度（64位）</li><li>延伸单精确度（43比特以上，很少使用）</li><li>延伸双精确度（79比特以上，通常以80位实现）</li></ol><p>其中javascript采用的是<code>双精度（64位）浮点运算规则</code>。这样的存储结构优点是可以归一化处理整数和小数，节省存储空间。</p><hr><p><strong>IEEE754在计算机中存储和运算规则</strong>:</p><p>一个浮点数 (Value) 可以这样表示：浮点数的实际值，等于符号位（sign bit）乘以指数偏移值（exponent bias）再乘以分数值（mantissa），没错，就是科学计数法。<code>Value = sign * exponent * mantissa</code></p><ul><li>符号位S：第 1 位是正负数符号位（sign），0代表正数，1代表负数。</li><li>指数位E：中间的 11 位存储指数（exponent），用来表示次方数。</li><li>尾数位M：最后的 52 位是尾数（mantissa），超出的部分自动进一舍零。</li></ul><hr><p><strong>将十进制数 10.625 转换为 IEEE 754 64 位浮点数示例</strong>：</p><ol><li>将整数部分和小数部分转化为二进制： <ul><li>整数部分 10 转换为二进制：1010</li><li>小数部分 0.625 转换为二进制：0.101</li><li>合并得到：1010.101</li></ul></li><li>转化为二进制浮点数。 <ul><li>科学计数法表示：1010.101 = 1.010101 × 2^3</li></ul></li><li>确定符号位、指数位、尾数位： <ul><li>符号位S：0</li><li>指数位E：3 + 1023 = 1026，转换为二进制：10000000010</li><li>尾数位M：0101010000000000000000000000000000000000000000000000</li></ul></li><li>最终表示为：<code>0</code> <code>10000000010</code> <code>0101010000000000000000000000000000000000000000000000</code></li></ol></details><h2 id="浮点数精度问题-0-1-0-2-0-30000000000000004" tabindex="-1">浮点数精度问题 0.1 + 0.2 = 0.30000000000000004 <a class="header-anchor" href="#浮点数精度问题-0-1-0-2-0-30000000000000004" aria-label="Permalink to &quot;浮点数精度问题 0.1 + 0.2 = 0.30000000000000004&quot;">​</a></h2><details class="details custom-block"><summary>浮点数精度丢失的原因</summary><p>十进制的0.1和0.2会被转换成二进制的，但是由于浮点数用二进制表示时是无穷的：</p><p>0.1 -&gt; 0.0001 1001 1001 1001...(1100循环)</p><p>0.2 -&gt; 0.0011 0011 0011 0011...(0011循环)</p><p>IEEE 754 标准的 64 位双精度浮点数的小数部分最多支持53位二进制位，所以两者相加之后得到二进制为：</p><p>0.0100110011001100110011001100110011001100110011001100</p><p>因浮点数小数位的限制而截断的二进制数字，再转换为十进制，就成了0.30000000000000004。所以在进行算术计算时会产生误差。</p></details><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><ul><li>作为 new Number(value) 构造函数，创建 Number 对象</li><li>当作为函数调用时Number(value) ，它返回 Number 类型的原始值。</li><li>Number 构造函数包含常量和处理数值的方法。其他类型的值可以使用 Number() 函数转换为数字。</li></ul><div class="info custom-block"><p class="custom-block-title">使用 Number() 将 BigInt 转换为数字</p><p>Number() 是唯一可以将 BigInt 转换为数字而不抛出错误的情况，因为这是完全显式的转换。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 1 不会报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 1 不会报错</span></span></code></pre></div></div><h2 id="静态属性" tabindex="-1">静态属性 <a class="header-anchor" href="#静态属性" aria-label="Permalink to &quot;静态属性&quot;">​</a></h2><h2 id="number-nan" tabindex="-1">Number.NaN <a class="header-anchor" href="#number-nan" aria-label="Permalink to &quot;Number.NaN&quot;">​</a></h2><ul><li><strong>描述</strong>：Number.NaN 静态数据属性表示非数字值，等同于 NaN。</li></ul><h2 id="number-min-value" tabindex="-1">Number.MIN_VALUE <a class="header-anchor" href="#number-min-value" aria-label="Permalink to &quot;Number.MIN_VALUE&quot;">​</a></h2><ul><li><strong>描述</strong>：JavaScript 中<code>可表示的</code>最小正数值，它是最接近 0 的数。</li></ul><h2 id="number-max-value" tabindex="-1">Number.MAX_VALUE <a class="header-anchor" href="#number-max-value" aria-label="Permalink to &quot;Number.MAX_VALUE&quot;">​</a></h2><ul><li><strong>描述</strong>：JavaScript 中<code>可表示的</code>最大数值。大于 MAX_VALUE 的值表示为 Infinity 并将丢失其实际值。</li></ul><h2 id="number-min-safe-integer" tabindex="-1">Number.MIN_SAFE_INTEGER <a class="header-anchor" href="#number-min-safe-integer" aria-label="Permalink to &quot;Number.MIN_SAFE_INTEGER&quot;">​</a></h2><ul><li><strong>描述</strong>： JavaScript 中<code>最小的安全整数</code>（-2^53 + 1）。要表示比这小的整数，请考虑使用 BigInt。</li></ul><h2 id="number-max-safe-integer" tabindex="-1">Number.MAX_SAFE_INTEGER <a class="header-anchor" href="#number-max-safe-integer" aria-label="Permalink to &quot;Number.MAX_SAFE_INTEGER&quot;">​</a></h2><ul><li><strong>描述</strong>： JavaScript 中<code>最大的安全整数</code>（ 2^53 – 1）。要表示比这大的整数，请考虑使用 BigInt。</li></ul><h2 id="number-epsilon" tabindex="-1">Number.EPSILON <a class="header-anchor" href="#number-epsilon" aria-label="Permalink to &quot;Number.EPSILON&quot;">​</a></h2><ul><li><strong>描述</strong>：<code>表示 1 与大于 1 的最小浮点数之间的差值</code>。2^-52，或大约 2.2204460492503130808472633361816E-16。</li></ul><h2 id="number-negative-infinity" tabindex="-1">Number.NEGATIVE_INFINITY <a class="header-anchor" href="#number-negative-infinity" aria-label="Permalink to &quot;Number.NEGATIVE_INFINITY&quot;">​</a></h2><ul><li><strong>描述</strong>：表示正无穷小值。</li></ul><h2 id="number-positive-infinity" tabindex="-1">Number.POSITIVE_INFINITY <a class="header-anchor" href="#number-positive-infinity" aria-label="Permalink to &quot;Number.POSITIVE_INFINITY&quot;">​</a></h2><ul><li><strong>描述</strong>：表示正无穷大值。</li></ul><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><h2 id="number-isnan" tabindex="-1">Number.isNaN() <a class="header-anchor" href="#number-isnan" aria-label="Permalink to &quot;Number.isNaN()&quot;">​</a></h2><ul><li><strong>描述</strong>：判断传入的值是否为 <code>NaN</code>，给定值是一个值为 NaN 的数字，则返回布尔值 true，否则返回 false。(貌似只判断NaN)</li></ul><div class="tip custom-block"><p class="custom-block-title">Number.isNaN() 和全局 isNaN() 之间的区别</p><ol><li>Number.isNaN() 不会尝试将参数转换为数字，因此非数字总是返回 false。</li><li>全局 isNaN() 函数会将参数强制转换为数字：</li></ol></div><h2 id="number-isfinite" tabindex="-1">Number.isFinite() <a class="header-anchor" href="#number-isfinite" aria-label="Permalink to &quot;Number.isFinite()&quot;">​</a></h2><ul><li><strong>描述</strong>：判断传入值是否是一个有限数。</li></ul><div class="tip custom-block"><p class="custom-block-title">Number.isFinite() 和全局 isFinite() 之间的不同</p><p>与全局 isFinite() 函数相比，此方法不会先将参数转换为数字，这意味着只有类型为数字且为有限数的值才返回 true，而非数字的值始终返回 false。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true；强制转换为数字 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true；强制转换为数字 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true；强制转换为数字 0</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true；强制转换为数字 0</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span></code></pre></div></div><h2 id="number-isinteger" tabindex="-1">Number.isInteger() <a class="header-anchor" href="#number-isinteger" aria-label="Permalink to &quot;Number.isInteger()&quot;">​</a></h2><ul><li><strong>描述</strong>：判断传入值是否为整数。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(Math.</span><span style="color:#79B8FF;">PI</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5.0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5.000000000000001</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5.0000000000000001</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true，因为精度损失</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(Math.</span><span style="color:#005CC5;">PI</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5.0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5.000000000000001</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5.0000000000000001</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true，因为精度损失</span></span></code></pre></div><h2 id="number-issafeinteger" tabindex="-1">Number.isSafeInteger() <a class="header-anchor" href="#number-issafeinteger" aria-label="Permalink to &quot;Number.isSafeInteger()&quot;">​</a></h2><ul><li><strong>描述</strong>：判断提供的值是否是一个安全整数。安全整数由 -2^53 + 1 到 2^53 - 1 的所有整数组成。 <ol><li>可以精确地表示为 IEEE-754 双精度数，并且</li><li>其 IEEE-754 表示形式不能是舍入任何其他整数以适应 IEEE-754 表示形式的结果。</li></ol></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;3&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3.1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">53</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">53</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3.1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="number-parsefloat" tabindex="-1">Number.parseFloat() <a class="header-anchor" href="#number-parsefloat" aria-label="Permalink to &quot;Number.parseFloat()&quot;">​</a></h2><ul><li><strong>描述</strong>：析参数并返回浮点数。如果无法从参数中解析出一个数字，则返回 NaN。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li>此方法与全局函数 parseFloat() 具有相同的功能：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.parseFloat </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> parseFloat; </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.parseFloat </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> parseFloat; </span><span style="color:#6A737D;">// true</span></span></code></pre></div><ol start="2"><li>当整数太大以至于不能被转换时将失去精度。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">parseFloat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">900719925474099267</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 900719925474099300</span></span>
<span class="line"><span style="color:#B392F0;">parseFloat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;900719925474099267n&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 900719925474099300</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">parseFloat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">900719925474099267</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 900719925474099300</span></span>
<span class="line"><span style="color:#6F42C1;">parseFloat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;900719925474099267n&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 900719925474099300</span></span></code></pre></div></div><h2 id="number-parseint" tabindex="-1">Number.parseInt() <a class="header-anchor" href="#number-parseint" aria-label="Permalink to &quot;Number.parseInt()&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(string, radix)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(string, radix)</span></span></code></pre></div><ul><li><strong>描述</strong>：解析一个字符串参数并返回一个指定基数的整数。</li><li><strong>参数</strong>：要被解析的值，会被强制转化为字符串。字符串开头的空白符将会被忽略。</li><li>[可选参数]：radix 是 2-36 之间的整数，表示被解析字符串的基数。（数学记数系统中的基）。 <ol><li>如果 radix 为 undefined 或 0，则 radix 将被默认设置为 10。</li><li>以码元对 0x 或 0X 开头，在这种情况下，radix 将被默认设置为 16。</li><li>如果 radix 小于 2 或大于 36，或第一个非空白字符不能转换为数字，则返回 NaN。</li></ol></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li>此方法与全局函数 parseInt() 具有相同的功能：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.parseInt </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> parseInt; </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.parseInt </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> parseInt; </span><span style="color:#6A737D;">// true</span></span></code></pre></div><hr><p>进制转换</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(num, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 把num当作2进制 转成 10 进制</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">num.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(radix) </span><span style="color:#6A737D;">// 把10进制转为 radix 进制</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(num, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 把num当作2进制 转成 10 进制</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">num.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(radix) </span><span style="color:#6A737D;">// 把10进制转为 radix 进制</span></span></code></pre></div></div><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h2 id="number-prototype-toexponential" tabindex="-1">Number.prototype.toExponential() <a class="header-anchor" href="#number-prototype-toexponential" aria-label="Permalink to &quot;Number.prototype.toExponential()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个以<code>指数表示法</code>表示该数字的字符串。</li><li>[可选参数]：一个整数，用来指定小数点后有几位数字。默认设置为完整表示该数字所需要的数字。</li><li><strong>异常</strong>：如果可选参数不是介于 0 和 100 之间（包含两端）的整数，则抛出该错误。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">numObj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">77.1234</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">numObj.</span><span style="color:#B392F0;">toExponential</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 7.71234e+1</span></span>
<span class="line"><span style="color:#E1E4E8;">numObj.</span><span style="color:#B392F0;">toExponential</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 7.7123e+1</span></span>
<span class="line"><span style="color:#E1E4E8;">numObj.</span><span style="color:#B392F0;">toExponential</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 7.71e+1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">numObj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">77.1234</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">numObj.</span><span style="color:#6F42C1;">toExponential</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 7.71234e+1</span></span>
<span class="line"><span style="color:#24292E;">numObj.</span><span style="color:#6F42C1;">toExponential</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 7.7123e+1</span></span>
<span class="line"><span style="color:#24292E;">numObj.</span><span style="color:#6F42C1;">toExponential</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 7.71e+1</span></span></code></pre></div><h2 id="number-prototype-tofixed" tabindex="-1">Number.prototype.toFixed() <a class="header-anchor" href="#number-prototype-tofixed" aria-label="Permalink to &quot;Number.prototype.toFixed()&quot;">​</a></h2><ul><li><strong>描述</strong>：使用定点表示法来格式化该数值。</li><li>[可选参数]：小数点后的位数。应该是一个介于 0 和 100 之间的值，包括 0 和 100。如果这个参数被省略，则被视为 0。 <ol><li>返回一个表示 numObj 的字符串，但不使用指数计数法，并且小数点后有精确到 digits 位的数字。</li><li>如果需要截断，则将数字四舍五入；</li><li>如果小数位数不足，则小数部分用零填充，以使其具有指定长度。</li></ol></li><li><strong>异常</strong>：如果可选参数不是介于 0 和 100 之间（包含两端）的整数，则抛出该错误。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">numObj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12345.6789</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">numObj.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// &#39;12346&#39;；四舍五入，没有小数部分</span></span>
<span class="line"><span style="color:#E1E4E8;">numObj.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;12345.7&#39;；向上舍入</span></span>
<span class="line"><span style="color:#E1E4E8;">numObj.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;12345.678900&#39;；用零补足位数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">numObj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12345.6789</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">numObj.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// &#39;12346&#39;；四舍五入，没有小数部分</span></span>
<span class="line"><span style="color:#24292E;">numObj.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;12345.7&#39;；向上舍入</span></span>
<span class="line"><span style="color:#24292E;">numObj.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;12345.678900&#39;；用零补足位数</span></span></code></pre></div><details class="details custom-block"><summary>toFixed 有时向上有时向下舍入 的 BUG</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2.55</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;2.5&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 它向下舍入，因为它无法用浮点数精确表示，并且最接近的可表示浮点数较小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2.449999999999999999</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;2.5&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 向上舍入，因为它与 2.45 的差值小于 Number.EPSILON。</span></span>
<span class="line"><span style="color:#6A737D;">// 这个字面量实际上编码和 2.45 相同的数值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">2.55</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;2.5&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 它向下舍入，因为它无法用浮点数精确表示，并且最接近的可表示浮点数较小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">2.449999999999999999</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;2.5&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 向上舍入，因为它与 2.45 的差值小于 Number.EPSILON。</span></span>
<span class="line"><span style="color:#6A737D;">// 这个字面量实际上编码和 2.45 相同的数值</span></span></code></pre></div></details><h2 id="number-prototype-tolocalestring" tabindex="-1">Number.prototype.toLocaleString() <a class="header-anchor" href="#number-prototype-tolocalestring" aria-label="Permalink to &quot;Number.prototype.toLocaleString()&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">(locales, options)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">(locales, options)</span></span></code></pre></div><ul><li><strong>描述</strong>：方法返回这个数字特定于语言环境的表示字符串。在具有 Intl.NumberFormat API 支持的实现中，此方法仅仅简单调用了 Intl.NumberFormat。当格式化大量数字时，最好创建一个 Intl.NumberFormat 对象，并使用其提供的 format() 方法。</li><li>[可选参数]：缩写语言代码（BCP 47 language tag）的字符串或者这些字符串组成的数组。与 Intl.NumberFormat() 构造函数的 locales 参数相同。在无 Intl.NumberFormat 支持的实现中，往往使用主机的区域设置，这个参数是忽略的。</li><li>[可选参数]：调整输出格式的对象。与 Intl.NumberFormat() 构造函数的 options 参数相同。在无 Intl.NumberFormat 支持的实现中，这个参数是被忽略的。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123456.789</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">number.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &#39;123,456.789&#39; 如果区域设置为美国英语</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 德国使用逗号作为小数分隔符，分位周期为千位</span></span>
<span class="line"><span style="color:#E1E4E8;">number.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;de-DE&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 123.456,789</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在大多数阿拉伯语国家使用阿拉伯语数字</span></span>
<span class="line"><span style="color:#E1E4E8;">number.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ar-EG&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// ١٢٣٤٥٦٫٧٨٩</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 印度使用千位/拉克（十万）/克若尔（千万）分隔</span></span>
<span class="line"><span style="color:#E1E4E8;">number.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;en-IN&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 1,23,456.789</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// nu 扩展字段要求编号系统，e.g. 中文十进制</span></span>
<span class="line"><span style="color:#E1E4E8;">number.</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zh-Hans-CN-u-nu-hanidec&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 一二三,四五六.七八九</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123456.789</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">number.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &#39;123,456.789&#39; 如果区域设置为美国英语</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 德国使用逗号作为小数分隔符，分位周期为千位</span></span>
<span class="line"><span style="color:#24292E;">number.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;de-DE&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 123.456,789</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在大多数阿拉伯语国家使用阿拉伯语数字</span></span>
<span class="line"><span style="color:#24292E;">number.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ar-EG&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// ١٢٣٤٥٦٫٧٨٩</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 印度使用千位/拉克（十万）/克若尔（千万）分隔</span></span>
<span class="line"><span style="color:#24292E;">number.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;en-IN&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 1,23,456.789</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// nu 扩展字段要求编号系统，e.g. 中文十进制</span></span>
<span class="line"><span style="color:#24292E;">number.</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zh-Hans-CN-u-nu-hanidec&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 一二三,四五六.七八九</span></span></code></pre></div><h2 id="number-prototype-toprecision" tabindex="-1">Number.prototype.toPrecision() <a class="header-anchor" href="#number-prototype-toprecision" aria-label="Permalink to &quot;Number.prototype.toPrecision()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个以定点表示法或指数表示法表示 Number 对象的字符串，该字符串四舍五入到 precision 个有效数字。</li><li>[可选参数]：一个指定<code>有效位数</code>的整数。</li><li><strong>异常</strong>：如果 precision 不在 1 和 100 之间（包含两端），则抛出该错误。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> numObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5.123456</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(numObj.</span><span style="color:#B392F0;">toPrecision</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 输出 &#39;5.123456&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(numObj.</span><span style="color:#B392F0;">toPrecision</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 输出 &#39;5.1235&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(numObj.</span><span style="color:#B392F0;">toPrecision</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 输出 &#39;5.1&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(numObj.</span><span style="color:#B392F0;">toPrecision</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 输出 &#39;5&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">numObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.000123</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(numObj.</span><span style="color:#B392F0;">toPrecision</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 输出 &#39;0.000123&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(numObj.</span><span style="color:#B392F0;">toPrecision</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 输出 &#39;0.00012300&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(numObj.</span><span style="color:#B392F0;">toPrecision</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 输出 &#39;0.00012&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(numObj.</span><span style="color:#B392F0;">toPrecision</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 输出 &#39;0.0001&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 请注意，在某些情况下可能会返回指数表示法字符串 (符点数失精度问题)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">((</span><span style="color:#79B8FF;">1234.5</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toPrecision</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 输出 &#39;1.2e+3&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> numObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5.123456</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(numObj.</span><span style="color:#6F42C1;">toPrecision</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 输出 &#39;5.123456&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(numObj.</span><span style="color:#6F42C1;">toPrecision</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 输出 &#39;5.1235&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(numObj.</span><span style="color:#6F42C1;">toPrecision</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 输出 &#39;5.1&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(numObj.</span><span style="color:#6F42C1;">toPrecision</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 输出 &#39;5&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">numObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.000123</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(numObj.</span><span style="color:#6F42C1;">toPrecision</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 输出 &#39;0.000123&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(numObj.</span><span style="color:#6F42C1;">toPrecision</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 输出 &#39;0.00012300&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(numObj.</span><span style="color:#6F42C1;">toPrecision</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 输出 &#39;0.00012&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(numObj.</span><span style="color:#6F42C1;">toPrecision</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 输出 &#39;0.0001&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 请注意，在某些情况下可能会返回指数表示法字符串 (符点数失精度问题)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">((</span><span style="color:#005CC5;">1234.5</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toPrecision</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 输出 &#39;1.2e+3&#39;</span></span></code></pre></div><h2 id="number-prototype-tostring" tabindex="-1">Number.prototype.toString() <a class="header-anchor" href="#number-prototype-tostring" aria-label="Permalink to &quot;Number.prototype.toString()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回表示该数字值的字符串。 <ol><li>Number 对象的重写了 Object 的 toString 方法；</li><li>它不会继承 Object.prototype.toString()。</li><li>对于 Number 值，toString 方法返回数字值指定基数的字符串表示。</li></ol></li><li>[可选参数]：一个整数，范围在 2 到 36 之间，用于指定表示数字值的基数。默认为 10。</li><li><strong>异常</strong>：如果 radix 小于 2 或大于 36，则抛出该异常。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Number</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;重写了&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#F97583;">new</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">Number</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;重写了&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &#39;10&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;110&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">254</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;fe&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Number</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;重写了&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;1&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#D73A49;">new</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;重写了&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &#39;10&#39;</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;110&quot;</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">254</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;fe&quot;</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 如果你有一个非十进制的数字的字符串，可以使用 parseInt() 和 toString() 将其转换为不同的基数。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hex</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;CAFEBABE&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(hex, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &quot;11001010111111101011101010111110&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 把hex当作16进制通过parseInt转为10进制，再把10进制通过toString转为2进制。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 如果你有一个非十进制的数字的字符串，可以使用 parseInt() 和 toString() 将其转换为不同的基数。</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hex</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;CAFEBABE&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(hex, </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;11001010111111101011101010111110&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 把hex当作16进制通过parseInt转为10进制，再把10进制通过toString转为2进制。</span></span></code></pre></div><h2 id="number-prototype-valueof" tabindex="-1">Number.prototype.valueOf() <a class="header-anchor" href="#number-prototype-valueof" aria-label="Permalink to &quot;Number.prototype.valueOf()&quot;">​</a></h2><ul><li><strong>描述</strong>：一个表示指定 Number 对象的原始值的数字。该方法通常由 JavaScript 在内部调用，而非在 Web 代码中显式调用。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">numObj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> numObj </span><span style="color:#6A737D;">// object</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> numObj.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// number</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">numObj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> numObj </span><span style="color:#6A737D;">// object</span></span>
<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> numObj.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// number</span></span></code></pre></div>`,69),e=[p];function t(r,c,i,y,E,u){return a(),n("div",null,e)}const b=s(o,[["render",t]]);export{d as __pageData,b as default};
