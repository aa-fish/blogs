import{_ as a,o as s,c as t,Q as e}from"./chunks/framework.5b0c684c.js";const o="/blogs/assets/data-structure_3-1_1.ceb28f63.png",r="/blogs/assets/data-structure_3-1_2.69deced3.png",c="/blogs/assets/data-structure_3-1_3.f4ed3889.png",l="/blogs/assets/data-structure_3-1_4.f3f3db89.png",i="/blogs/assets/data-structure_3-1_5.faca9550.png",x=JSON.parse('{"title":"多项式的表示","description":"","frontmatter":{},"headers":[],"relativePath":"data-structure/3-1.md","filePath":"data-structure/3-1.md","lastUpdated":1729031503000}'),p={name:"data-structure/3-1.md"},u=e('<h1 id="多项式的表示" tabindex="-1">多项式的表示 <a class="header-anchor" href="#多项式的表示" aria-label="Permalink to &quot;多项式的表示&quot;">​</a></h1><p>f(x) = a<sub>0</sub> + a<sub>1</sub>x + ... + a<sub>n-1</sub>x<sup>n-1</sup> + a<sub>n</sub>x<sup>n</sup></p><p><strong>一元多项式如何在程序设计语言中表示,<code>相加</code>、<code>相减</code>、<code>相乘</code>？</strong></p><div class="tip custom-block"><p class="custom-block-title">【分析】：如何表示多项式？</p><ol><li>多项式的项数 n</li><li>各项系数 a<sub>i</sub> 及其指数 i</li></ol></div><h2 id="方法一-顺序存储结构的直接表示" tabindex="-1">方法一：顺序存储结构的直接表示 <a class="header-anchor" href="#方法一-顺序存储结构的直接表示" aria-label="Permalink to &quot;方法一：顺序存储结构的直接表示&quot;">​</a></h2><p><img src="'+o+'" alt="图片"></p><h2 id="方法二-顺序存储结构表示非零项" tabindex="-1">方法二：顺序存储结构表示非零项 <a class="header-anchor" href="#方法二-顺序存储结构表示非零项" aria-label="Permalink to &quot;方法二：顺序存储结构表示非零项&quot;">​</a></h2><p><img src="'+r+'" alt="图片"><img src="'+c+'" alt="图片"></p><p>除了以上数组的方法，还可以使用链表的存储方式</p><h2 id="方法三-链表结构存储非零项" tabindex="-1">方法三：链表结构存储非零项 <a class="header-anchor" href="#方法三-链表结构存储非零项" aria-label="Permalink to &quot;方法三：链表结构存储非零项&quot;">​</a></h2><p><img src="'+l+'" alt="图片"></p><h2 id="启示" tabindex="-1">启示 <a class="header-anchor" href="#启示" aria-label="Permalink to &quot;启示&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">多项式表示的启示</p><ol><li>同一个问题可以有不同的表示（存储）方法。</li><li>有一类共性问题：有序线性序列的组织和管理。</li></ol></div><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>数组：编程简单、易调试<sup>优点</sup>，但是需要事先确定数组大小<sup>缺点</sup>；</p><p>链表：动态性强<sup>优点</sup>，编程略微复杂，不易调试<sup>缺点</sup>；</p><p><span class="line1"> 一种比较好的实现方式：<code>动态数组</code></span></p><h2 id="程序的框架搭建" tabindex="-1">程序的框架搭建 <a class="header-anchor" href="#程序的框架搭建" aria-label="Permalink to &quot;程序的框架搭建&quot;">​</a></h2><p><img src="'+i+'" alt="图片"></p>',19),d=[u];function n(_,h,b,m,f,g){return s(),t("div",null,d)}const k=a(p,[["render",n]]);export{x as __pageData,k as default};
