import{_ as t,C as e,o as i,c,k as l,a as n,H as a,Q as s}from"./chunks/framework.5b0c684c.js";const V=JSON.parse('{"title":"执行上下文","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/2-5.md","filePath":"web-core/base/2-5.md","lastUpdated":1729031503000}'),p={name:"web-core/base/2-5.md"},r=s('<h1 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#什么是执行上下文">什么是执行上下文</a><ul><li><a href="#全局执行上下文-global-execution-conte">全局执行上下文（Global Execution Conte）</a></li><li><a href="#函数执行上下文-function-execution-conte">函数执行上下文（Function Execution Conte）</a></li><li><a href="#eval执行上下文-eval-execution-conte">eval执行上下文（Eval Execution Conte）</a></li></ul></li><li><a href="#执行上下文的创建">执行上下文的创建</a><ul><li><a href="#执行上下文this-绑定">执行上下文This 绑定</a></li><li><a href="#词法环境">词法环境</a></li><li><a href="#变量环境">变量环境</a></li></ul></li><li><a href="#执行上下文生命周期">执行上下文生命周期</a></li><li><a href="#执行栈">执行栈</a><ul><li><a href="#执行栈的工作流程">执行栈的工作流程</a></li></ul></li></ul></nav><h2 id="什么是执行上下文" tabindex="-1">什么是执行上下文 <a class="header-anchor" href="#什么是执行上下文" aria-label="Permalink to &quot;什么是执行上下文&quot;">​</a></h2><ul><li>执行上下文（Execution Context）它描述了代码在运行时的环境。每当JavaScript代码执行时，都会创建一个执行上下文。</li><li>执行上下文可以分为三类：全局执行上下文、函数执行上下文和eval执行上下文。</li></ul><h3 id="全局执行上下文-global-execution-conte" tabindex="-1">全局执行上下文（Global Execution Conte） <a class="header-anchor" href="#全局执行上下文-global-execution-conte" aria-label="Permalink to &quot;全局执行上下文（Global Execution Conte）&quot;">​</a></h3><ul><li>这是默认的、最基础的执行上下文。代码在浏览器中运行时，默认的执行上下文是全局执行上下文。</li><li>全局执行上下文会创建一个全局对象（在浏览器中是 window 对象）和一个特殊的变量 this，它指向全局对象。</li></ul><h3 id="函数执行上下文-function-execution-conte" tabindex="-1">函数执行上下文（Function Execution Conte） <a class="header-anchor" href="#函数执行上下文-function-execution-conte" aria-label="Permalink to &quot;函数执行上下文（Function Execution Conte）&quot;">​</a></h3><ul><li>每当一个函数被调用时，都会为该函数创建一个新的执行上下文。</li><li>每个函数都有自己的执行上下文，但只有在函数被调用时才会被创建。</li></ul><h3 id="eval执行上下文-eval-execution-conte" tabindex="-1">eval执行上下文（Eval Execution Conte） <a class="header-anchor" href="#eval执行上下文-eval-execution-conte" aria-label="Permalink to &quot;eval执行上下文（Eval Execution Conte）&quot;">​</a></h3><ul><li>代码在 eval 函数中执行时，会有自己的执行上下文。（不做关注）</li></ul><h2 id="执行上下文的创建" tabindex="-1">执行上下文的创建 <a class="header-anchor" href="#执行上下文的创建" aria-label="Permalink to &quot;执行上下文的创建&quot;">​</a></h2><p>执行上下文在创建阶段中总共发生了三件事情：</p><ol><li>确定 this 的值，也被称为 This 绑定。</li><li>LexicalEnvironment（词法环境） 组件被创建。</li><li>VariableEnvironment（变量环境） 组件被创建。</li></ol><h3 id="执行上下文this-绑定" tabindex="-1">执行上下文This 绑定 <a class="header-anchor" href="#执行上下文this-绑定" aria-label="Permalink to &quot;执行上下文This 绑定&quot;">​</a></h3><ul><li>在全局执行上下文中，this 的值指向全局对象，在浏览器中，this 的值指向 window 对象。</li><li>在函数执行上下文中，this 的值取决于函数的调用方式。如果它被一个对象引用调用，那么 this 的值被设置为该对象，否则 this 的值被设置为全局对象或 undefined（严格模式下）</li></ul><h3 id="词法环境" tabindex="-1">词法环境 <a class="header-anchor" href="#词法环境" aria-label="Permalink to &quot;词法环境&quot;">​</a></h3><p>官方 ES6 文档将词法环境定义为：</p><blockquote><p>词法环境是一种规范类型，基于 ECMAScript 代码的词法嵌套结构来定义标识符与特定变量和函数的关联关系。词法环境由<code>环境记录</code>（environment record）和<code>对外环境引用</code>（outer）组成。</p></blockquote>',18),u={class:"info custom-block"},E=l("p",{class:"custom-block-title"},"环境记录 与 对外环境引用",-1),d=l("code",null,"环境记录",-1),y=l("ul",null,[l("li",null,"声明性环境记录：存储变量、函数和参数。一个函数环境包含声明性环境记录。"),l("li",null,"对象环境记录：用于定义在全局执行上下文中出现的变量和函数的关联。全局环境包含对象环境记录。")],-1),h=l("code",null,"对外环境引用",-1),F=s('<p>词法环境有两种类型：</p><ul><li><code>全局环境</code>：在全局执行上下文中没有外部环境的词法环境（为null）。它拥有一个全局对象（window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量，this 的值指向这个全局对象。</li><li><code>函数环境</code>：在函数中定义的变量被存储在环境记录中。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。 <blockquote><p>对于函数环境而言，环境记录 还包含了一个 arguments 对象，该对象包含了索引和传递给函数的参数之间的映射以及传递给函数的参数的长度（数量）</p></blockquote></li></ul><h3 id="变量环境" tabindex="-1">变量环境 <a class="header-anchor" href="#变量环境" aria-label="Permalink to &quot;变量环境&quot;">​</a></h3><ul><li>它也是一个词法环境，因此它具有上面定义的词法环境的所有属性。其 EnvironmentRecord 包含了由 VariableStatements 在此执行上下文创建的绑定。</li><li>在 ES6 中，LexicalEnvironment 组件和 VariableEnvironment 组件的区别在于前者用于存储函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）绑定。</li></ul><h2 id="执行上下文生命周期" tabindex="-1">执行上下文生命周期 <a class="header-anchor" href="#执行上下文生命周期" aria-label="Permalink to &quot;执行上下文生命周期&quot;">​</a></h2>',5),x={class:"info custom-block"},_=s('<p class="custom-block-title">创建--&gt;执行--&gt;销毁</p><ol><li><code>创建阶段</code>： <ul><li><strong>作用域链</strong>（Scope Chain）：作用域链是一个列表，它包含了当前执行上下文的变量对象和所有父级执行上下文的变量对象。作用域链确保了当前执行上下文可以访问到所有在其作用域链上的变量和函数。</li><li><strong>变量对象</strong>（Variable Object, VO）： <ul><li>函数的参数：如果是函数执行上下文，变量对象会包含函数的参数。</li><li>函数声明：所有的函数声明都会被提升到变量对象的顶部（提升的优先级：函数高于变量）。</li><li>变量声明：所有的变量声明都会被提升到变量对象的顶部，但不会赋值。</li></ul></li><li><strong>this绑定</strong>：在执行上下文中，this的值取决于函数的调用方式： <ul><li>在全局执行上下文中，this指向全局对象。</li><li>在函数执行上下文中，this的值取决于函数的调用方式（例如，作为对象的方法调用时，this指向该对象）。</li></ul></li></ul></li></ol><hr>',3),b={start:"2"},f=l("code",null,"执行阶段",-1),C=l("hr",null,null,-1),g=l("ol",{start:"3"},[l("li",null,[l("code",null,"销毁阶段"),n("：执行上下文被销毁，内存被释放。")])],-1),q=l("div",{class:"info custom-block"},[l("p",{class:"custom-block-title"},"代码示例"),l("div",{class:"language-javascript vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"javascript"),l("pre",{class:"shiki github-dark vp-code-dark"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#F97583"}},"var"),l("span",{style:{color:"#E1E4E8"}}," a "),l("span",{style:{color:"#F97583"}},"="),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#79B8FF"}},"10"),l("span",{style:{color:"#E1E4E8"}},";")]),n(`
`),l("span",{class:"line"},[l("span",{style:{color:"#F97583"}},"function"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#B392F0"}},"foo"),l("span",{style:{color:"#E1E4E8"}},"() {")]),n(`
`),l("span",{class:"line"},[l("span",{style:{color:"#E1E4E8"}},"    "),l("span",{style:{color:"#F97583"}},"var"),l("span",{style:{color:"#E1E4E8"}}," b "),l("span",{style:{color:"#F97583"}},"="),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#79B8FF"}},"20"),l("span",{style:{color:"#E1E4E8"}},";")]),n(`
`),l("span",{class:"line"},[l("span",{style:{color:"#E1E4E8"}},"    console."),l("span",{style:{color:"#B392F0"}},"log"),l("span",{style:{color:"#E1E4E8"}},"(a "),l("span",{style:{color:"#F97583"}},"+"),l("span",{style:{color:"#E1E4E8"}}," b);")]),n(`
`),l("span",{class:"line"},[l("span",{style:{color:"#E1E4E8"}},"}")]),n(`
`),l("span",{class:"line"},[l("span",{style:{color:"#B392F0"}},"foo"),l("span",{style:{color:"#E1E4E8"}},"();")])])]),l("pre",{class:"shiki github-light vp-code-light"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#D73A49"}},"var"),l("span",{style:{color:"#24292E"}}," a "),l("span",{style:{color:"#D73A49"}},"="),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#005CC5"}},"10"),l("span",{style:{color:"#24292E"}},";")]),n(`
`),l("span",{class:"line"},[l("span",{style:{color:"#D73A49"}},"function"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#6F42C1"}},"foo"),l("span",{style:{color:"#24292E"}},"() {")]),n(`
`),l("span",{class:"line"},[l("span",{style:{color:"#24292E"}},"    "),l("span",{style:{color:"#D73A49"}},"var"),l("span",{style:{color:"#24292E"}}," b "),l("span",{style:{color:"#D73A49"}},"="),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#005CC5"}},"20"),l("span",{style:{color:"#24292E"}},";")]),n(`
`),l("span",{class:"line"},[l("span",{style:{color:"#24292E"}},"    console."),l("span",{style:{color:"#6F42C1"}},"log"),l("span",{style:{color:"#24292E"}},"(a "),l("span",{style:{color:"#D73A49"}},"+"),l("span",{style:{color:"#24292E"}}," b);")]),n(`
`),l("span",{class:"line"},[l("span",{style:{color:"#24292E"}},"}")]),n(`
`),l("span",{class:"line"},[l("span",{style:{color:"#6F42C1"}},"foo"),l("span",{style:{color:"#24292E"}},"();")])])])]),l("p",null,"1.全局执行上下文："),l("ul",null,[l("li",null,[n("创建阶段： "),l("ul",null,[l("li",null,[n("变量对象：{ a: undefined, foo: "),l("code",null,"<function>"),n(" }")]),l("li",null,"作用域链：[全局变量对象]"),l("li",null,"this：指向全局对象")])]),l("li",null,[n("执行阶段： "),l("ul",null,[l("li",null,"变量 a 被赋值为 10"),l("li",null,"函数 foo 被定义")])])]),l("ol",null,[l("li",null,[n("函数执行上下文（调用 "),l("code",null,"foo"),n(" 时）： "),l("ul",null,[l("li",null,[n("创建阶段： "),l("ul",null,[l("li",{"b:":"",undefined:""},"变量对象："),l("li",null,"作用域链：[函数变量对象, 全局变量对象]"),l("li",null,"this：取决于调用方式（在这里是全局对象）")])])])]),l("li",null,[n("执行阶段： "),l("ul",null,[l("li",null,"变量 b 被赋值为 20"),l("li",null,"执行 console.log(a + b)，输出 30")])])])],-1),v=s(`<h2 id="执行栈" tabindex="-1">执行栈 <a class="header-anchor" href="#执行栈" aria-label="Permalink to &quot;执行栈&quot;">​</a></h2><p>在 JavaScript 中，执行上下文的执行栈（Execution Stack），也称为调用栈（Call Stack），是一个用于管理执行上下文的栈结构。它遵循后进先出（LIFO, Last In First Out）的原则，用于跟踪函数调用和执行顺序。</p><h3 id="执行栈的工作流程" tabindex="-1">执行栈的工作流程 <a class="header-anchor" href="#执行栈的工作流程" aria-label="Permalink to &quot;执行栈的工作流程&quot;">​</a></h3><ol><li>全局执行上下文： <ul><li>当 JavaScript 引擎开始执行代码时，会首先创建一个全局执行上下文，并将其推入执行栈的底部。</li><li>全局执行上下文在整个应用程序的生命周期内始终存在。</li></ul></li><li>函数执行上下文： <ul><li>每当一个函数被调用时，JavaScript 引擎会为该函数创建一个新的执行上下文，并将其推入执行栈的顶部。</li><li>当函数执行完毕后，JavaScript 引擎会将该函数的执行上下文从执行栈中弹出，控制权返回到栈中的下一个执行上下文。</li></ul></li></ol><div class="info custom-block"><p class="custom-block-title">代码示例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">firstFunction</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Inside firstFunction&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">secondFunction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Exiting firstFunction&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">secondFunction</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Inside secondFunction&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">thirdFunction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Exiting secondFunction&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thirdFunction</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Inside thirdFunction&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Starting execution&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">firstFunction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Ending execution&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">firstFunction</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Inside firstFunction&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">secondFunction</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Exiting firstFunction&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">secondFunction</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Inside secondFunction&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">thirdFunction</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Exiting secondFunction&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thirdFunction</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Inside thirdFunction&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Starting execution&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">firstFunction</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Ending execution&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>执行栈执行过程</strong></p><ol><li>初始状态： <ul><li>执行栈：[]</li><li>全局执行上下文被创建并推入执行栈。</li><li>执行栈：[Global Execution Context]</li></ul></li><li>执行 <code>console.log(&quot;Starting execution&quot;)</code>： <ul><li>输出：Starting execution</li><li>执行栈：[Global Execution Context]</li></ul></li><li>调用 <code>firstFunction()</code>： <ul><li>firstFunction 的执行上下文被创建并推入执行栈。</li><li>执行栈：[Global Execution Context, firstFunction Execution Context]</li><li>输出：Inside firstFunction</li></ul></li><li>调用 <code>secondFunction()</code>： <ul><li>secondFunction 的执行上下文被创建并推入执行栈。</li><li>执行栈：[Global Execution Context, firstFunction Execution Context, secondFunction Execution Context]</li><li>输出：Inside secondFunction</li></ul></li><li>调用 <code>thirdFunction()</code>： <ul><li>thirdFunction 的执行上下文被创建并推入执行栈。</li><li>执行栈：[Global Execution Context, firstFunction Execution Context, secondFunction Execution Context, thirdFunction Execution Context]</li><li>输出：Inside thirdFunction</li><li>thirdFunction 执行完毕后，其执行上下文从执行栈中弹出。</li><li>执行栈：[Global Execution Context, firstFunction Execution Context, secondFunction Execution Context]</li></ul></li><li>返回到 <code>secondFunction</code>： <ul><li>输出：Exiting secondFunction</li><li>secondFunction 执行完毕后，其执行上下文从执行栈中弹出。</li><li>执行栈：[Global Execution Context, firstFunction Execution Context]</li></ul></li><li>返回到 <code>firstFunction</code>： <ul><li>输出：Exiting firstFunction</li><li>firstFunction 执行完毕后，其执行上下文从执行栈中弹出。</li><li>执行栈：[Global Execution Context]</li></ul></li><li>执行 <code>console.log(&quot;Ending execution&quot;)</code>： <ul><li>输出：Ending execution</li><li>执行栈：[Global Execution Context]</li></ul></li></ol></div>`,5);function m(k,S,T,B,A,P){const o=e("lines");return i(),c("div",null,[r,l("div",u,[E,l("p",null,[d,n("："),a(o,{text:"是存储变量和函数声明的实际位置"}),n("。它有两种类型。")]),y,l("p",null,[h,n("： "),a(o,{text:"意味着它可以访问其外部词法环境"}),n("。")])]),F,l("div",x,[_,l("ol",b,[l("li",null,[f,n("："),a(o,{text:"创建阶段会根据一定的规则创建一个有序执行栈"}),n("（这个规则：词法环境），代码会被逐行执行，变量和函数会被赋值，代码逻辑会被执行。")])]),C,g]),q,v])}const D=t(p,[["render",m]]);export{V as __pageData,D as default};
