import{_ as o,C as l,o as p,c as t,k as s,a,H as n,Q as c}from"./chunks/framework.5b0c684c.js";const _=JSON.parse('{"title":"ArrayBuffer","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/1-10.md","filePath":"web-core/base/1-10.md","lastUpdated":1729031503000}'),y={name:"web-core/base/1-10.md"},i=s("h1",{id:"arraybuffer",tabindex:"-1"},[a("ArrayBuffer "),s("a",{class:"header-anchor",href:"#arraybuffer","aria-label":'Permalink to "ArrayBuffer"'},"​")],-1),f=c(`<ul><li>它是一个字节数组，通常在其他语言中称为“byte array”。ArrayBuffer 是一个可转移对象。</li><li>你不能直接操作 ArrayBuffer 中的内容；而是要通过<code>类型化数组对象（TypedArray）</code>或 <code>DataView 对象</code>来操作，它们会将缓冲区中的数据表示为特定的格式，并通过这些格式来读写缓冲区的内容。</li><li>ArrayBuffer() 构造函数创建一个以字节为单位的给定长度的新 ArrayBuffer。你也可以从现有的数据（例如，从 Base64 字符串或者从本地文件）获取数组缓冲区。</li></ul><h2 id="arraybuffer-大小调整" tabindex="-1">ArrayBuffer 大小调整 <a class="header-anchor" href="#arraybuffer-大小调整" aria-label="Permalink to &quot;ArrayBuffer 大小调整&quot;">​</a></h2><ol><li>ArrayBuffer 对象可以通过在调用 ArrayBuffer() 构造函数时包含 maxByteLength 选项来使其大小可变。</li><li>通过访问其 resizable 和 maxByteLength 属性来查询 ArrayBuffer 的大小是否可变以及其最大值。</li><li>可以通过调用 resize() 为可变大小的 ArrayBuffer 分配一个新的大小。新的字节会被初始化为 0。</li></ol><blockquote><p>这些特性使得调整 ArrayBuffer 的大小更加高效——否则，你必须使用新的大小创建一个缓冲副本。这也使得 JavaScript 在这方面与 WebAssembly 相当。</p></blockquote><h2 id="arraybuffer-传输" tabindex="-1">ArrayBuffer 传输 <a class="header-anchor" href="#arraybuffer-传输" aria-label="Permalink to &quot;ArrayBuffer 传输&quot;">​</a></h2><ol><li>ArrayBuffer 对象可以在不同的执行上下文之间传输，就像 Web Worker 或 Service Worker 那样，使用结构化克隆算法。 <ul><li>通过在 Worker.postMessage() 或 ServiceWorker.postMessage() 的调用中传入 ArrayBuffer 对象作为可转移对象来完成。</li><li>在纯 JavaScript 中，也可以使用 transfer() 或 transferToFixedLength() 方法来转移内存的所有权。</li></ul></li><li>当一个 ArrayBuffer 对象被传输时，它原来的副本会被分离（detached），这意味着它不再可用。在任何时候，只有一个 ArrayBuffer 的副本实际拥有底层内存。分离的缓冲区具有以下行为： <ul><li>byteLength 变为 0（在缓冲区和关联的类型化数组视图中）。</li><li>所有实例方法，比如 resize() 和 slice()，会在调用时抛出 TypeError。关联的类型化数组视图的方法也会抛出 TypeError。</li><li>你可以通过其 detached 属性来检查 ArrayBuffer 是否已分离。</li></ul></li></ol><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(length)</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(length, options)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(length)</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(length, options)</span></span></code></pre></div><ul><li><p><strong>参数</strong>：</p><ul><li><code>length</code>：要创建的数组缓冲区的大小（以字节为单位）。<br></li><li><code>options[可选]</code>：一个对象，该对象可以包含：maxByteLength 可选（数组缓冲区可以调整到的最大大小，以字节为单位）。</li></ul></li><li><p><strong>返回</strong>：一个指定大小的新 ArrayBuffer 对象，其 maxByteLength 属性设置为指定的 maxByteLength（如果指定了该值），其内容被初始化为 0。</p></li><li><p><strong>异常</strong>：</p><ul><li>length 或 maxByteLength 大于 Number.MAX_SAFE_INTEGER（≥ 253）或者为负数。</li><li>length 大于 maxByteLength。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建一个 8 字节的缓冲区，它可以调整到的最大长度为 16 字节</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, { maxByteLength: </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#6A737D;">// 使用resize 调整到的最大长度为 16 字节</span></span>
<span class="line"><span style="color:#E1E4E8;">buffer.</span><span style="color:#B392F0;">resize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 8 字节的缓冲区，它可以调整到的最大长度为 16 字节</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, { maxByteLength: </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#6A737D;">// 使用resize 调整到的最大长度为 16 字节</span></span>
<span class="line"><span style="color:#24292E;">buffer.</span><span style="color:#6F42C1;">resize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">建议</p><p>推荐将 maxByteLength 设置为使用场景下最小的大小。它不应超过 1073741824（1GB），以减少内存溢出风险。</p></div><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><h2 id="arraybuffer-isview" tabindex="-1">ArrayBuffer.isView() <a class="header-anchor" href="#arraybuffer-isview" aria-label="Permalink to &quot;ArrayBuffer.isView()&quot;">​</a></h2><ul><li><strong>描述</strong>：判断传入值是否是 ArrayBuffer 视图之一，例如类型化数组对象或 DataView。</li><li><strong>参数</strong>：要检查的值。</li><li><strong>返回</strong>：如果给定参数是 ArrayBuffer 视图之一则返回 true；否则返回 false。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">([]); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">({}); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dv</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">(dv) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayBuffer.</span><span style="color:#B392F0;">isView</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">([]); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">({}); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dv</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">(dv) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">ArrayBuffer.</span><span style="color:#6F42C1;">isView</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><h2 id="arraybuffer-prototype-bytelength" tabindex="-1">ArrayBuffer.prototype.byteLength <a class="header-anchor" href="#arraybuffer-prototype-bytelength" aria-label="Permalink to &quot;ArrayBuffer.prototype.byteLength&quot;">​</a></h2><ul><li><strong>描述</strong>：该属性返回该数组缓冲区的长度（以字节为单位）。</li></ul><h2 id="arraybuffer-prototype-detached" tabindex="-1">ArrayBuffer.prototype.detached <a class="header-anchor" href="#arraybuffer-prototype-detached" aria-label="Permalink to &quot;ArrayBuffer.prototype.detached&quot;">​</a></h2><ul><li><strong>描述</strong>：该属性返回一个布尔值，指示该缓冲区是否已经分离（传输）</li></ul><h2 id="arraybuffer-prototype-maxbytelength" tabindex="-1">ArrayBuffer.prototype.maxByteLength <a class="header-anchor" href="#arraybuffer-prototype-maxbytelength" aria-label="Permalink to &quot;ArrayBuffer.prototype.maxByteLength&quot;">​</a></h2><ul><li><strong>描述</strong>：该属性返回该数组缓冲区可调整到的最大长度（以字节为单位）。</li></ul><h2 id="arraybuffer-prototype-resizable" tabindex="-1">ArrayBuffer.prototype.resizable <a class="header-anchor" href="#arraybuffer-prototype-resizable" aria-label="Permalink to &quot;ArrayBuffer.prototype.resizable&quot;">​</a></h2><ul><li><strong>描述</strong>：该属性返回此数组缓冲区是否可以调整大小。</li></ul><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h2 id="arraybuffer-prototype-resize" tabindex="-1">ArrayBuffer.prototype.resize() <a class="header-anchor" href="#arraybuffer-prototype-resize" aria-label="Permalink to &quot;ArrayBuffer.prototype.resize()&quot;">​</a></h2><ul><li><strong>描述</strong>：调整为指定的大小，以字节为单位。 <ol><li>将 ArrayBuffer 调整为 newLength 参数指定的大小，前提是该 ArrayBuffer 是可调整大小的并且新的大小小于或等于该 ArrayBuffer 的 maxByteLength。新字节被初始化为 0。</li><li>注意，你可以使用 resize() 来缩小和增大 ArrayBuffer——即使 newLength 小于 ArrayBuffer 的当前 byteLength。</li></ol></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, { maxByteLength: </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (buffer.resizable) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;缓冲区大小是可调整的！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  buffer.</span><span style="color:#B392F0;">resize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, { maxByteLength: </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (buffer.resizable) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;缓冲区大小是可调整的！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  buffer.</span><span style="color:#6F42C1;">resize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="arraybuffer-prototype-slice" tabindex="-1">ArrayBuffer.prototype.slice() <a class="header-anchor" href="#arraybuffer-prototype-slice" aria-label="Permalink to &quot;ArrayBuffer.prototype.slice()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个新的 ArrayBuffer 实例，其包含原 ArrayBuffer 实例中从 begin 开始（包含）到 end 结束（不含）的所有字节的副本。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(start)</span></span>
<span class="line"><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(start, end)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(start)</span></span>
<span class="line"><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(start, end)</span></span></code></pre></div><ul><li><strong>参数</strong>： <ul><li><code>start[可选]</code>：要开始提取的位置索引（从 0 开始），将被转换为整数。 <ul><li>负数索引将会从缓冲区末尾开始计算——如果 start &lt; 0，那么将会使用 start + buffer.length。</li><li>如果 start &lt; -buffer.length 或省略了 start，则会使用 0。</li><li>如果 start &gt;= buffer.length，则不会提取任何内容。</li></ul></li><li><code>end[可选]</code>：要结束提取的位置索引（从 0 开始），将被转换为整数。slice() 提取到但不包括 end。 <ul><li>负数索引将会从缓冲区末尾开始计算——如果 end &lt; 0，那么将会使用 end + buffer.length。</li><li>如果 end &lt; -buffer.length，则会使用 0。</li><li>如果 end &gt;= buffer.length 或省略了 end，则会使用 buffer.length，则会导致直到末尾的所有元素都被提取。</li><li>如果标准化后的 end 位置在 start 位置之前，则不会提取任何内容。</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 复制一个 ArrayBuffer</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> buf1.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 复制一个 ArrayBuffer</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> buf1.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span></code></pre></div>`,33),E={id:"arraybuffer-prototype-transfer",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#arraybuffer-prototype-transfer","aria-label":'Permalink to "ArrayBuffer.prototype.transfer()<Badge text="实验"/>"'},"​",-1),d=s("ul",null,[s("li",null,[s("strong",null,"描述"),a("：创建一个内容与该缓冲区相同的新 ArrayBuffer 实例，然后将当前缓冲区分离。")])],-1),h={id:"arraybuffer-prototype-transfertofixedlength",tabindex:"-1"},B=s("a",{class:"header-anchor",href:"#arraybuffer-prototype-transfertofixedlength","aria-label":'Permalink to "ArrayBuffer.prototype.transferToFixedLength()<Badge text="实验"/>"'},"​",-1),b=s("ul",null,[s("li",null,[s("strong",null,"描述"),a("：创建一个不可调整大小的新 ArrayBuffer 对象，该对象与此缓冲区具有相同的字节内容，然后将此缓冲区分离。")])],-1);function A(g,F,C,v,m,k){const r=l("lines"),e=l("Badge");return p(),t("div",null,[i,s("p",null,[a("ArrayBuffer对象用来表示通用的"),n(r,{text:"“原始二进制数据缓冲区”"}),a("。")]),f,s("h2",E,[a("ArrayBuffer.prototype.transfer()"),n(e,{text:"实验"}),a(),u]),d,s("h2",h,[a("ArrayBuffer.prototype.transferToFixedLength()"),n(e,{text:"实验"}),a(),B]),b])}const D=o(y,[["render",A]]);export{_ as __pageData,D as default};
