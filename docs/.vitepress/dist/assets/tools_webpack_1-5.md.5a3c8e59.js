import{_ as s,o as a,c as l,Q as o}from"./chunks/framework.5b0c684c.js";const u=JSON.parse('{"title":"自定义loader","description":"","frontmatter":{},"headers":[],"relativePath":"tools/webpack/1-5.md","filePath":"tools/webpack/1-5.md","lastUpdated":1729031503000}'),n={name:"tools/webpack/1-5.md"},e=o(`<h1 id="自定义loader" tabindex="-1">自定义loader <a class="header-anchor" href="#自定义loader" aria-label="Permalink to &quot;自定义loader&quot;">​</a></h1><p>xxx.loader.js</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> source.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;你好&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> source.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;你好&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>该loader就是对我们加载到的资源的一个处理过程</li><li>返回的是一个函数,函数的参数就是需要处理的资源, 通过返回值进行输出处理好的资源, 结果必须是javascript 代码</li><li>loader更像是一个管道, 可以使用多个loader配合处理资源</li></ul>`,4),p=[e];function t(r,c,E,i,y,d){return a(),l("div",null,p)}const h=s(n,[["render",t]]);export{u as __pageData,h as default};
