import{_ as p,C as o,o as e,c,k as s,a,H as t,Q as n}from"./chunks/framework.5b0c684c.js";const D=JSON.parse('{"title":"对象拓展","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/es6/1-8.md","filePath":"web-core/es6/1-8.md","lastUpdated":1729031503000}'),r={name:"web-core/es6/1-8.md"},E=n(`<h1 id="对象拓展" tabindex="-1">对象拓展 <a class="header-anchor" href="#对象拓展" aria-label="Permalink to &quot;对象拓展&quot;">​</a></h1><h2 id="属性的简洁表示" tabindex="-1">属性的简洁表示 <a class="header-anchor" href="#属性的简洁表示" aria-label="Permalink to &quot;属性的简洁表示&quot;">​</a></h2><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">baz</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { foo };</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">baz</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {foo: foo};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">baz</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo };</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">baz</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {foo: foo};</span></span></code></pre></div><h2 id="属性名表达式" tabindex="-1">属性名表达式 <a class="header-anchor" href="#属性名表达式" aria-label="Permalink to &quot;属性名表达式&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">obj.foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">obj[</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bc&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> lastWord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;last word&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;first word&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [lastWord]: </span><span style="color:#9ECBFF;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">obj.foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">obj[</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bc&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> lastWord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;last word&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;first word&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [lastWord]: </span><span style="color:#032F62;">&#39;world&#39;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p><code>属性名表达式</code>与<code>简洁表示法</code>，不能同时使用，会报错。</p><p>属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]，注意属性覆盖。</p></div><h2 id="对象方法-name-属性" tabindex="-1">对象方法 name 属性 <a class="header-anchor" href="#对象方法-name-属性" aria-label="Permalink to &quot;对象方法 name 属性&quot;">​</a></h2><ul><li>函数的name属性，返回函数名。对象方法也是函数，因此也有name属性。</li><li>如果对象的方法使用了取值函数（getter）和存值函数（setter），则name属性不是在该方法上面，而是该方法的属性的描述对象的get和set属性上面，返回值是方法名前加上get和set。</li><li>如果对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sayName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">person.sayName.name   </span><span style="color:#6A737D;">// &quot;sayName&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">descriptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">getOwnPropertyDescriptor</span><span style="color:#E1E4E8;">(obj, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">descriptor.get.name </span><span style="color:#6A737D;">// &quot;get foo&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;description&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [key1]() {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  [key2]() {},</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">obj[key1].name </span><span style="color:#6A737D;">// &quot;[description]&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">obj[key2].name </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">sayName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">person.sayName.name   </span><span style="color:#6A737D;">// &quot;sayName&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">descriptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">getOwnPropertyDescriptor</span><span style="color:#24292E;">(obj, </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">descriptor.get.name </span><span style="color:#6A737D;">// &quot;get foo&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;description&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [key1]() {},</span></span>
<span class="line"><span style="color:#24292E;">  [key2]() {},</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">obj[key1].name </span><span style="color:#6A737D;">// &quot;[description]&quot;</span></span>
<span class="line"><span style="color:#24292E;">obj[key2].name </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre></div><h2 id="对象属性的可枚举性和遍历" tabindex="-1">对象属性的可枚举性和遍历 <a class="header-anchor" href="#对象属性的可枚举性和遍历" aria-label="Permalink to &quot;对象属性的可枚举性和遍历&quot;">​</a></h2><p>ES6 规定，所有 Class 的原型的方法都是不可枚举的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">getOwnPropertyDescriptor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {}}.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">).enumerable</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">getOwnPropertyDescriptor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {}}.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">).enumerable</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span></code></pre></div><h2 id="super-关键字" tabindex="-1">super 关键字 <a class="header-anchor" href="#super-关键字" aria-label="Permalink to &quot;super 关键字&quot;">​</a></h2>`,14),y=s("li",null,[a("关键字用于访问对象字面量或类的原型"),s("code",null,"[[Prototype]]"),a("上的属性，或调用父类的构造函数。")],-1),i=n(`<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">proto</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo: </span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.foo;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 将 proto 设置为 obj 的原型对象</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">setPrototypeOf</span><span style="color:#E1E4E8;">(obj, proto);</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;hello&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">proto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  foo: </span><span style="color:#032F62;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  foo: </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.foo;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 将 proto 设置为 obj 的原型对象</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">setPrototypeOf</span><span style="color:#24292E;">(obj, proto);</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;hello&quot;</span></span></code></pre></div><blockquote><p>注意，super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。</p></blockquote><h2 id="对象的拓展运算符" tabindex="-1">对象的拓展运算符 <a class="header-anchor" href="#对象的拓展运算符" aria-label="Permalink to &quot;对象的拓展运算符&quot;">​</a></h2><ul><li>合并对象</li><li>解构赋值</li><li>复制对象 .....</li></ul><h2 id="链式判断运算符" tabindex="-1">链式判断运算符<code>?.</code> <a class="header-anchor" href="#链式判断运算符" aria-label="Permalink to &quot;链式判断运算符\`?.\`&quot;">​</a></h2><p>ES2020 引入了“链判断运算符”，简化三元运算写法。以及避免一些情况下代码报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// a?.b 等同于 a == null ? undefined : a.b</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// a?.b 等同于 a == null ? undefined : a.b</span></span></code></pre></div><h2 id="null-判断运算符" tabindex="-1">Null 判断运算符 <code>??</code> <a class="header-anchor" href="#null-判断运算符" aria-label="Permalink to &quot;Null 判断运算符 \`??\`&quot;">​</a></h2><p>ES2020 引入了一个新的 Null 判断运算符<code>??</code>。它的行为类似<code>||</code>，但是只有运算符左侧的值为<code>null</code>或<code>undefined</code>时，才会返回右侧的值。</p><ul><li><code>??</code>有一个运算优先级问题，它与<code>&amp;&amp;</code>和<code>||</code>的优先级孰高孰低。如果多个逻辑运算符一起使用，必须用括号表明优先级，否则会报错。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">lhs </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> middle </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> rhs </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(lhs </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> middle) </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> rhs; </span><span style="color:#6A737D;">// 不报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">lhs </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> rhs </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(lhs </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> middle) </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> rhs; </span><span style="color:#6A737D;">// 不报错</span></span></code></pre></div><h2 id="对象新增静态方法" tabindex="-1">对象新增静态方法 <a class="header-anchor" href="#对象新增静态方法" aria-label="Permalink to &quot;对象新增静态方法&quot;">​</a></h2><ul><li>Object.is()</li><li>Object.assign()</li><li>Object.getOwnPropertyDescriptors()</li><li>Object.setPrototypeOf()</li><li>Object.getPrototypeOf()</li><li>Object.keys()</li><li>Object.values()</li><li>Object.entries()</li><li>Object.fromEntries()</li></ul>`,13);function d(F,h,u,b,C,m){const l=o("lines");return e(),c("div",null,[E,s("ul",null,[y,s("li",null,[a("this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，"),t(l,{text:"指向当前对象的原型对象"}),a("。")])]),i])}const A=p(r,[["render",d]]);export{D as __pageData,A as default};
