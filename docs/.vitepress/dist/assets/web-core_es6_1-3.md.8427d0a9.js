import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.5b0c684c.js";const d=JSON.parse('{"title":"字符串拓展","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/es6/1-3.md","filePath":"web-core/es6/1-3.md","lastUpdated":1729031503000}'),p={name:"web-core/es6/1-3.md"},o=l(`<h1 id="字符串拓展" tabindex="-1">字符串拓展 <a class="header-anchor" href="#字符串拓展" aria-label="Permalink to &quot;字符串拓展&quot;">​</a></h1><h2 id="字符的-unicode-表示法" tabindex="-1">字符的 Unicode 表示法 <a class="header-anchor" href="#字符的-unicode-表示法" aria-label="Permalink to &quot;字符的 Unicode 表示法&quot;">​</a></h2><ul><li>ES6 加强了对 Unicode 的支持，允许采用<code>\\uxxxx</code>形式表示一个字符，其中xxxx表示字符的 Unicode 码点。</li><li>只限于码点在<code>\\u0000~\\uFFFF</code>之间的字符。超出这个范围的字符，必须用两个<code>双字节的形式表示</code>，或者将码点放入大括号，就能正确解读该字符。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 使用 Unicode 表示 &quot;𠮷&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\u20BB</span><span style="color:#9ECBFF;">7&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// &quot; 7&quot; 直接使用 × </span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\uD842\\uDFB7</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// &quot;𠮷&quot; 使用双字节 √ </span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\u{20BB7}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// &quot;𠮷&quot; 使用 {} √</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用 Unicode 表示 &quot;𠮷&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u20BB</span><span style="color:#032F62;">7&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// &quot; 7&quot; 直接使用 × </span></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\uD842\\uDFB7</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// &quot;𠮷&quot; 使用双字节 √ </span></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u{20BB7}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// &quot;𠮷&quot; 使用 {} √</span></span></code></pre></div><blockquote><p>上面示例 &quot;𠮷&quot; 的表示方式，由于<code>20BB7</code> 大于 <code>FFFF</code>，javascript会理解成<code>\\u20BB+7</code>，而<code>\\u20BB</code>是一个不可打印字符，所以只会显示一个空格，后面跟着一个 7。</p></blockquote><h2 id="字符及字符转义" tabindex="-1">字符及字符转义 <a class="header-anchor" href="#字符及字符转义" aria-label="Permalink to &quot;字符及字符转义&quot;">​</a></h2><ul><li>JavaScript字符串允许直接输入字符，或者字符的转义形式，两者是等价的。如：<code>&#39;中&#39; === &#39;\\u4e2d&#39;</code></li><li>JavaScript 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。 <ul><li>U+005C：反斜杠（reverse solidus）</li><li>U+000D：回车（carriage return）</li><li>U+2028：行分隔符（line separator）</li><li>U+2029：段分隔符（paragraph separator）</li><li>U+000A：换行符（line feed）</li></ul></li></ul><p>字符串里面不能直接包含反斜杠（被转义，得不到想要的结果，或者报错），一定要转义写成<code>\\\\</code>或者<code>\\u005c</code>。</p><div class="info custom-block"><p class="custom-block-title">注意</p><ol><li><p>JSON 格式允许字符串里面直接使用 U+2028（行分隔符）和 U+2029（段分隔符），这样一来，服务器输出的 JSON 被JSON.parse解析，就有可能直接报错。</p></li><li><p>在ES2019 允许 JavaScript 字符串直接输入 U+2028（行分隔符）和 U+2029（段分隔符）。</p></li><li><p>但正则表达式依然不允许直接输入 U+2028（行分隔符）和 U+2029（段分隔符）这两个字符。</p></li></ol></div><h2 id="json-stringify" tabindex="-1">JSON.stringify() <a class="header-anchor" href="#json-stringify" aria-label="Permalink to &quot;JSON.stringify()&quot;">​</a></h2><p><strong>存在问题</strong></p><p>根据标准，JSON 数据必须是 UTF-8 编码。但是，现在的JSON.stringify()方法有可能返回不符合 UTF-8 标准的字符串。</p><blockquote><p>UTF-8 标准规定，0xD800到0xDFFF之间的码点，不能单独使用，必须配对使用。 比如，\\uD834\\uDF06是两个码点，但是必须放在一起配对使用，代表字符𝌆。这是为了表示码点大于0xFFFF的字符的一种变通方法。单独使用\\uD834和\\uDFO6这两个码点是不合法的，或者颠倒顺序也不行因为\\uDF06\\uD834并没有对应的字符。</p></blockquote><p><strong>解决方案</strong></p><p>ES2019 改变了JSON.stringify()的行为，确保返回是合法的 UTF-8 字符。</p><blockquote><p>如果遇到0xD800到0xDFFF之间的单个码点，或者不存在的配对形式，它会返回转义字符串，留给应用自己决定下一步的处理。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u{D834}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;&quot;\\\\uD834&quot;&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\uDF06\\uD834</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;&quot;\\\\udf06\\\\ud834&quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u{D834}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;&quot;\\\\uD834&quot;&quot;</span></span>
<span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\uDF06\\uD834</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;&quot;\\\\udf06\\\\ud834&quot;&quot;</span></span></code></pre></div><h2 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串&quot;">​</a></h2><p>模板字符串（template string）是增强版的字符串，用反引号 （\`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">\`string text\`</span></span>
<span class="line"><span style="color:#9ECBFF;">\`string text line 1</span></span>
<span class="line"><span style="color:#9ECBFF;"> string text line 2\`</span></span>
<span class="line"><span style="color:#9ECBFF;">\`string text \${</span><span style="color:#E1E4E8;">expression</span><span style="color:#9ECBFF;">} string text\`</span></span>
<span class="line"><span style="color:#B392F0;">tagFunction</span><span style="color:#9ECBFF;">\`string text \${</span><span style="color:#E1E4E8;">expression</span><span style="color:#9ECBFF;">} string text\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">\`string text\`</span></span>
<span class="line"><span style="color:#032F62;">\`string text line 1</span></span>
<span class="line"><span style="color:#032F62;"> string text line 2\`</span></span>
<span class="line"><span style="color:#032F62;">\`string text \${</span><span style="color:#24292E;">expression</span><span style="color:#032F62;">} string text\`</span></span>
<span class="line"><span style="color:#6F42C1;">tagFunction</span><span style="color:#032F62;">\`string text \${</span><span style="color:#24292E;">expression</span><span style="color:#032F62;">} string text\`</span></span></code></pre></div><ul><li>通过使用占位符 \${expression} 嵌入待替换的表达式，大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。表达式执行完成厚，强制转换为字符串。</li><li>若要转义模板字面量中的反引号（\`），需在反引号之前加一个反斜杠（\\）。</li><li>字符串字面量中的转义序列都是允许的，任何其他格式不正确的转义序列都是语法错误。 <blockquote><p>\\ 后跟 0 以外的任何十进制数字，语法报错；<br> \\x 后跟两位以下十六进制数字，语法报错；<br> \\u 后不跟 {}，并且后跟四个以下十六进制数字，语法报错；</p></blockquote></li></ul><h3 id="模板编译" tabindex="-1">模板编译 <a class="header-anchor" href="#模板编译" aria-label="Permalink to &quot;模板编译&quot;">​</a></h3><p>通过模板字符串，生成正式模板的实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;% for(let i=0; i &lt; data.supplies.length; i++) { %&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;li&gt;&lt;%= data.supplies[i] %&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;% } %&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;% for(let i=0; i &lt; data.supplies.length; i++) { %&gt;</span></span>
<span class="line"><span style="color:#032F62;">    &lt;li&gt;&lt;%= data.supplies[i] %&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;% } %&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">;</span></span></code></pre></div><p>该模板使用<code>&lt;%...%&gt;</code>放置 JavaScript 代码，使用<code>&lt;%= ... %&gt;</code>输出 JavaScript 表达式。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// compile 封装</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">template</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">evalExpr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&lt;%=(</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">+?</span><span style="color:#DBEDFF;">)%&gt;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">expr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&lt;%(</span><span style="color:#79B8FF;">[\\s\\S]</span><span style="color:#F97583;">+?</span><span style="color:#DBEDFF;">)%&gt;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(evalExpr, </span><span style="color:#9ECBFF;">&#39;\`); </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  echo( $1 ); </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  echo(\`&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(expr, </span><span style="color:#9ECBFF;">&#39;\`); </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> $1 </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  echo(\`&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;echo(\`&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> template </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;\`);&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> script </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`(function parse(data){</span></span>
<span class="line"><span style="color:#9ECBFF;">    let output = &quot;&quot;;</span></span>
<span class="line"><span style="color:#9ECBFF;">    function echo(html){</span></span>
<span class="line"><span style="color:#9ECBFF;">      output += html;</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">    \${</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">template</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">    return output;</span></span>
<span class="line"><span style="color:#9ECBFF;">  })\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> script;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// compile 封装</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span><span style="color:#E36209;">template</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">evalExpr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /&lt;%=(</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">+?</span><span style="color:#032F62;">)%&gt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">expr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /&lt;%(</span><span style="color:#005CC5;">[\\s\\S]</span><span style="color:#D73A49;">+?</span><span style="color:#032F62;">)%&gt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(evalExpr, </span><span style="color:#032F62;">&#39;\`); </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  echo( $1 ); </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  echo(\`&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(expr, </span><span style="color:#032F62;">&#39;\`); </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> $1 </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  echo(\`&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;echo(\`&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> template </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;\`);&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> script </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">\`(function parse(data){</span></span>
<span class="line"><span style="color:#032F62;">    let output = &quot;&quot;;</span></span>
<span class="line"><span style="color:#032F62;">    function echo(html){</span></span>
<span class="line"><span style="color:#032F62;">      output += html;</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">    \${</span><span style="color:#032F62;"> </span><span style="color:#24292E;">template</span><span style="color:#032F62;"> </span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">    return output;</span></span>
<span class="line"><span style="color:#032F62;">  })\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> script;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>调用 compile 函数</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(template));</span></span>
<span class="line"><span style="color:#E1E4E8;">div.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">({ supplies: [ </span><span style="color:#9ECBFF;">&quot;broom&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;mop&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;cleaner&quot;</span><span style="color:#E1E4E8;"> ] });</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;ul&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;broom&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;mop&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;cleaner&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;/ul&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// eval 函数是一个非常危险的函数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(template));</span></span>
<span class="line"><span style="color:#24292E;">div.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">({ supplies: [ </span><span style="color:#032F62;">&quot;broom&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;mop&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;cleaner&quot;</span><span style="color:#24292E;"> ] });</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;ul&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;broom&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;mop&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;cleaner&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;/ul&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// eval 函数是一个非常危险的函数</span></span></code></pre></div><h2 id="标签模板" tabindex="-1">标签模板 <a class="header-anchor" href="#标签模板" aria-label="Permalink to &quot;标签模板&quot;">​</a></h2><p>模板字符串，它可以紧跟在一个函数名后面。该函数将被调用来处理这个模板字符串。这被称为 <code>标签模板</code> 功能（tagged template）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alert</span><span style="color:#9ECBFF;">\`hello\`</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#032F62;">\`hello\`</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。</p><ul><li>函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分；</li><li>整个表达式的返回值，就是函数处理模板字符串后的返回值。 <blockquote><p>函数参数：<br> 第一个参数：[ ] ，是一个数组，是模板字符串中那些没有变量替换的部分<br> 后面的参数: ...rest，是\${...} 表达式的值<br></p></blockquote></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">v1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">v2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(s[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(s[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(s[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(v1);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(v2);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;OK&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">tag</span><span style="color:#9ECBFF;">\`Hello \${</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">a</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">b</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">} world \${</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">a</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">b</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Hello &quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; world &quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 15</span></span>
<span class="line"><span style="color:#6A737D;">// 50</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;OK&quot; 这是函数返回值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">s</span><span style="color:#24292E;">, </span><span style="color:#E36209;">v1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">v2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(v1);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(v2);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;OK&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">tag</span><span style="color:#032F62;">\`Hello \${</span><span style="color:#032F62;"> </span><span style="color:#24292E;">a</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#24292E;">b</span><span style="color:#032F62;"> </span><span style="color:#032F62;">} world \${</span><span style="color:#032F62;"> </span><span style="color:#24292E;">a</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">*</span><span style="color:#032F62;"> </span><span style="color:#24292E;">b</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Hello &quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; world &quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 15</span></span>
<span class="line"><span style="color:#6A737D;">// 50</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;OK&quot; 这是函数返回值</span></span></code></pre></div><p><strong>标签模板的应用</strong>:</p><ul><li>就是过滤 HTML 字符串，防止用户输入恶意内容。</li><li>多语言转换（国际化处理）。</li><li>jsx函数封装等等。</li></ul><h2 id="字符新增方法" tabindex="-1">字符新增方法 <a class="header-anchor" href="#字符新增方法" aria-label="Permalink to &quot;字符新增方法&quot;">​</a></h2><p><strong>静态方法</strong>：</p><ul><li>String.fromCodePoint()</li><li>String.raw()</li></ul><p><strong>实例方法</strong>：</p><ul><li>String.prototype.codePointAt()</li><li>String.prototype.normalize()</li><li>String.prototype.includes()</li><li>String.prototype.startsWith()</li><li>String.prototype.endsWith()</li><li>String.prototype.replace()</li><li>String.prototype.padStart()</li><li>String.prototype.padEnd()</li><li>String.prototype.trimStart()</li><li>String.prototype.trimEnd()</li><li>String.prototype.matchAll()</li></ul>`,41),e=[o];function t(c,r,y,i,E,F){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{d as __pageData,g as default};
