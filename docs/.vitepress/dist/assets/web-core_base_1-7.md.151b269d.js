import{_ as a,o as t,c as h,Q as l}from"./chunks/framework.5b0c684c.js";const b=JSON.parse('{"title":"Math","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/1-7.md","filePath":"web-core/base/1-7.md","lastUpdated":1729031503000}'),r={name:"web-core/base/1-7.md"},o=l('<h1 id="math" tabindex="-1">Math <a class="header-anchor" href="#math" aria-label="Permalink to &quot;Math&quot;">​</a></h1><h2 id="静态属性" tabindex="-1">静态属性 <a class="header-anchor" href="#静态属性" aria-label="Permalink to &quot;静态属性&quot;">​</a></h2><h2 id="math-e" tabindex="-1">Math.E <a class="header-anchor" href="#math-e" aria-label="Permalink to &quot;Math.E&quot;">​</a></h2><ul><li><strong>描述</strong>：Math.E 属性表示自然对数的底数（或称为基数），e，约等于 2.718。</li></ul><h2 id="math-ln10" tabindex="-1">Math.LN10 <a class="header-anchor" href="#math-ln10" aria-label="Permalink to &quot;Math.LN10&quot;">​</a></h2><ul><li><strong>描述</strong>：Math.LN10 属性表示 10 的自然对数，约为 2.302：</li></ul><h2 id="math-ln2" tabindex="-1">Math.LN2 <a class="header-anchor" href="#math-ln2" aria-label="Permalink to &quot;Math.LN2&quot;">​</a></h2><ul><li><strong>描述</strong>：Math.LN2 属性表示 2 的自然对数，约为 0.693：</li></ul><h2 id="math-log10e" tabindex="-1">Math.LOG10E <a class="header-anchor" href="#math-log10e" aria-label="Permalink to &quot;Math.LOG10E&quot;">​</a></h2><ul><li><strong>描述</strong>：Math.LOG10E 属性表示以 10 为底数，e 的对数，约为 0.434：</li></ul><h2 id="math-log2e" tabindex="-1">Math.LOG2E <a class="header-anchor" href="#math-log2e" aria-label="Permalink to &quot;Math.LOG2E&quot;">​</a></h2><ul><li><strong>描述</strong>：Math.LOG2E 属性表示以 2 为底数，e 的对数，约为 1.442：</li></ul><h2 id="math-pi" tabindex="-1">Math.PI <a class="header-anchor" href="#math-pi" aria-label="Permalink to &quot;Math.PI&quot;">​</a></h2><ul><li><strong>描述</strong>：Math.PI 表示一个圆的周长与直径的比例，约为 3.14159：</li></ul><h2 id="math-sqrt1-2" tabindex="-1">Math.SQRT1_2 <a class="header-anchor" href="#math-sqrt1-2" aria-label="Permalink to &quot;Math.SQRT1_2&quot;">​</a></h2><ul><li><strong>描述</strong>：Math.SQRT1_2 属性表示 1/2 的平方根，约为 0.707：</li></ul><h2 id="math-sqrt2" tabindex="-1">Math.SQRT2 <a class="header-anchor" href="#math-sqrt2" aria-label="Permalink to &quot;Math.SQRT2&quot;">​</a></h2><ul><li><strong>描述</strong>：Math.SQRT2 属性表示 2 的平方根，约为 1.414：</li></ul><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><h2 id="math-abs" tabindex="-1">Math.abs() <a class="header-anchor" href="#math-abs" aria-label="Permalink to &quot;Math.abs()&quot;">​</a></h2><ul><li><strong>描述</strong>：Math.abs(x) 函数返回一个数字的绝对值。</li></ul><h2 id="math-acos" tabindex="-1">Math.acos() <a class="header-anchor" href="#math-acos" aria-label="Permalink to &quot;Math.acos()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个数的反余弦值（单位为弧度）</li></ul><h2 id="math-acosh" tabindex="-1">Math.acosh() <a class="header-anchor" href="#math-acosh" aria-label="Permalink to &quot;Math.acosh()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数的反双曲余弦值</li></ul><h2 id="math-asin" tabindex="-1">Math.asin() <a class="header-anchor" href="#math-asin" aria-label="Permalink to &quot;Math.asin()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个数值的反正弦（单位为弧度）</li></ul><h2 id="math-asinh" tabindex="-1">Math.asinh() <a class="header-anchor" href="#math-asinh" aria-label="Permalink to &quot;Math.asinh()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回一个数值的反双曲正弦值</li></ul><h2 id="math-atan" tabindex="-1">Math.atan() <a class="header-anchor" href="#math-atan" aria-label="Permalink to &quot;Math.atan()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数值的反正切（以弧度为单位）</li></ul><h2 id="math-atan2" tabindex="-1">Math.atan2() <a class="header-anchor" href="#math-atan2" aria-label="Permalink to &quot;Math.atan2()&quot;">​</a></h2><ul><li><strong>描述</strong>：返回从原点 (0,0) 到 (x,y) 点的线段与 x 轴正方向之间的平面角度 (弧度值)，也就是 Math.atan2(y,x)</li></ul><h2 id="math-atanh" tabindex="-1">Math.atanh() <a class="header-anchor" href="#math-atanh" aria-label="Permalink to &quot;Math.atanh()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数值反双曲正切值</li></ul><h2 id="math-cbrt" tabindex="-1">Math.cbrt() <a class="header-anchor" href="#math-cbrt" aria-label="Permalink to &quot;Math.cbrt()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回任意数字的立方根。</li></ul><h2 id="math-ceil" tabindex="-1">Math.ceil() <a class="header-anchor" href="#math-ceil" aria-label="Permalink to &quot;Math.ceil()&quot;">​</a></h2><ul><li><strong>描述</strong>：静态方法总是向上舍入，并返回大于等于给定数字的最小整数。</li></ul><h2 id="math-clz32" tabindex="-1">Math.clz32() <a class="header-anchor" href="#math-clz32" aria-label="Permalink to &quot;Math.clz32()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数字在转换成 32 无符号整形数字的二进制形式后，开头的 0 的个数，比如 1000000 转换成 32 位无符号整形数字的二进制形式后是 00000000000011110100001001000000, 开头的 0 的个数是 12 个，则 Math.clz32(1000000) 返回 12.</li></ul><h2 id="math-cos" tabindex="-1">Math.cos() <a class="header-anchor" href="#math-cos" aria-label="Permalink to &quot;Math.cos()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数值的余弦值。</li></ul><h2 id="math-cosh" tabindex="-1">Math.cosh() <a class="header-anchor" href="#math-cosh" aria-label="Permalink to &quot;Math.cosh()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回数值的双曲余弦函数。</li></ul><h2 id="math-exp" tabindex="-1">Math.exp() <a class="header-anchor" href="#math-exp" aria-label="Permalink to &quot;Math.exp()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回 e^x，x 表示参数，e 是欧拉常数（Euler&#39;s constant），自然对数的底数。</li></ul><h2 id="math-expm1" tabindex="-1">Math.expm1() <a class="header-anchor" href="#math-expm1" aria-label="Permalink to &quot;Math.expm1()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回 E^x - 1, 其中 x 是该函数的参数，E 是自然对数的底数 2.718281828459045。</li></ul><h2 id="math-f16round" tabindex="-1">Math.f16round() <a class="header-anchor" href="#math-f16round" aria-label="Permalink to &quot;Math.f16round()&quot;">​</a></h2><ul><li><strong>描述</strong>：</li></ul><h2 id="math-floor" tabindex="-1">Math.floor() <a class="header-anchor" href="#math-floor" aria-label="Permalink to &quot;Math.floor()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数总是返回小于等于一个给定数字的最大整数。</li></ul><h2 id="math-fround" tabindex="-1">Math.fround() <a class="header-anchor" href="#math-fround" aria-label="Permalink to &quot;Math.fround()&quot;">​</a></h2><ul><li><strong>描述</strong>：可以将任意的数字转换为离它最近的单精度浮点数形式的数字。</li></ul><h2 id="math-hypot" tabindex="-1">Math.hypot() <a class="header-anchor" href="#math-hypot" aria-label="Permalink to &quot;Math.hypot()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回所有参数的平方和的平方根</li></ul><h2 id="math-imul" tabindex="-1">Math.imul() <a class="header-anchor" href="#math-imul" aria-label="Permalink to &quot;Math.imul()&quot;">​</a></h2><ul><li><strong>描述</strong>：该函数将两个参数分别转换为 32 位整数，相乘后返回 32 位结果，类似 C 语言的 32 位整数相乘。</li></ul><h2 id="math-log" tabindex="-1">Math.log() <a class="header-anchor" href="#math-log" aria-label="Permalink to &quot;Math.log()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数的自然对数</li></ul><h2 id="math-log10" tabindex="-1">Math.log10() <a class="header-anchor" href="#math-log10" aria-label="Permalink to &quot;Math.log10()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数字以 10 为底的对数。</li></ul><h2 id="math-log1p" tabindex="-1">Math.log1p() <a class="header-anchor" href="#math-log1p" aria-label="Permalink to &quot;Math.log1p()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数字加 1 后的自然对数 (底为 E), 既log(x+1).</li></ul><h2 id="math-log2" tabindex="-1">Math.log2() <a class="header-anchor" href="#math-log2" aria-label="Permalink to &quot;Math.log2()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数字以 2 为底的对数。</li></ul><h2 id="math-max" tabindex="-1">Math.max() <a class="header-anchor" href="#math-max" aria-label="Permalink to &quot;Math.max()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回作为输入参数的最大数字，如果没有参数，则返回 -Infinity。</li></ul><h2 id="math-min" tabindex="-1">Math.min() <a class="header-anchor" href="#math-min" aria-label="Permalink to &quot;Math.min()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回作为输入参数的数字中最小的一个，如果没有参数，则返回 Infinity。</li></ul><h2 id="math-pow" tabindex="-1">Math.pow() <a class="header-anchor" href="#math-pow" aria-label="Permalink to &quot;Math.pow()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回基数（base）的指数（exponent）次幂，即 base^exponent。</li></ul><h2 id="math-random" tabindex="-1">Math.random() <a class="header-anchor" href="#math-random" aria-label="Permalink to &quot;Math.random()&quot;">​</a></h2><ul><li><strong>描述</strong>：静态方法返回一个大于等于 0 且小于 1 的伪随机浮点数，并在该范围内近似均匀分布，然后你可以缩放到所需的范围。其实现将选择随机数生成算法的初始种子；它不能由用户选择或重置。</li></ul><h2 id="math-round" tabindex="-1">Math.round() <a class="header-anchor" href="#math-round" aria-label="Permalink to &quot;Math.round()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数字四舍五入后最接近的整数。</li></ul><h2 id="math-sign" tabindex="-1">Math.sign() <a class="header-anchor" href="#math-sign" aria-label="Permalink to &quot;Math.sign()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数字的符号，指示数字是正数，负数还是零。</li></ul><h2 id="math-sin" tabindex="-1">Math.sin() <a class="header-anchor" href="#math-sin" aria-label="Permalink to &quot;Math.sin()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数值的正弦值。</li></ul><h2 id="math-sinh" tabindex="-1">Math.sinh() <a class="header-anchor" href="#math-sinh" aria-label="Permalink to &quot;Math.sinh()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数字 (单位为角度) 的双曲正弦值。</li></ul><h2 id="math-sqrt" tabindex="-1">Math.sqrt() <a class="header-anchor" href="#math-sqrt" aria-label="Permalink to &quot;Math.sqrt()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数返回一个数的平方根</li></ul><h2 id="math-tan" tabindex="-1">Math.tan() <a class="header-anchor" href="#math-tan" aria-label="Permalink to &quot;Math.tan()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法返回一个数值的正切值。</li></ul><h2 id="math-tanh" tabindex="-1">Math.tanh() <a class="header-anchor" href="#math-tanh" aria-label="Permalink to &quot;Math.tanh()&quot;">​</a></h2><ul><li><strong>描述</strong>：函数将会返回一个数的双曲正切函数值</li></ul><h2 id="math-trunc" tabindex="-1">Math.trunc() <a class="header-anchor" href="#math-trunc" aria-label="Permalink to &quot;Math.trunc()&quot;">​</a></h2><ul><li><strong>描述</strong>：方法会将数字的小数部分去掉，只保留整数部分。</li></ul>',91),e=[o];function i(n,s,u,d,m,c){return t(),h("div",null,e)}const q=a(r,[["render",i]]);export{b as __pageData,q as default};
