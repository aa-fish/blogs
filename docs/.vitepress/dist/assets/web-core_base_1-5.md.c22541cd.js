import{_ as p,C as e,o as r,c as t,k as s,a,H as n,Q as o}from"./chunks/framework.5b0c684c.js";const W=JSON.parse('{"title":"Array","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/1-5.md","filePath":"web-core/base/1-5.md","lastUpdated":1729031503000}'),c={name:"web-core/base/1-5.md"},i=o('<h1 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h1><h2 id="会修改变原数组的-9-个方法" tabindex="-1">会修改变原数组的 9 个方法 <a class="header-anchor" href="#会修改变原数组的-9-个方法" aria-label="Permalink to &quot;会修改变原数组的 9 个方法&quot;">​</a></h2><h2 id="push" tabindex="-1">push() <a class="header-anchor" href="#push" aria-label="Permalink to &quot;push()&quot;">​</a></h2><ul><li>用法：将一个或者多个元素添加到数组末尾，并且返回该数组的新长度。</li></ul><h2 id="pop" tabindex="-1">pop() <a class="header-anchor" href="#pop" aria-label="Permalink to &quot;pop()&quot;">​</a></h2><ul><li>用法：删除数组最后一个元素，并返回删除的元素。</li></ul><h2 id="unshift" tabindex="-1">unshift() <a class="header-anchor" href="#unshift" aria-label="Permalink to &quot;unshift()&quot;">​</a></h2><ul><li>用法：将一个或者多个元素添加到数组的第一位，并且返回该数组的新长度。</li></ul><h2 id="shift" tabindex="-1">shift() <a class="header-anchor" href="#shift" aria-label="Permalink to &quot;shift()&quot;">​</a></h2><ul><li>用法：删除数组的第一个元素，并返回删除的元素。</li></ul><h2 id="sort" tabindex="-1">sort() <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;sort()&quot;">​</a></h2><ul><li>用法：数组排序。</li></ul><h2 id="reverse" tabindex="-1">reverse() <a class="header-anchor" href="#reverse" aria-label="Permalink to &quot;reverse()&quot;">​</a></h2><ul><li>用法：数组逆序。</li></ul><h2 id="splice" tabindex="-1">splice() <a class="header-anchor" href="#splice" aria-label="Permalink to &quot;splice()&quot;">​</a></h2><ul><li>用法：裁剪数组(删除或替换或添加新元素)。</li></ul>',16),y={id:"copywithin",tabindex:"-1"},E=s("a",{class:"header-anchor",href:"#copywithin","aria-label":'Permalink to "copyWithin() <Badge text="es6"/>"'},"​",-1),d=s("ul",null,[s("li",null,"用法：在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。")],-1),h={id:"fill",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#fill","aria-label":'Permalink to "fill() <Badge text="es6"/>"'},"​",-1),f=o(`<ul><li>用法：使用给定值，填充一个数组。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 第一个元素(必须): 要填充数组的值。</span></span>
<span class="line"><span style="color:#6A737D;">// 第二个元素(可选): 填充的开始位置,默认值为 0。</span></span>
<span class="line"><span style="color:#6A737D;">// 第三个元素(可选): 填充的结束位置，默认是为 this.length。</span></span>
<span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(value, start, end);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 第一个元素(必须): 要填充数组的值。</span></span>
<span class="line"><span style="color:#6A737D;">// 第二个元素(可选): 填充的开始位置,默认值为 0。</span></span>
<span class="line"><span style="color:#6A737D;">// 第三个元素(可选): 填充的结束位置，默认是为 this.length。</span></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(value, start, end);</span></span></code></pre></div><h2 id="不会修改变原数组的-10-个方法" tabindex="-1">不会修改变原数组的 10 个方法 <a class="header-anchor" href="#不会修改变原数组的-10-个方法" aria-label="Permalink to &quot;不会修改变原数组的 10 个方法&quot;">​</a></h2><h2 id="concat" tabindex="-1">concat() <a class="header-anchor" href="#concat" aria-label="Permalink to &quot;concat()&quot;">​</a></h2><ul><li>用法：数组拼接（合并两个或多个数组，返回一个新数组）。</li></ul><h2 id="slice" tabindex="-1">slice() <a class="header-anchor" href="#slice" aria-label="Permalink to &quot;slice()&quot;">​</a></h2><ul><li>用法：方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。</li></ul><h2 id="jion" tabindex="-1">jion() <a class="header-anchor" href="#jion" aria-label="Permalink to &quot;jion()&quot;">​</a></h2><ul><li>用法：数组转字符串（数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串）。</li></ul><h2 id="indexof" tabindex="-1">indexOf() <a class="header-anchor" href="#indexof" aria-label="Permalink to &quot;indexOf()&quot;">​</a></h2><ul><li>用法：查找数组是否存在某个元素，返回下标，如果不存在，则返回-1。</li></ul><h2 id="lastindexof" tabindex="-1">lastIndexOf() <a class="header-anchor" href="#lastindexof" aria-label="Permalink to &quot;lastIndexOf()&quot;">​</a></h2><ul><li>用法：返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。</li></ul>`,13),F={id:"includes",tabindex:"-1"},b=s("a",{class:"header-anchor",href:"#includes","aria-label":'Permalink to "includes() <Badge text="es7"/>"'},"​",-1),m=s("ul",null,[s("li",null,"用法：查找数组是否包含某个元素，返回布尔。")],-1),C={id:"flat",tabindex:"-1"},_=s("a",{class:"header-anchor",href:"#flat","aria-label":'Permalink to "flat()<Badge text="es6"/>"'},"​",-1),g=s("ul",null,[s("li",null,"用法：用于将嵌套的数组“拉平”。")],-1),A={id:"flatmap",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#flatmap","aria-label":'Permalink to "flatMap()<Badge text="es6"/>"'},"​",-1),v=o('<ul><li>用法：对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。</li></ul><h2 id="tolocalestring" tabindex="-1">toLocaleString() <a class="header-anchor" href="#tolocalestring" aria-label="Permalink to &quot;toLocaleString()&quot;">​</a></h2><ul><li>用法：返回一个表示数组元素的字符串。</li></ul><h2 id="tostring" tabindex="-1">toString() <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString()&quot;">​</a></h2><ul><li>用法：数组转字符串，返回字符串。</li></ul><h2 id="遍历数组的-12-个方法" tabindex="-1">遍历数组的 12 个方法 <a class="header-anchor" href="#遍历数组的-12-个方法" aria-label="Permalink to &quot;遍历数组的 12 个方法&quot;">​</a></h2><h2 id="foreach" tabindex="-1">forEach() <a class="header-anchor" href="#foreach" aria-label="Permalink to &quot;forEach()&quot;">​</a></h2><ul><li>用法：方法按升序为数组中含有效值的每一项执行一次 callback 函数。</li></ul><div class="tip custom-block"><p class="custom-block-title">注意：</p><ul><li>无法中途退出循环，只能用 return 退出本次回调，进行下一次回调。</li><li>它总是返回 undefined 值,即使你 return 了一个值。</li></ul></div><h2 id="filter" tabindex="-1">filter() <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;filter()&quot;">​</a></h2><ul><li>用法：过滤原始数组，返回新数组。</li></ul><h2 id="map" tabindex="-1">map() <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map()&quot;">​</a></h2><ul><li>用法：对数组中的每个元素进行处理，返回新的数组。</li></ul><h2 id="some" tabindex="-1">some() <a class="header-anchor" href="#some" aria-label="Permalink to &quot;some()&quot;">​</a></h2><ul><li>用法：数组中的是否有满足判断条件的元素，返回布尔值。</li></ul><h2 id="every" tabindex="-1">every() <a class="header-anchor" href="#every" aria-label="Permalink to &quot;every()&quot;">​</a></h2><ul><li>用法：组所有元素是否都符合判断条件，返回布尔值。</li></ul>',17),D={id:"find",tabindex:"-1"},x=s("a",{class:"header-anchor",href:"#find","aria-label":'Permalink to "find() <Badge text="es6"/>"'},"​",-1),B=s("ul",null,[s("li",null,"用法：方法返回数组中满足提供的测试函数的第一个元素的值，否则返回 undefined。")],-1),q={id:"findindex",tabindex:"-1"},P=s("a",{class:"header-anchor",href:"#findindex","aria-label":'Permalink to "findIndex() <Badge text="es6"/>"'},"​",-1),T=o(`<ul><li>用法：方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回-1。</li></ul><p><strong>符合以上遍历数组的通式</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// fn指代 forEach、map、some、every</span></span>
<span class="line"><span style="color:#6A737D;">// currentValue(必须),数组当前元素的值</span></span>
<span class="line"><span style="color:#6A737D;">// index(可选), 当前元素的索引值</span></span>
<span class="line"><span style="color:#6A737D;">// arr(可选),数组对象本身</span></span>
<span class="line"><span style="color:#6A737D;">// thisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined</span></span>
<span class="line"><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">currentValue</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">thisValue</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// fn指代 forEach、map、some、every</span></span>
<span class="line"><span style="color:#6A737D;">// currentValue(必须),数组当前元素的值</span></span>
<span class="line"><span style="color:#6A737D;">// index(可选), 当前元素的索引值</span></span>
<span class="line"><span style="color:#6A737D;">// arr(可选),数组对象本身</span></span>
<span class="line"><span style="color:#6A737D;">// thisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined</span></span>
<span class="line"><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">currentValue</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">thisValue</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="reduce-、reduceright" tabindex="-1">reduce()、reduceRight() <a class="header-anchor" href="#reduce-、reduceright" aria-label="Permalink to &quot;reduce()、reduceRight()&quot;">​</a></h2><p>这个方法唯一区别就是方向不一样，一个从左往右，一个从右往左。</p><ul><li>用法：为数组提供累加器，返回最终计算结果。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// accumulator（必选）:累计器累计回调的返回值; 它是上一次调用回调时返回的累积值。</span></span>
<span class="line"><span style="color:#6A737D;">// currentValue（必选）：当前值</span></span>
<span class="line"><span style="color:#6A737D;">// currentIndex（可选）：当前索引</span></span>
<span class="line"><span style="color:#6A737D;">// array（可选）：调用reduce()的数组</span></span>
<span class="line"><span style="color:#6A737D;">// initialValue（可选）：作为第一次调用 callback函数时的第一个参数的值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">array.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(accumulator, currentValue, index, array), initialValue);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// accumulator（必选）:累计器累计回调的返回值; 它是上一次调用回调时返回的累积值。</span></span>
<span class="line"><span style="color:#6A737D;">// currentValue（必选）：当前值</span></span>
<span class="line"><span style="color:#6A737D;">// currentIndex（可选）：当前索引</span></span>
<span class="line"><span style="color:#6A737D;">// array（可选）：调用reduce()的数组</span></span>
<span class="line"><span style="color:#6A737D;">// initialValue（可选）：作为第一次调用 callback函数时的第一个参数的值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">array.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(accumulator, currentValue, index, array), initialValue);</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意：</p><ul><li>如果没有提供 initialValue，reduce 会从索引 1 的地方开始执行 callback 方法，跳过第一个索引。如果提供 initialValue，从索引 0 开始。</li><li>如果没有提供初始值，则默认为数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</li></ul></div>`,8),V={id:"keys-、values-、entries-遍历键名、遍历键值、遍历键名-键值",tabindex:"-1"},S=s("a",{class:"header-anchor",href:"#keys-、values-、entries-遍历键名、遍历键值、遍历键名-键值","aria-label":'Permalink to "keys()、values()、entries() 遍历键名、遍历键值、遍历键名+键值 <Badge text="es6"/>"'},"​",-1),j=o(`<ul><li>用法：三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">array.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 键名 index</span></span>
<span class="line"><span style="color:#E1E4E8;">array.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 键值 值</span></span>
<span class="line"><span style="color:#E1E4E8;">array.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 键名+键值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">array.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 键名 index</span></span>
<span class="line"><span style="color:#24292E;">array.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 键值 值</span></span>
<span class="line"><span style="color:#24292E;">array.</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 键名+键值</span></span></code></pre></div><h2 id="array上的方法" tabindex="-1">Array上的方法 <a class="header-anchor" href="#array上的方法" aria-label="Permalink to &quot;Array上的方法&quot;">​</a></h2><h2 id="isarray" tabindex="-1">isArray() <a class="header-anchor" href="#isarray" aria-label="Permalink to &quot;isArray()&quot;">​</a></h2><ul><li>判断是否为数组</li></ul><h2 id="from" tabindex="-1">from() <a class="header-anchor" href="#from" aria-label="Permalink to &quot;from()&quot;">​</a></h2><ul><li>1、返回一个数组实例</li><li>2、入参为：一个类数组或者一个可迭代对象</li></ul><h2 id="of" tabindex="-1">of() <a class="header-anchor" href="#of" aria-label="Permalink to &quot;of()&quot;">​</a></h2><h2 id="for-循环-while-循环性能对比" tabindex="-1">for 循环 while 循环性能对比 <a class="header-anchor" href="#for-循环-while-循环性能对比" aria-label="Permalink to &quot;for 循环 while 循环性能对比&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9999999</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// for</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">time</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;forTime&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">timeEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;forTime&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// while</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">time</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;whileTime&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">){i </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">timeEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;whileTime&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// forTime: 6.72802734375 ms</span></span>
<span class="line"><span style="color:#6A737D;">// whileTime: 20.7080078125 ms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9999999</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// for</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;forTime&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">timeEnd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;forTime&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// while</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;whileTime&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">){i </span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">timeEnd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;whileTime&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// forTime: 6.72802734375 ms</span></span>
<span class="line"><span style="color:#6A737D;">// whileTime: 20.7080078125 ms</span></span></code></pre></div><p>原因：</p><ul><li>使用 let 声明下的循环，由于 for 中块级作用域的影响，内存得到释放，运行的运行的速度会更快一些。</li><li>使用 var 声明时因为for while 的循环都不存在块级作用域的影响，两者运行的速度基本一致。</li></ul><h2 id="foreach、for-of、for-in-区别" tabindex="-1">forEach、for...of、for...in 区别 <a class="header-anchor" href="#foreach、for-of、for-in-区别" aria-label="Permalink to &quot;forEach、for...of、for...in 区别&quot;">​</a></h2><ul><li>forEach： <ul><li>是Array.prototype上的方法。用于遍历数组中的每个元素，执行回调函数，没有返回值。</li><li>不能使用break跳出循环，只能使用try/catch捕捉异常来跳出循环。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (item </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;End loop&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(item);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (item </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;End loop&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(item);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><ul><li><p>for...of：</p><ul><li>for of 循环的原理是按照是否有迭代器规范来循环的，所有带有 Symbol.iterator 的都是实现了迭代器规范(Array,Set,Map,generator...)。</li><li>对象没有实现 Symbol.iterator 规范，所以不能使用for of循环。</li><li>可以使用break跳出循环。</li></ul></li><li><p>for...in：</p><ul><li>循环主要用于对象</li><li>可以使用break跳出循环。</li><li>for...in无法遍历 Symbol属性（不可枚举）。</li></ul></li></ul><blockquote><p>for in 的循环性能循环很差。性能差的原因是因为：for in 会迭代对象原型链上所有可以枚举的属性。</p></blockquote><h2 id="拓展" tabindex="-1">拓展: <a class="header-anchor" href="#拓展" aria-label="Permalink to &quot;拓展:&quot;">​</a></h2><p><strong>如何实现类数组可以使用 for of 循环:</strong></p><ul><li>只需要给类数组对象添加Symbol.iterator接口规范就可以了。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">obj[Symbol.iterator] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">[Symbol.iterator]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;3&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">obj[Symbol.iterator] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">[Symbol.iterator]</span></span></code></pre></div><p><strong>类数组转换为数组方法：</strong></p><blockquote><p>arguments 是类数组(其实是一个对象)属性从0开始排，依次为0，1，2... 最后还有 callee和length 属性，arguments 的 <strong>proto</strong> 直接指向基类的 object，不具备数组的方法。</p></blockquote><ul><li>方法一：[].slice.call()</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [].slice.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// [1,2,3,4,5]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [].slice.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// [1,2,3,4,5]</span></span></code></pre></div><ul><li>方法二：拓展运算符</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arr</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// [1,2,3,4,5]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// [1,2,3,4,5]</span></span></code></pre></div><ul><li>方法三：Array.from()</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// [1,2,3,4,5]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// [1,2,3,4,5]</span></span></code></pre></div>`,29);function w(I,N,R,O,$,M){const l=e("Badge");return r(),t("div",null,[i,s("h2",y,[a("copyWithin() "),n(l,{text:"es6"}),a(),E]),d,s("h2",h,[a("fill() "),n(l,{text:"es6"}),a(),u]),f,s("h2",F,[a("includes() "),n(l,{text:"es7"}),a(),b]),m,s("h2",C,[a("flat()"),n(l,{text:"es6"}),a(),_]),g,s("h2",A,[a("flatMap()"),n(l,{text:"es6"}),a(),k]),v,s("h2",D,[a("find() "),n(l,{text:"es6"}),a(),x]),B,s("h2",q,[a("findIndex() "),n(l,{text:"es6"}),a(),P]),T,s("h2",V,[a("keys()、values()、entries() 遍历键名、遍历键值、遍历键名+键值 "),n(l,{text:"es6"}),a(),S]),j])}const H=p(c,[["render",w]]);export{W as __pageData,H as default};
