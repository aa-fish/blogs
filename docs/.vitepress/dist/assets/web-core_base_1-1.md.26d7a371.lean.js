import{_ as e,C as t,o as r,c,k as s,a,H as n,Q as o}from"./chunks/framework.5b0c684c.js";const vs=JSON.parse('{"title":"String","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/1-1.md","filePath":"web-core/base/1-1.md","lastUpdated":1729031503000}'),y={name:"web-core/base/1-1.md"},E=s("h1",{id:"string",tabindex:"-1"},[a("String "),s("a",{class:"header-anchor",href:"#string","aria-label":'Permalink to "String"'},"​")],-1),i=s("p",null,"字符串是 JavaScript 的一种基本的数据类型。",-1),F=s("h2",{id:"构造函数",tabindex:"-1"},[a("构造函数 "),s("a",{class:"header-anchor",href:"#构造函数","aria-label":'Permalink to "构造函数"'},"​")],-1),d=s("code",null,"new String()",-1),u=s("li",null,[s("code",null,"String()"),a("当作为函数调用时，它返回的是String类型的原始值。")],-1),g=s("h2",{id:"静态方法",tabindex:"-1"},[a("静态方法 "),s("a",{class:"header-anchor",href:"#静态方法","aria-label":'Permalink to "静态方法"'},"​")],-1),h=s("p",null,[a("静态方法的语法只能固定以 "),s("strong",null,"String.静态方法"),a(" 的使用。")],-1),C=s("h2",{id:"string-fromcharcode",tabindex:"-1"},[a("String.fromCharCode() "),s("a",{class:"header-anchor",href:"#string-fromcharcode","aria-label":'Permalink to "String.fromCharCode()"'},"​")],-1),b=s("li",null,[s("strong",null,"描述"),a("：根据指定的 UTF-16 "),s("code",null,"码元序列"),a("创建的字符串。")],-1),q=s("strong",null,"参数",-1),A=s("code",null,"码元",-1),B=s("li",null,[s("strong",null,"异常"),a("：如果大于0xFFFF则会从 0x后面开始截断并忽略，如：0x"),s("code",null,"A"),a("FFF1，这里的 "),s("code",null,"A"),a(" 会被截掉，最终为0xFFF1。")],-1),D={id:"string-fromcodepoint",tabindex:"-1"},m=s("a",{class:"header-anchor",href:"#string-fromcodepoint","aria-label":'Permalink to "String.fromCodePoint()<Badge text="推荐"/>"'},"​",-1),v=s("li",null,[s("strong",null,"描述"),a("：根据指定的"),s("code",null,"码位序列"),a("返回一个字符串。")],-1),f=s("strong",null,"参数",-1),S=s("li",null,[s("strong",null,"异常"),a("：如果 参数 不是整数、小于 0 或者在转换为数字后大于 0x10FFFF，则会抛出该异常。")],-1),k=o("",9),x=s("li",null,[s("strong",null,"描述"),a("：接受一个整数值（正/负），并返回一个新的 String 。")],-1),_=s("strong",null,"参数",-1),P=s("li",null,[s("strong",null,"返回"),a("：由位于指定位置的单个 UTF-16 码元组成的 String。如果找不到指定的索引，则返回 undefined 。")],-1),T=s("h2",{id:"string-prototype-charat",tabindex:"-1"},[a("String.prototype.charAt() "),s("a",{class:"header-anchor",href:"#string-prototype-charat","aria-label":'Permalink to "String.prototype.charAt()"'},"​")],-1),j=s("li",null,[s("strong",null,"描述"),a("：返回一个由给定索引处的单个 UTF-16 码元构成的新字符串。")],-1),w=s("strong",null,"参数",-1),$=s("li",null,[s("strong",null,"返回"),a("：由位于指定位置的单个 UTF-16 码元组成的 String。如果找不到指定的索引，则返回 空字符串 。")],-1),N=s("h2",{id:"string-prototype-charcodeat",tabindex:"-1"},[a("String.prototype.charCodeAt() "),s("a",{class:"header-anchor",href:"#string-prototype-charcodeat","aria-label":'Permalink to "String.prototype.charCodeAt()"'},"​")],-1),z=s("li",null,[s("strong",null,"描述"),a("：获取索引处的 UTF-16 码元。（其值介于 0 和 65535 （0xFFFF）之间）")],-1),L=s("strong",null,"参数",-1),U=s("li",null,[s("strong",null,"返回"),a("： UTF-16 码元。如果找不到指定的索引，则返回 NaN 。")],-1),I={id:"string-prototype-codepointat",tabindex:"-1"},R=s("a",{class:"header-anchor",href:"#string-prototype-codepointat","aria-label":'Permalink to "String.prototype.codePointAt()<Badge text="推荐"/>"'},"​",-1),M=s("li",null,[s("strong",null,"描述"),a("：获取索引处的字符的 Unicode 码位值（Unicode 码位范围从 0 到 1114111（0x10FFFF）。")],-1),V=s("strong",null,"参数",-1),W=s("li",null,[s("strong",null,"返回"),a("： "),s("blockquote",null,[s("p",null,"Unicode 码位值，如果找不到指定的索引，则返回 undefined。"),s("p",null,"如果 index 处的元素是一个 UTF-16 前导代理（leading surrogate），则返回代理对的码位。"),s("p",null,"如果 index 处的元素是一个 UTF-16 后尾代理（trailing surrogate），则只返回后尾代理的码元。")])],-1),O=o("",5),H={class:"info custom-block"},J=s("p",{class:"custom-block-title"},"INFO",-1),K=s("p",null,"NMD：与加号/字符串连接运算符（+，+=）非常相似，不同之处在于 concat() 直接将其参数强制转换为字符串进行连接，而加号运算符首先将其操作数强制转换为原始值，然后再进行连接。",-1),Z=o("",5),Q=s("li",null,[s("strong",null,"描述"),a("：方法执行区分大小写的搜索，以确定是否可以在一个字符串中找到另一个字符串，并根据情况返回 true 或 false。")],-1),G=s("li",null,[s("strong",null,"参数"),a('：searchString（要搜索的字符串），传入的参数强制转换为字符串。省略或传入 undefined，该方法会在字符串中搜索 "undefined"。')],-1),X=s("li",null,[s("strong",null,"异常"),a("：参数不能是正则表达式，否则会抛出异常。")],-1),Y=s("h2",{id:"string-prototype-indexof",tabindex:"-1"},[a("String.prototype.indexOf() "),s("a",{class:"header-anchor",href:"#string-prototype-indexof","aria-label":'Permalink to "String.prototype.indexOf()"'},"​")],-1),ss=s("li",null,[s("strong",null,"描述"),a("：方法在字符串中搜索指定子字符串，并返回其第一次出现的位置索引否则返回-1。")],-1),as=s("li",null,[s("strong",null,"参数"),a('： searchString（要搜索的字符串），传入的参数强制转换为字符串。省略或传入 undefined，该方法会在字符串中搜索 "undefined"。')],-1),ns=s("h2",{id:"string-prototype-lastindexof",tabindex:"-1"},[a("String.prototype.lastIndexOf() "),s("a",{class:"header-anchor",href:"#string-prototype-lastindexof","aria-label":'Permalink to "String.prototype.lastIndexOf()"'},"​")],-1),ls=s("li",null,[s("strong",null,"描述"),a("：方法在字符串中搜索指定子字符串，并返回其最后一次出现的位置索引否则返回-1。")],-1),os=s("li",null,[s("strong",null,"参数"),a('： searchString（要搜索的字符串），传入的参数强制转换为字符串。省略或传入 undefined，该方法会在字符串中搜索 "undefined"。')],-1),ps=o("",43),ts=s("li",null,[s("strong",null,"描述"),a("：方法提取字符串的一部分，并将其作为新字符串返回，而不修改原始字符串。")],-1),es=s("li",null,[s("strong",null,"参数"),a("：要返回的子字符串中包含的第一个字符的索引。（从第几位开始） "),s("ol",null,[s("li",null,"indexStart >= str.length，则返回一个空字符串。"),s("li",null,"indexStart < 0，则索引从字符串末尾开始计数。从 (indexStart + str.length, 0) 。"),s("li",null,"indexStart 被省略、为 undefined，或无法转换为数字，则将其视为 0。")])],-1),rs=s("ol",null,[s("li",null,"indexEnd 被省略、为 undefined，或无法转换为数字，或者 indexEnd >= str.length，则 slice() 提取到字符串的末尾。"),s("li",null,"indexEnd < 0，则索引从字符串末尾开始计数。从 (indexStart + str.length, 0) 。"),s("li",null,"在标准化负值后，indexEnd <= indexStart（indexEnd 表示位于 indexStart 之前的字符），则返回一个空字符串。")],-1),cs=o("",3),ys=s("li",null,[s("strong",null,"描述"),a("：方法返回该字符串从起始索引到结束索引（不包括）的部分，如果未提供结束索引，则返回到字符串末尾的部分。")],-1),Es=s("li",null,[s("strong",null,"参数"),a("：返回子字符串中第一个要包含的字符的索引。")],-1),is=s("li",null,"如果 indexStart 等于 indexEnd，则 substring() 返回一个空字符串。",-1),Fs=s("li",null,"如果 indexStart 大于 indexEnd，则 substring() 的效果就像交换了这两个参数一样；",-1),ds=s("li",null,"任何小于 0 或大于 str.length 的参数值都会被视为分别等于 0 和 str.length。",-1),us=s("li",null,"任何值为 NaN 的参数将被视为等于 0。",-1),gs=o("",47);function hs(Cs,bs,qs,As,Bs,Ds){const l=t("lines"),p=t("Badge");return r(),c("div",null,[E,i,F,s("ul",null,[s("li",null,[d,a(" 构造函数创建的是 "),n(l,{text:"String 对象"}),a("。")]),u]),g,h,C,s("ul",null,[b,s("li",null,[q,a("：接收一个或多个由介于 "),n(l,{text:" 0 和 65535（0xFFFF）"}),a(" 之间的数表示的 UTF-16 "),A,a("。（参数为负数其实也可以，约束松散）。")]),B]),s("h2",D,[a("String.fromCodePoint()"),n(p,{text:"推荐"}),a(),m]),s("ul",null,[v,s("li",null,[f,a("：Unicode 码位范围从 "),n(l,{text:"0 到 1114111（0x10FFFF）"}),a("。")]),S]),k,s("ul",null,[x,s("li",null,[_,a("：要返回的字符串字符的索引（位置）。当传递负数时，支持从字符串末端开始的相对索引 。"),n(l,{text:"调用时参数会被隐式转为number类型的整数"}),a("，当结果为NaN时，默认返回索引为 0 对应的字符")]),P]),T,s("ul",null,[j,s("li",null,[w,a("：从零开始的正整数，字符的索引。"),n(l,{text:"调用时参数会被隐式转为number类型的整数"}),a("，当结果为NaN时，默认返回索引为 0 对应的字符。")]),$]),N,s("ul",null,[z,s("li",null,[L,a("：字符的索引，从零开始的正整数。"),n(l,{text:"调用时参数会被隐式转为number类型的整数"}),a("，当结果为NaN时，默认返回索引为 0 对应的字符。")]),U]),s("h2",I,[a("String.prototype.codePointAt()"),n(p,{text:"推荐"}),a(),R]),s("ul",null,[M,s("li",null,[V,a("：字符的索引，从零开始的正整数。"),n(l,{text:"调用时参数会被隐式转为number类型的整数"}),a("，当结果为NaN时，默认返回索引为 0 对应的字符。")]),W]),O,s("div",H,[J,K,n(l,{text:"此处测试并没有发现有什么不同(2024)"})]),Z,s("ul",null,[Q,G,s("li",null,[a("[可选参数]："),n(l,{text:"指定从什么位置开始搜索"}),a("。默认值为 0。")]),X]),Y,s("ul",null,[ss,as,s("li",null,[a("[可选参数]："),n(l,{text:"指定从什么位置开始搜索"}),a("，大于字符串长度则不会搜索，小于0则从0开始搜索。默认值为 0。返回值还是字符串原来位置。")])]),ns,s("ul",null,[ls,os,s("li",null,[a("[可选参数]："),n(l,{text:"在指定字符串长度范围内搜索"}),a("，大于字符串长度则全部搜索，小于0则于0相同只搜索0位置。默认值为+Infinity。返回值还是字符串原来位置。")])]),ps,s("ul",null,[ts,es,s("li",null,[a("[可选参数]：要返回的子字符串中排除的第一个字符的索引（到第几位）。("),n(l,{text:"不包含结束位置"}),a(") "),rs])]),cs,s("ul",null,[ys,Es,s("li",null,[a("[可选参数]：返回子字符串中第一个要排除的字符的索引。 "),s("ol",null,[s("li",null,[a("如果省略了 indexEnd，则 substring() 提取字符直到字符串的末尾。("),n(l,{text:"不包含结束位置"}),a(")")]),is,Fs,ds,us])])]),gs])}const fs=e(y,[["render",hs]]);export{vs as __pageData,fs as default};
