import{_ as e,C as t,o as c,c as r,k as s,a as n,H as a,Q as l}from"./chunks/framework.5b0c684c.js";const T=JSON.parse('{"title":"类型判定","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/2-2.md","filePath":"web-core/base/2-2.md","lastUpdated":1729031503000}'),y={name:"web-core/base/2-2.md"},E=l('<h1 id="类型判定" tabindex="-1">类型判定 <a class="header-anchor" href="#类型判定" aria-label="Permalink to &quot;类型判定&quot;">​</a></h1><p><code>Object.prototype.toString.call()</code> 用它</p><h2 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;typeof&quot;">​</a></h2><ul><li>是个运算符。</li><li>能判断类型的所有结果：9情况，8种返回值。</li></ul><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:left;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">Undefined</td><td style="text-align:left;"><code>&quot;undefined&quot;</code></td></tr><tr><td style="text-align:center;">Null</td><td style="text-align:left;"><code>&quot;object&quot;</code></td></tr><tr><td style="text-align:center;">Boolean</td><td style="text-align:left;"><code>&quot;boolean&quot;</code></td></tr><tr><td style="text-align:center;">Number</td><td style="text-align:left;"><code>&quot;number&quot;</code></td></tr><tr><td style="text-align:center;">String</td><td style="text-align:left;"><code>&quot;string&quot;</code></td></tr><tr><td style="text-align:center;">BigInt</td><td style="text-align:left;"><code>&quot;bigint&quot;</code></td></tr><tr><td style="text-align:center;">Symbol</td><td style="text-align:left;"><code>&quot;symbol&quot;</code></td></tr><tr><td style="text-align:center;">Function</td><td style="text-align:left;"><code>&quot;function&quot;</code></td></tr><tr><td style="text-align:center;">其他任何对象</td><td style="text-align:left;"><code>&quot;object&quot;</code></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">注意</p><p>typeof 对象类型的值的类型不能作出准确判断，能准确判断出基本数据类型的值。</p></div><h2 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-label="Permalink to &quot;instanceof&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">object </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">constructor</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">object </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">constructor</span></span></code></pre></div><ul><li><p><code>object</code>：实例对象</p></li><li><p><code>constructor</code>：构造函数</p></li><li><p><strong>描述</strong>：用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p></li></ul>',9),i=l(`<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myDate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">myDate </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 返回 true</span></span>
<span class="line"><span style="color:#E1E4E8;">myDate </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 返回 true</span></span>
<span class="line"><span style="color:#E1E4E8;">myDate </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 返回 false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myDate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">myDate </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 返回 true</span></span>
<span class="line"><span style="color:#24292E;">myDate </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 返回 true</span></span>
<span class="line"><span style="color:#24292E;">myDate </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 返回 false</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><ol><li><p>原型链可可以被修改，导致检测结果不准确。</p></li><li><p>undefined和null没有构造函数，使用 instanceof 会抛出异常。</p></li><li><p>instanceof 一般用于判断对象，无法很好的满足基本数据类型的判定。</p></li></ol></div>`,2),d={id:"constructor",tabindex:"-1"},F=s("a",{class:"header-anchor",href:"#constructor","aria-label":'Permalink to "constructor<tag type="danger"/>"'},"​",-1),u=l(`<ul><li><strong>描述</strong>：返回实例对象的构造函数</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">((</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Number) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Array) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(undefined.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Array) </span><span style="color:#6A737D;">// 报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">((</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Number) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Array) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(undefined.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Array) </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>null，undefined 没有构造函数，自然也就访问不到该属性，因此不能使用此属性来判断。</p><p>constructor 可以被改写，所以不一定准确。</p></div><h2 id="symbol-tostringtag" tabindex="-1">Symbol.toStringTag <a class="header-anchor" href="#symbol-tostringtag" aria-label="Permalink to &quot;Symbol.toStringTag&quot;">​</a></h2><ul><li><strong>描述</strong>： <ol><li>Symbol.toStringTag 内置通用（well-known）symbol 是一个字符串值属性，用于创建对象的默认字符串描述。它由 Object.prototype.toString() 方法内部访问。</li><li>大多数内置的对象提供了它们自己的 [Symbol.toStringTag] 属性。</li><li>toStringTag 适用于所有 DOM 原型对象。</li><li>由于 2020 年年中 WebIDL 规范的变化，浏览器正在向所有 DOM 原型对象添加 Symbol.toStringTag 属性。</li><li>所有内置对象的 [Symbol.toStringTag] 属性都是不可写的（writable）、不可枚举的（enumerable）但是可配置的（configurable）。</li></ol></li></ul><p>使用 toStringTag 自定义标签</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ValidatorClass</span><span style="color:#E1E4E8;"> {} </span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ValidatorClass</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// &quot;[object Object]&quot;</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ValidatorClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> [Symbol.toStringTag]() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myValidator&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ValidatorClass</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// &quot;[object myValidator]&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ValidatorClass</span><span style="color:#24292E;"> {} </span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ValidatorClass</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// &quot;[object Object]&quot;</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ValidatorClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> [Symbol.toStringTag]() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myValidator&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ValidatorClass</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// &quot;[object myValidator]&quot;</span></span></code></pre></div><p>toStringTag 适用于所有 DOM 原型对象</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">test.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// [object HTMLButtonElement]</span></span>
<span class="line"><span style="color:#E1E4E8;">test[Symbol.toStringTag]; </span><span style="color:#6A737D;">// HTMLButtonElement</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;button&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">test.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// [object HTMLButtonElement]</span></span>
<span class="line"><span style="color:#24292E;">test[Symbol.toStringTag]; </span><span style="color:#6A737D;">// HTMLButtonElement</span></span></code></pre></div>`,9),g={id:"object-prototype-tostring-call",tabindex:"-1"},b=s("a",{class:"header-anchor",href:"#object-prototype-tostring-call","aria-label":'Permalink to "Object.prototype.toString.call()<tag type="super"/>"'},"​",-1),C=s("strong",null,"描述",-1),B=s("li",null,"其本质上就是调用[Symbol.toStringTag]的属性。",-1),h=l(`<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">))          </span><span style="color:#6A737D;">// [object String]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))            </span><span style="color:#6A737D;">// [object Number]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">))         </span><span style="color:#6A737D;">// [object Null]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">))    </span><span style="color:#6A737D;">// [object Undefined]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">))         </span><span style="color:#6A737D;">// [object Boolean]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">({}))           </span><span style="color:#6A737D;">// [object Object]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">([]))           </span><span style="color:#6A737D;">// [object Array]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){})) </span><span style="color:#6A737D;">// [object Function]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Map))      </span><span style="color:#6A737D;">// [object Map]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> WeakSet))  </span><span style="color:#6A737D;">// [object WeakSet]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">))          </span><span style="color:#6A737D;">// [object String]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))            </span><span style="color:#6A737D;">// [object Number]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">))         </span><span style="color:#6A737D;">// [object Null]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">))    </span><span style="color:#6A737D;">// [object Undefined]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">))         </span><span style="color:#6A737D;">// [object Boolean]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">({}))           </span><span style="color:#6A737D;">// [object Object]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">([]))           </span><span style="color:#6A737D;">// [object Array]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){})) </span><span style="color:#6A737D;">// [object Function]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Map))      </span><span style="color:#6A737D;">// [object Map]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> WeakSet))  </span><span style="color:#6A737D;">// [object WeakSet]</span></span></code></pre></div><p>封装成为直观的函数</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">valueType</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(value).</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">valueType</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// &#39;Number&#39;</span></span>
<span class="line"><span style="color:#B392F0;">valueType</span><span style="color:#E1E4E8;">([]) </span><span style="color:#6A737D;">// &#39;Array&#39;</span></span>
<span class="line"><span style="color:#B392F0;">valueType</span><span style="color:#E1E4E8;">({}) </span><span style="color:#6A737D;">// &#39;Object&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">valueType</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(value).</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">valueType</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// &#39;Number&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">valueType</span><span style="color:#24292E;">([]) </span><span style="color:#6A737D;">// &#39;Array&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">valueType</span><span style="color:#24292E;">({}) </span><span style="color:#6A737D;">// &#39;Object&#39;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">强类推荐</p><p>适用于所有数据类型：几乎可以适用于所有可能的数据类型，包括基本数据类型和复杂数据类型。 不易受篡改，全面，可靠。</p></div>`,4);function A(D,j,S,_,m,v){const o=t("lines"),p=t("tag");return c(),r("div",null,[E,s("blockquote",null,[s("p",null,[n("检测 "),a(o,{text:"constructor 的 prototype"}),n(" 否在存在于"),a(o,{text:"object 的原型链上"}),n("。")])]),i,s("h2",d,[n("constructor"),a(p,{type:"danger"}),n(),F]),u,s("h2",g,[n("Object.prototype.toString.call()"),a(p,{type:"super"}),n(),b]),s("ul",null,[s("li",null,[C,n("： "),s("ol",null,[B,s("li",null,[a(o,{text:"一些值没有 [Symbol.toStringTag]属性，但是有toString()。这也是为什么他是判定最准确最全面的方法"}),n("。")])])])]),h])}const k=e(y,[["render",A]]);export{T as __pageData,k as default};
