import{_ as t,o as a,c as e,Q as s}from"./chunks/framework.5b0c684c.js";const r="/blogs/assets/data-structure_4-5_1.a0a538b2.png",_="/blogs/assets/data-structure_4-5_2.83a2e409.png",g=JSON.parse('{"title":"选择排序","description":"","frontmatter":{},"headers":[],"relativePath":"data-structure/4-5.md","filePath":"data-structure/4-5.md","lastUpdated":1729031503000}'),o={name:"data-structure/4-5.md"},c=s('<h1 id="选择排序" tabindex="-1">选择排序 <a class="header-anchor" href="#选择排序" aria-label="Permalink to &quot;选择排序&quot;">​</a></h1><ul><li>最小（大）元素从未排序数组中选择出来，并与最左（右）边的元素交换；</li><li>此过程继续将未排序的数组边界向右移动一个元素，一直循环...</li><li>该算法不适用于大数据集，因为其平均和最差情况复杂度为0（n 2 ），其中n是项目数。</li></ul><p><img src="'+r+'" alt="图片"></p><p>代码实现</p><p><img src="'+_+'" alt="图片"></p><p>想要提升效率必须的问题就是<code>如何快速找到最小元</code>？</p>',6),i=[c];function n(l,d,p,u,m,h){return a(),e("div",null,i)}const T=t(o,[["render",n]]);export{g as __pageData,T as default};
