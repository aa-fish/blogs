import{_ as t,o as a,c as s,Q as e}from"./chunks/framework.5b0c684c.js";const r="/blogs/assets/data-structure_4-7_1.5b7d95e5.png",o="/blogs/assets/data-structure_4-7_2.98481e2b.png",c="/blogs/assets/data-structure_4-7_3.6b0342c4.png",_="/blogs/assets/data-structure_4-7_4.4267cdb0.png",d="/blogs/assets/data-structure_4-7_5.475661b2.png",n="/blogs/assets/data-structure_4-7_6.ab07d4e3.png",i="/blogs/assets/data-structure_4-7_7.ab48289a.png",l="/blogs/assets/data-structure_4-7_8.c6994619.png",T=JSON.parse('{"title":"归并排序","description":"","frontmatter":{},"headers":[],"relativePath":"data-structure/4-7.md","filePath":"data-structure/4-7.md","lastUpdated":1729031503000}'),p={name:"data-structure/4-7.md"},u=e('<h1 id="归并排序" tabindex="-1">归并排序 <a class="header-anchor" href="#归并排序" aria-label="Permalink to &quot;归并排序&quot;">​</a></h1><p>有序子列的归并问题，与前面的<code>多选式存放</code>是一样的。</p><p><img src="'+r+'" alt="图片"></p><p><strong>有序子列的归并代码实现</strong><img src="'+o+'" alt="图片"></p><h2 id="分而治之策略" tabindex="-1">分而治之策略 <a class="header-anchor" href="#分而治之策略" aria-label="Permalink to &quot;分而治之策略&quot;">​</a></h2><p><strong>分而治之-具体实现有两种方式（递归、非递归）</strong></p><h2 id="分而治之-递归" tabindex="-1">分而治之-递归 <a class="header-anchor" href="#分而治之-递归" aria-label="Permalink to &quot;分而治之-递归&quot;">​</a></h2><p><img src="'+c+'" alt="图片"> 这个实现方式非常不友好，我们只需要传入<code>待排序的数组</code>，和<code>数组长度</code>两个参数。而不是一堆参数，下面是优化后写法。 <img src="'+_+'" alt="图片"> 这个带这着TmpA，只需free一次（释放），如果不这样做，就是这面这种情况，好的做法是只申请一个临时数组。 <img src="'+d+'" alt="图片"></p><h2 id="分而治之-非递归" tabindex="-1">分而治之-非递归 <a class="header-anchor" href="#分而治之-非递归" aria-label="Permalink to &quot;分而治之-非递归&quot;">​</a></h2><p>下面是非递归的实现思路和步骤。 <img src="'+n+'" alt="图片"> 一趟的归并的代码实现 <img src="'+i+'" alt="图片"> 完整归并接口实现 <img src="'+l+'" alt="图片"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>归并排序虽然很稳定，但是归并排序需要额外的空间（临时数组来回倒数据），在实际排序应用中不被用作<code>内排序（所有数据在内存中完成）</code>。归并排序在什么情况特别好呢？就是在<code>外排序</code>的时候非常好。</p>',12),h=[u];function m(g,b,f,q,P,x){return a(),s("div",null,h)}const S=t(p,[["render",m]]);export{T as __pageData,S as default};
