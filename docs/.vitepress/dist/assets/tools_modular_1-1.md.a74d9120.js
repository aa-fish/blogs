import{_ as n,C as p,o as t,c as r,k as s,a as l,H as o,Q as e}from"./chunks/framework.5b0c684c.js";const v=JSON.parse('{"title":"模块化的规范","description":"","frontmatter":{},"headers":[],"relativePath":"tools/modular/1-1.md","filePath":"tools/modular/1-1.md","lastUpdated":1729031503000}'),c={name:"tools/modular/1-1.md"},i=e('<h1 id="模块化的规范" tabindex="-1">模块化的规范 <a class="header-anchor" href="#模块化的规范" aria-label="Permalink to &quot;模块化的规范&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#commonjs">CommonJs</a><ul><li><a href="#commonjs规范特点">CommonJs规范特点</a></li><li><a href="#module、exports、require、global">module、exports、require、global</a></li></ul></li><li><a href="#amd">AMD</a></li><li><a href="#cmd">CMD</a></li><li><a href="#umd">UMD</a></li><li><a href="#es-module">ES Module</a><ul><li><a href="#es-module规范特点">ES Module规范特点</a></li></ul></li><li><a href="#模块化对比">模块化对比</a></li><li><a href="#commonjs语法">CommonJs语法</a></li><li><a href="#es-module语法">ES Module语法</a><ul><li><a href="#export">export</a></li><li><a href="#export-default">export default</a></li><li><a href="#import">import</a></li></ul></li><li><a href="#babel-转码器">Babel 转码器</a></li></ul></nav>',2),d=s("h2",{id:"commonjs",tabindex:"-1"},[l("CommonJs "),s("a",{class:"header-anchor",href:"#commonjs","aria-label":'Permalink to "CommonJs"'},"​")],-1),u=s("h3",{id:"commonjs规范特点",tabindex:"-1"},[l("CommonJs规范特点 "),s("a",{class:"header-anchor",href:"#commonjs规范特点","aria-label":'Permalink to "CommonJs规范特点"'},"​")],-1),E=s("code",null,"服务器端",-1),y=s("code",null,"Node.js",-1),m=s("li",null,[s("p",null,"模块可以多次加载，但只在首次加载时运行（单例模式），然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。（所以代码文件有改动的话，是需要重新启动程序的）")],-1),h=e(`<div class="tip custom-block"><p class="custom-block-title">加载流程</p><ol><li>检查 Module._cache，是否缓存之中有指定模块</li><li>如果缓存之中没有，就创建一个新的Module实例</li><li>将它保存到缓存</li><li>使用 module.load() 加载指定的模块文件，读取文件内容之后，使用 module.compile() 执行文件代码</li><li>如果加载/解析过程报错，就从缓存删除该模块</li><li>返回该模块的 module.exports</li></ol></div><h3 id="module、exports、require、global" tabindex="-1">module、exports、require、global <a class="header-anchor" href="#module、exports、require、global" aria-label="Permalink to &quot;module、exports、require、global&quot;">​</a></h3><p>CommonJS的核心思想就是通过 require 方法来同步加载所要依赖的其他模块，然后通过 exports 或者 module.exports 来导出需要暴露的接口。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleA</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;module.a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//核心模块时，不需要带路径</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">moduleA</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;module.a&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//核心模块时，不需要带路径</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span></code></pre></div><h2 id="amd" tabindex="-1">AMD <a class="header-anchor" href="#amd" aria-label="Permalink to &quot;AMD&quot;">​</a></h2>`,5),_=s("code",null,"Asynchronous Module Definition",-1),b=s("li",null,[s("p",null,"AMD 规范的实现主要是 RequireJS，它采用异步方式加载模块，模块的加载不影响它后面语句的运行，可以并行加载多个模块。")],-1),C=s("li",null,[s("p",null,[l("用"),s("code",null,"require.config()"),l("指定引用路径等，用"),s("code",null,"define()"),l("定义模块，用"),s("code",null,"require()"),l("加载模块。")])],-1),x=e('<h2 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;CMD&quot;">​</a></h2><p>CMD（Common Module Definition），在JavaScript中，CMD 并不是一个常见的模块化规范。CMD规范是国内发展出来的（阿里SeaJS），SeaJS要解决的问题和requireJS一样，只不过在模块定义方式和模块加载时机上有所不同。</p><h2 id="umd" tabindex="-1">UMD <a class="header-anchor" href="#umd" aria-label="Permalink to &quot;UMD&quot;">​</a></h2><p>UMD（Universal Module Definition）= CommonJS + AMD + CMD 是一种通用的模块化规范，旨在兼容多种环境如：服务端、浏览器。</p><ul><li><p>它能够根据当前环境选择合适的模块加载方式，如 AMD、CommonJS 或全局变量。</p></li><li><p>UMD 提供了对多种模块加载规范的支持，使得模块可以在不同的环境中无缝运行。</p></li><li><p>UMD 不依赖于任何特定的模块加载器或库，可以独立使用。</p></li></ul><h2 id="es-module" tabindex="-1">ES Module <a class="header-anchor" href="#es-module" aria-label="Permalink to &quot;ES Module&quot;">​</a></h2><p>从 ES6 开始， JavaScript 才真正意义上有自己的模块化规范，ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p><h3 id="es-module规范特点" tabindex="-1">ES Module规范特点 <a class="header-anchor" href="#es-module规范特点" aria-label="Permalink to &quot;ES Module规范特点&quot;">​</a></h3><ul><li><p><strong>静态化设计</strong>：ES Module 的设计思想是静态化，即编译时加载。在编译时就能确定模块的依赖关系、输入和输出的变量。这样的设计使得在运行时，引擎能够更快地处理模块加载，提高了执行效率。</p></li><li><p><strong>只读引用</strong>：相较于 CommonJS 的值拷贝，ES Module 采用的是值引用。当使用 import 命令引入模块时，得到的是一个只读引用，同时意味着模块内部的变化会反应在外部。</p></li><li><p><strong>严格模式</strong>：自动开启严格模式，提高了代码的安全性和可靠性 &quot;use strict&quot;。</p></li><li><p><strong>按需加载</strong>：当你使用 import 命令引入模块时，只有被引入的部分会被加载和执行，而不是整个模块。</p></li><li><p><strong>动态加载模块</strong>：使用 import() 函数可以在运行时动态加载模块，返回一个 Promise 对象。import() 类似于 Node.js 的 require() 方法，区别主要是前者是异步加载，后者是同步加载。</p></li><li><p>ES Module模块内的内容通过 cors 去请求外部js模块。</p></li></ul><h2 id="模块化对比" tabindex="-1">模块化对比 <a class="header-anchor" href="#模块化对比" aria-label="Permalink to &quot;模块化对比&quot;">​</a></h2><ol><li><p>AMD/CMD/CommonJs 是js模块化开发的规范，对应的实现是require.js/sea.js/Node.js。</p></li><li><p>CommonJs 主要针对服务端，AMD/CMD/ES Module主要针对浏览器端(服务端一般采用同步加载的方式，浏览器端需要异步加载)。</p></li><li><p>AMD/CMD区别：</p></li></ol><blockquote><p>都是异步加载js模块。</p><p>AMD 推崇依赖前置，CMD 推崇依赖就近。</p><p>AMD 是预加载，CMD是懒加载。</p><p>AMD无法满足按需加载，CMD支持按需加载。</p></blockquote><ol start="4"><li>CommonJs和ES Module的区别：</li></ol><blockquote><p>CommonJS 模块输出的是一个值的拷贝，ES Module 模块输出的是值的引用。</p><p>CommonJS 模块是运行时加载，ES Module 模块是编译时输出接口。</p><p>CommonJS 模块的require()是同步加载模块，ES Module 模块的import命令是异步加载，有一个独立的模块依赖的解析阶段。</p></blockquote>',14),D=e(`<h2 id="commonjs语法" tabindex="-1">CommonJs语法 <a class="header-anchor" href="#commonjs语法" aria-label="Permalink to &quot;CommonJs语法&quot;">​</a></h2><h2 id="es-module语法" tabindex="-1">ES Module语法 <a class="header-anchor" href="#es-module语法" aria-label="Permalink to &quot;ES Module语法&quot;">​</a></h2><h3 id="export" tabindex="-1">export <a class="header-anchor" href="#export" aria-label="Permalink to &quot;export&quot;">​</a></h3><p>export 命令能够对外输出的接口就是两类：</p><ol><li>块级 { } ： <blockquote><p>块级包裹的变量。(此处{ } 不是对象 ，是一个区块)</p></blockquote></li><li>var、let、const、function、class： <blockquote><p>带上关键字申明变量</p></blockquote></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1&#39;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { x,y,z }</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;b&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">c</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;c&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">() { }</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;"> { }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { x,y,z }</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;b&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">c</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;c&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">() { }</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">E</span><span style="color:#24292E;"> { }</span></span></code></pre></div><h3 id="export-default" tabindex="-1">export default <a class="header-anchor" href="#export-default" aria-label="Permalink to &quot;export default&quot;">​</a></h3><p>export default 相当于默认导出一个区块, 这个区块被命名为 default 的变量, 接收的时候时候可以自由命名</p><ol><li>{ } ：</li></ol><blockquote><p>此处{ }是对象行为</p></blockquote><ol start="2"><li>不能接 var、let、const</li></ol><h3 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;import&quot;">​</a></h3><p>import 这里的 { } 并不是解构</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {a} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./xxx.js&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {a} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./xxx.js&#39;</span></span></code></pre></div><h2 id="babel-转码器" tabindex="-1">Babel 转码器 <a class="header-anchor" href="#babel-转码器" aria-label="Permalink to &quot;Babel 转码器&quot;">​</a></h2><p>Babel 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在老版本的浏览器执行。这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install --save-dev @babel/core</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm install --save-dev @babel/core</span></span></code></pre></div>`,17);function F(S,f,q,M,A,k){const a=p("lines");return t(),r("div",null,[i,s("p",null,[l("为了避免人为编排模块（依赖关系问题），逐步出现了一系列的工具库（"),o(a,{text:"模块化规范+模块化加载器"}),l("）。不用再手动在HTML中引入代码模块。")]),d,u,s("ul",null,[s("li",null,[s("p",null,[l("CommonJS 主要运行于"),E,l("，该规范指出，"),o(a,{text:"一个单独的文件就是一个模块"}),l("，其内部定义的变量是属于这个模块的，不会对外暴露，也就是说不会污染全局变量。 "),y,l("为主要实践者。")])]),s("li",null,[o(a,{text:"CommonJS 是同步加载模块"}),l("的，模块加载的顺序，按照其在代码中出现的顺序。在服务器端，文件都是保存在硬盘上，所以同步加载没有问题，但是对于浏览器端，需要将文件从服务器端请求过来，那么同步加载就不适用了，所以，CommonJS是不适用于浏览器端的。")]),m,s("li",null,[o(a,{text:"CommonJS输出是值的拷贝"}),l("（require返回的值是被输出的值的拷贝，模块内部的变化也不会影响这个值）。")])]),h,s("p",null,[l("AMD是"),_,l('的缩写，意思就是"异步模块定义"。'),o(a,{text:"适用于浏览器"}),l("。")]),s("ul",null,[b,s("li",null,[s("p",null,[l("必须提前加载所有的依赖，所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。（"),o(a,{text:"并且不能按需加载"}),l("）")])]),C]),x,o(a,{text:"现阶段着重遵循CommonJS、ES Module"}),D])}const J=n(c,[["render",F]]);export{v as __pageData,J as default};
