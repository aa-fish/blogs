import{_ as l,C as o,o as p,c as e,H as t,a,k as s,Q as c}from"./chunks/framework.5b0c684c.js";const m=JSON.parse('{"title":"iterator[迭代器]","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/es6/1-15.md","filePath":"web-core/es6/1-15.md","lastUpdated":1729031503000}'),r={name:"web-core/es6/1-15.md"},E=s("h1",{id:"iterator-迭代器",tabindex:"-1"},[a("iterator[迭代器] "),s("a",{class:"header-anchor",href:"#iterator-迭代器","aria-label":'Permalink to "iterator[迭代器]"'},"​")],-1),y=s("hr",null,null,-1),i=c(`<p>通过调用迭代器的next()方法，可以依次获取集合中的每个元素，并返回一个包含 value 和 done 属性的对象。value表示当前元素的值，done表示是否已经遍历完所有元素。</p><ul><li>ES6 引入了新的遍历命令<code>for...of</code>，只要实现了迭代器接口，就可以使用for...of循环或者手动调用next()方法来进行遍历，该循环会自动去寻找 Iterator 接口。</li></ul><div class="info custom-block"><p class="custom-block-title">使用for...of循环或者手动调用next()方法时运行过程：</p><ol><li>首先，在需要进行遍历操作时，通过调用集合对象上的[Symbol.iterator]方法获取到该集合对象对应的默认迭代器。</li><li>然后，在每次调用next()方法时，迭代器会执行相应的操作，并返回一个包含 value 和 done 属性的对象。</li><li>如果 done 为 false ，则表示还有更多的元素需要遍历，此时 value 属性表示当前遍历到的值。</li><li>如果done为true，则表示已经遍历完所有元素，此时value属性为undefined。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> iterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr[Symbol.iterator]();</span></span>
<span class="line"><span style="color:#E1E4E8;">iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// { value: &#39;a&#39;, done: false }</span></span>
<span class="line"><span style="color:#E1E4E8;">iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// { value: &#39;b&#39;, done: false }</span></span>
<span class="line"><span style="color:#E1E4E8;">iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// { value: &#39;c&#39;, done: false }</span></span>
<span class="line"><span style="color:#E1E4E8;">iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// { value: undefined, done: true }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> iterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[Symbol.iterator]();</span></span>
<span class="line"><span style="color:#24292E;">iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// { value: &#39;a&#39;, done: false }</span></span>
<span class="line"><span style="color:#24292E;">iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// { value: &#39;b&#39;, done: false }</span></span>
<span class="line"><span style="color:#24292E;">iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// { value: &#39;c&#39;, done: false }</span></span>
<span class="line"><span style="color:#24292E;">iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// { value: undefined, done: true }</span></span></code></pre></div></div><details class="details custom-block"><summary>使用generator函数实现iterator示例</summary><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myIterable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [Symbol.iterator]: </span><span style="color:#F97583;">function*</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">myIterable] </span><span style="color:#6A737D;">// [1, 2, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myIterable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [Symbol.iterator]: </span><span style="color:#D73A49;">function*</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">myIterable] </span><span style="color:#6A737D;">// [1, 2, 3]</span></span></code></pre></div><p>为普通对象实现iterator接口</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">, b: </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;">, c: </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;">, d: </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">obj[Symbol.iterator] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function*</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (len </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      len</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)[(length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> len].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 for of</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ([i] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i); </span><span style="color:#6A737D;">// &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 拓展运算符</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">obj] </span><span style="color:#6A737D;">// [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">, b: </span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;">, c: </span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;">, d: </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">obj[Symbol.iterator] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function*</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      len</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)[(length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> len].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 for of</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ([i] </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i); </span><span style="color:#6A737D;">// &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 拓展运算符</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">obj] </span><span style="color:#6A737D;">// [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</span></span></code></pre></div></details><h2 id="for-of" tabindex="-1">for of <a class="header-anchor" href="#for-of" aria-label="Permalink to &quot;for of&quot;">​</a></h2><ul><li>一个数据结构只要部署了Symbol.iterator属性，就被视为具有 iterator 接口，就可以用for...of循环遍历它的成员。</li></ul><blockquote><p>for...of循环内部调用的是数据结构的Symbol.iterator方法。</p></blockquote><ul><li>for...of循环可以使用的范围包括<code>数组</code>、<code>Set</code> 和 <code>Map</code> 结构、<code>类数组</code>的对象（比如arguments对象、DOM NodeList 对象）、<code>Generator</code> 对象，以及<code>字符串</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;d&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> arr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// a  b  c  d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;HELLO&#39;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> str) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// H E L L O</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> engines </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;Gecko&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Trident&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Webkit&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Webkit&quot;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> engines) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Gecko  Trident  Webkit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> mapData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">mapData.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;edition&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">mapData.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;committee&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;TC39&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">mapData.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;standard&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ECMA-262&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> [key, value] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> mapData) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// edition: 6</span></span>
<span class="line"><span style="color:#6A737D;">// committee: TC39</span></span>
<span class="line"><span style="color:#6A737D;">// standard: ECMA-262</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;d&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> arr) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// a  b  c  d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;HELLO&#39;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> str) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// H E L L O</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> engines </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;Gecko&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Trident&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Webkit&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Webkit&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> engines) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Gecko  Trident  Webkit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> mapData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">mapData.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;edition&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">mapData.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;committee&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;TC39&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">mapData.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;standard&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ECMA-262&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [key, value] </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> mapData) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// edition: 6</span></span>
<span class="line"><span style="color:#6A737D;">// committee: TC39</span></span>
<span class="line"><span style="color:#6A737D;">// standard: ECMA-262</span></span></code></pre></div><h2 id="for-of、for-in、foreach" tabindex="-1">for of、for in、forEach <a class="header-anchor" href="#for-of、for-in、foreach" aria-label="Permalink to &quot;for of、for in、forEach&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">for of、for in、forEach 比较</p><p><code>for of</code>：</p><ul><li>用于遍历部署了[Symbol.iterator]接口的对象。如：<code>数组</code>、<code>Set</code> 、<code>Map</code> 、<code>类数组</code>、<code>Generator</code> 以及<code>字符串</code>。</li><li>for of 遍历 能正确识别 Unicode 字符。</li><li>无法直接遍历普通对象。</li><li>可以正确响应 <code>break</code>、<code>continue</code> 和 <code>return</code> 语句（都是终止循环） <blockquote><p>break、return 是终止循环，continue是跳出当前循环，进入下一次循环。</p></blockquote></li></ul><hr><p><code>for in</code>：</p><ul><li>该循环用于遍历对象的可枚举属性，包括继承的属性。它迭代对象的<code>键</code>，而非值。</li><li>for in 遍历的是对象的属性，遍历的结果顺序是不确定的。</li><li>数字的键名，会被转为 String 类型。</li><li>可以正确响应 <code>break</code>、<code>continue</code> 和 <code>return</code> 语句（都是终止循环） <blockquote><p>break、return 是终止循环，continue是跳出当前循环，进入下一次循环。</p></blockquote></li></ul><hr><p><code>forEach</code>：</p><ul><li>它是数组的一个内置循环方法。</li><li>无法使用<code>break</code>、<code>continue</code>、<code>return</code>终止循环，只能通过抛出异常跳出循环。</li></ul></div><h2 id="迭代器-中的-return-throw" tabindex="-1">[迭代器] 中的 return()，throw() <a class="header-anchor" href="#迭代器-中的-return-throw" aria-label="Permalink to &quot;[迭代器] 中的 return()，throw()&quot;">​</a></h2><ul><li>遍历器对象除了具有<code>next()</code>方法，还可以具有<code>return()</code>方法和<code>throw()</code>方法。</li><li>如果自己写遍历器对象生成函数，那么<code>next()</code>方法是必须部署的，<code>return()</code>方法和<code>throw()</code>方法是否部署是可选的。</li></ul><p>for...of循环提前退出，通常是因为出错，或者有break语句--此时就会调用return()方法。</p><p>注意：<code>return()</code>方法必须返回一个对象，这是 Generator 规格决定的。</p><p>注意：throw方法主要是配合 Generator 函数使用，一般的遍历器对象用不到这个方法。</p><h2 id="拓展" tabindex="-1">拓展 <a class="header-anchor" href="#拓展" aria-label="Permalink to &quot;拓展&quot;">​</a></h2><p><strong>迭代器对象</strong>（Iterator）：</p><blockquote><p>迭代器对象是具有next方法的对象。next方法用于逐个访问集合中的元素。每次调用next方法，它都会返回一个包含value和done属性的对象。</p><p>value表示当前元素的值，而done是一个布尔值，表示是否已经遍历完了所有元素，当done为true 表示遍历完成。</p></blockquote><p><strong>可迭代对象</strong>（Iterable）：</p><blockquote><p>可迭代对象是那些具有<code>[Symbol.iterator]</code>方法的对象，该方法返回一个迭代器对象。常见的可迭代对象包括数组、字符串、Map、Set等。</p></blockquote><p><strong>迭代协议</strong></p><ul><li>迭代协议并不是新的内置实现或语法，而是协议。这些协议可以被任何遵循某些约定的对象来实现。</li><li>迭代协议具体分为两个协议：<code>可迭代协议</code>和<code>迭代器协议</code>。</li></ul><div class="info custom-block"><p class="custom-block-title">可迭代协议</p><ul><li><p>可迭代协议允许 JavaScript 对象定义或定制它们的迭代行为，例如，在一个 for..of 结构中，哪些值可以被遍历到。一些内置类型同时是内置的可迭代对象，并且有默认的迭代行为，比如 Array 或者 Map，而其他内置类型则不是（比如 Object）。</p></li><li><p>要成为可迭代对象，该对象必须实现 <code>[Symbol.iterator]()</code> 方法，这意味着对象（或者它原型链上的某个对象）必须有一个键为 <code>[Symbol.iterator]</code> 的属性，可通过常量 Symbol.iterator 访问该属性：</p><blockquote><p>[Symbol.iterator]：一个无参数的函数，其返回值为一个符合迭代器协议的对象。</p></blockquote></li><li><p>当一个对象需要被迭代的时候（比如被置入一个 for...of 循环时），首先，会不带参数调用它的 <code>[Symbol.iterator]()</code> 方法，然后使用此方法返回的迭代器获得要迭代的值。</p></li><li><p>值得注意的是调用此无参数函数时，它将作为对可迭代对象的方法进行调用。因此，在函数内部，this 关键字可用于访问可迭代对象的属性，以决定在迭代过程中提供什么。</p></li><li><p>此函数可以是普通函数，也可以是生成器函数，以便在调用时返回迭代器对象。在此生成器函数的内部，可以使用 yield 提供每个条目。</p></li></ul></div><div class="info custom-block"><p class="custom-block-title">迭代器协议</p><ul><li>迭代器协议定义了产生一系列值（无论是有限个还是无限个）的标准方式，当值为有限个时，所有的值都被迭代完毕后，则会返回一个默认返回值。</li><li>只有实现了一个拥有以下语义（semantic）的 next() 方法，一个对象才能成为迭代器： <blockquote><p>next()：无参数或者接受一个参数的函数，并返回符合 IteratorResult 接口的对象（见下文）。如果在使用迭代器内置的语言特征（例如 for...of）时，得到一个非对象返回值（例如 false 或 undefined），将会抛出 TypeError（&quot;iterator.next() returned a non-object value&quot;）。</p></blockquote></li><li>所有迭代器协议的方法（next()、return() 和 throw()）都应返回实现 IteratorResult 接口的对象。它必须有以下属性： <blockquote><p><code>done[可选]</code>：</p><p>如果迭代器能够生成序列中的下一个值，则返回 false 布尔值。（这等价于没有指定 done 这个属性。）</p><p>如果迭代器能够生成序列中的下一个值，则返回 false 布尔值。（这等价于没有指定 done 这个属性。）</p><p><code>value[可选]</code>：</p><p>迭代器返回的任何 JavaScript 值。done 为 true 时可省略。</p></blockquote></li><li>实际上，两者都不是严格要求的；如果返回没有任何属性的对象，则实际上等价于 { done: false, value: undefined }。</li><li>如果一个迭代器返回一个 done: true 的结果，则对任何 next() 的后续调用也返回 done: true，尽管这在语言层面不是强制的。</li><li>next 方法可以接受一个值，该值将提供给方法体。任何内置的语言特征都将不会传递任何值。传递给生成器 next 方法的值将成为相应 yield 表达式的值。</li><li>可选地，迭代器也实现了 <code>return(value)</code> 和 <code>throw(exception)</code>方法，这些方法在调用时告诉迭代器，调用者已经完成迭代，并且可以执行任何必要的清理（例如关闭数据库连接）。 <blockquote><p><code>return(value)[可选]</code>：</p><p>无参数或者接受一个参数的函数，并返回符合 IteratorResult 接口的对象，其 value 通常等价于传递的 value，并且 done 等于 true。调用这个方法表明迭代器的调用者不打算调用更多的 next()，并且可以进行清理工作。</p><p><code>throw(exception)[可选]</code>：</p><p>无参数或者接受一个参数的函数，并返回符合 IteratorResult 接口的对象，通常 done 等于 true。调用这个方法表明迭代器的调用者监测到错误的状况，并且 exception 通常是一个 Error 实例。</p></blockquote></li></ul><p>很容易使一个迭代器也可迭代：只需实现 <code>[Symbol.iterator]()</code> 方法，并返回它的 this。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myIterator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">/**... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  [Symbol.iterator]() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myIterator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">/**... */</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  [Symbol.iterator]() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title">异步迭代器和异步可迭代协议</p><ul><li>用于异步迭代的协议，命名为异步迭代器和异步可迭代协议。它们与可迭代和迭代器协议有着非常类似的接口，只是从调用迭代器方法的每个返回值都包装在一个 promise 中。</li><li>当对象实现以下方法时，它会实现异步可迭代协议： <blockquote><p><code>[Symbol.asyncIterator]</code>：返回对象的无参数函数，并且符合异步迭代器协议。</p></blockquote></li><li>当对象实现以下方法时，它会实现异步迭代器协议： <blockquote><p><code>next()</code>：无参数或者接受一个参数的函数，并返回 promise。promise 兑现为一个对象，该对象符合 IteratorResult 接口，并且这些属性与同步迭代器有着相同的语义。</p><p><code>return(value)[可选]</code>：无参数或者接受一个参数的函数，并返回 promise。promise 兑现为一个对象，该对象符合 IteratorResult 接口，并且这些属性与同步迭代器有着相同的语义。</p><p><code>throw(exception)[可选]</code>：无参数或者接受一个参数的函数，并返回 promise。promise 兑现为一个对象，该对象符合 IteratorResult 接口，并且这些属性与同步迭代器有着相同的语义。</p></blockquote></li></ul></div><div class="info custom-block"><p class="custom-block-title">语言和迭代协议之间的交互</p><p>JavaScript 语言指定了产生或使用可迭代对象和迭代器的 API。</p><p><strong>内置的可迭代对象</strong>:</p><ul><li>String、Array、TypedArray、Map、Set 以及 Intl.Segments 都是内置的可迭代对象，因为它们的每个 prototype 对象都实现了 <code>[Symbol.iterator]()</code> 方法。</li><li>此外，arguments 对象和一些 DOM 集合类型，如 NodeList 也是可迭代的。目前，没有内置的异步可迭代对象。</li></ul><p>生成器函数返回生成器对象，它们是可迭代的迭代器。异步生成器函数返回异步生成器对象，它们是异步可迭代的迭代器。</p><p>从内置迭代返回的迭代器实际上都继承了一个公共类（目前尚未暴露），该类实现了上述 <code>[Symbol.iterator]() { return this; }</code> 方法，使它们都是可迭代的迭代器。将来，除了迭代器协议要求的 next() 方法外，这些内置迭代器可能还有其他辅助方法。你可以通过在图形控制台中记录迭代器的原型链来检查它。</p></div><div class="info custom-block"><p class="custom-block-title"><strong>接受可迭代对象的内置 API</strong></p><ul><li>Map()</li><li>WeakMap()</li><li>Set()</li><li>WeakSet()</li><li>Promise.all()</li><li>Promise.allSettled()</li><li>Promise.race()</li><li>Promise.any()</li><li>Array.from()</li><li>Object.groupBy()</li><li>Map.groupBy()</li></ul></div>`,28);function d(u,F,b,f,h,D){const n=o("lines");return p(),e("div",null,[E,y,t(n,{text:"它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作"}),a("。"),i])}const C=l(r,[["render",d]]);export{m as __pageData,C as default};
