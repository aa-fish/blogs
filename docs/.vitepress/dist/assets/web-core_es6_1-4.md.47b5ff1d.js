import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.5b0c684c.js";const D=JSON.parse('{"title":"正则表达式拓展","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/es6/1-4.md","filePath":"web-core/es6/1-4.md","lastUpdated":1729031503000}'),p={name:"web-core/es6/1-4.md"},o=l(`<h1 id="正则表达式拓展" tabindex="-1">正则表达式拓展 <a class="header-anchor" href="#正则表达式拓展" aria-label="Permalink to &quot;正则表达式拓展&quot;">​</a></h1><h2 id="构造函数修饰符优化" tabindex="-1">构造函数修饰符优化 <a class="header-anchor" href="#构造函数修饰符优化" aria-label="Permalink to &quot;构造函数修饰符优化&quot;">​</a></h2><p>ES5 与 ES6</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> regex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;xyz&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;i&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 第一个参数是：字符串</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> regex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">xyz</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">i</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 第一个参数是：正则表达</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> regex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">xyz</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;i&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 第一个参数是：正则表达，添加第二个修饰符参数 ，报错 （ES5）</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> regex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">abc</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">ig</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;i&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 第一个参数是：正则表达，添加第二个修饰符参数，i 覆盖ig （ES6）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> regex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xyz&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;i&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 第一个参数是：字符串</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> regex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/xyz/</span><span style="color:#D73A49;">i</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 第一个参数是：正则表达</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> regex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/xyz/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;i&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 第一个参数是：正则表达，添加第二个修饰符参数 ，报错 （ES5）</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> regex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/abc/</span><span style="color:#D73A49;">ig</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;i&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 第一个参数是：正则表达，添加第二个修饰符参数，i 覆盖ig （ES6）</span></span></code></pre></div><h2 id="u-修饰符" tabindex="-1">u 修饰符 <a class="header-anchor" href="#u-修饰符" aria-label="Permalink to &quot;u 修饰符&quot;">​</a></h2><p>ES6 对正则表达式添加了u修饰符，含义为“Unicode 模式”，用来正确处理大于\\uFFFF的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。</p><p><strong>点字符</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;𠮷&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(s) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(s) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;𠮷&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(s) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(s) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><blockquote><p>上面示例中，点（.）字符在正则表达式中，含义是除了换行符以外的任意单个字符。&#39;𠮷&#39; 对于码点大于0xFFFF的 Unicode 字符，点字符不能识别到，所以第一个返回false，加了u修饰符能够匹配到所以返回true。</p></blockquote><p><strong>Unicode 字符表示法</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\u</span><span style="color:#F97583;">{61}</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\u</span><span style="color:#F97583;">{61}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\u</span><span style="color:#DBEDFF;">{20BB7}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;𠮷&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\u</span><span style="color:#D73A49;">{61}</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\u</span><span style="color:#D73A49;">{61}</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\u</span><span style="color:#032F62;">{20BB7}/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;𠮷&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><blockquote><p>上面代码表示，如果不加u修饰符，正则表达式无法识别\\u{61}这种表示法，只会认为这匹配 61 个连续的u。</p></blockquote><p><strong>量词</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">a</span><span style="color:#F97583;">{2}</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;aa&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">a</span><span style="color:#F97583;">{2}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;aa&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">𠮷</span><span style="color:#F97583;">{2}</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;𠮷𠮷&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">𠮷</span><span style="color:#F97583;">{2}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;𠮷𠮷&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/a</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;aa&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#032F62;">/a</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;aa&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#032F62;">/𠮷</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;𠮷𠮷&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#032F62;">/𠮷</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;𠮷𠮷&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><blockquote><p>使用u修饰符后，所有量词都会正确识别码点大于0xFFFF的 Unicode 字符。</p></blockquote><p><strong>预定义模式</strong><br> u修饰符也影响到预定义模式，能否正确识别码点大于0xFFFF的 Unicode 字符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">\\S</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;𠮷&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">\\S</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;𠮷&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">\\S</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;𠮷&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">\\S</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;𠮷&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><blockquote><p>上面代码的<code>\\S</code>是预定义模式，匹配所有非空白字符。只有加了u修饰符，它才能正确匹配码点大于0xFFFF的 Unicode 字符。</p></blockquote><p><strong>i 修饰符</strong><br> 有些 Unicode 字符的编码不同，但是字型很相近，比如，<code>\\u004B</code>与<code>\\u212A</code>都是大写的 K。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[a-z]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">i</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u212A</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[a-z]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">iu</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u212A</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/</span><span style="color:#005CC5;">[a-z]</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">i</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u212A</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#005CC5;">[a-z]</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">iu</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u212A</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><blockquote><p>上面代码中，不加u修饰符，就无法识别非规范的K字符。</p></blockquote><p><strong>转义</strong><br> 没有u修饰符的情况下，正则中没有定义的转义（如逗号的转义,）无效，而在u模式会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\,</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// /\\,/</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\,</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\,</span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// /\\,/</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\,</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div><blockquote><p>上面代码中，没有u修饰符时，逗号前面的反斜杠是无效的，加了u修饰符就报错。</p></blockquote><h2 id="unicode-属性类" tabindex="-1">Unicode 属性类 <a class="header-anchor" href="#unicode-属性类" aria-label="Permalink to &quot;Unicode 属性类&quot;">​</a></h2><p>ES2018 引入了一种新的类的写法<code>\\p{...}</code>和<code>\\P{...}</code>，允许正则表达式匹配符合 Unicode 某种属性的所有字符。</p><blockquote><p><code>\\P{…}</code> 是<code>\\p{…}</code>的反向匹配，即匹配不满足条件的字符。 注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上<code>u修饰符</code>。如果不加u修饰符，正则表达式使用\\p和\\P会报错，ECMAScript 预留了这两个类。</p></blockquote><ul><li>Unicode 属性类要指定属性名和属性值。</li><li>对于某些属性，可以只写属性名，或者只写属性值。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">\\p{UnicodePropertyName=UnicodePropertyValue}</span></span>
<span class="line"><span style="color:#e1e4e8;">\\p{UnicodePropertyName}</span></span>
<span class="line"><span style="color:#e1e4e8;">\\p{UnicodePropertyValue}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">\\p{UnicodePropertyName=UnicodePropertyValue}</span></span>
<span class="line"><span style="color:#24292e;">\\p{UnicodePropertyName}</span></span>
<span class="line"><span style="color:#24292e;">\\p{UnicodePropertyValue}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regexGreekSymbol</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\p</span><span style="color:#DBEDFF;">{Script=Greek}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 匹配一个希腊文字母</span></span>
<span class="line"><span style="color:#E1E4E8;">regexGreekSymbol.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;π&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regex</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\p</span><span style="color:#DBEDFF;">{Number}</span><span style="color:#F97583;">+$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 匹配所有数字</span></span>
<span class="line"><span style="color:#E1E4E8;">regex.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;²³¹¼½¾&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">regex.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;㉛㉜㉝&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">regex.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regexArrows</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\p</span><span style="color:#DBEDFF;">{Block=Arrows}</span><span style="color:#F97583;">+$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 匹配所有的箭头字符</span></span>
<span class="line"><span style="color:#E1E4E8;">regexArrows.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regexGreekSymbol</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\p</span><span style="color:#032F62;">{Script=Greek}/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 匹配一个希腊文字母</span></span>
<span class="line"><span style="color:#24292E;">regexGreekSymbol.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;π&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regex</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\p</span><span style="color:#032F62;">{Number}</span><span style="color:#D73A49;">+$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 匹配所有数字</span></span>
<span class="line"><span style="color:#24292E;">regex.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;²³¹¼½¾&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">regex.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;㉛㉜㉝&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">regex.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regexArrows</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\p</span><span style="color:#032F62;">{Block=Arrows}</span><span style="color:#D73A49;">+$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 匹配所有的箭头字符</span></span>
<span class="line"><span style="color:#24292E;">regexArrows.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="具名组匹配" tabindex="-1">具名组匹配 <a class="header-anchor" href="#具名组匹配" aria-label="Permalink to &quot;具名组匹配&quot;">​</a></h2><p>正则表达式里面有三组圆括号。使用exec方法，就可以将这三组匹配结果提取出来。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1999-12-31&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regExp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{4}</span><span style="color:#DBEDFF;">)-(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)-(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> regExp.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">year</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> date[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];   </span><span style="color:#6A737D;">// 1999</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">month</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> date[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];  </span><span style="color:#6A737D;">// 12</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">day</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> date[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];    </span><span style="color:#6A737D;">// 31</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1999-12-31&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regExp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{4}</span><span style="color:#032F62;">)-(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)-(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> regExp.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">year</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];   </span><span style="color:#6A737D;">// 1999</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">month</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];  </span><span style="color:#6A737D;">// 12</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">day</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];    </span><span style="color:#6A737D;">// 31</span></span></code></pre></div><blockquote><p>组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如matchObj[1]）引用，要是组的顺序变了，引用的时候就必须修改序号。</p></blockquote><p>ES2018 引入了<code>具名组匹配</code>（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。</p><ul><li>“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名” --&gt; <code>（?&lt;year&gt;）</code>。然后就可以在exec方法返回结果的groups属性上引用该组名。同时，数字序号（matchObj[1]）依然有效。</li><li>具名组匹配等于为每一组匹配加上了 ID，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。</li><li>如果具名组没有匹配，那么对应的groups对象属性会是undefined。键名在groups是始终存在的。</li><li>如果要在正则表达式内部引用某个“具名组匹配”，可以使用<code>\\k&lt;组名&gt;</code>的写法。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1999-12-31&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regExp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;</span><span style="color:#E1E4E8;">year</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{4}</span><span style="color:#DBEDFF;">)-(?&lt;</span><span style="color:#E1E4E8;">month</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)-(?&lt;</span><span style="color:#E1E4E8;">day</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> regExp.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">year</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> date.groups.year;    </span><span style="color:#6A737D;">// 1999</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">month</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> date.groups.month;  </span><span style="color:#6A737D;">// 12</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">day</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> date.groups.day;      </span><span style="color:#6A737D;">// 31</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1999-12-31&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regExp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /(?&lt;</span><span style="color:#24292E;">year</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{4}</span><span style="color:#032F62;">)-(?&lt;</span><span style="color:#24292E;">month</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)-(?&lt;</span><span style="color:#24292E;">day</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> regExp.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">year</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date.groups.year;    </span><span style="color:#6A737D;">// 1999</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">month</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date.groups.month;  </span><span style="color:#6A737D;">// 12</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">day</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date.groups.day;      </span><span style="color:#6A737D;">// 31</span></span></code></pre></div><p><strong>解构赋值和替换</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> {</span><span style="color:#FFAB70;">groups</span><span style="color:#E1E4E8;">: {one, two}} </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">(?&lt;</span><span style="color:#E1E4E8;">one</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">):(?&lt;</span><span style="color:#E1E4E8;">two</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo:bar&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">one  </span><span style="color:#6A737D;">// foo</span></span>
<span class="line"><span style="color:#E1E4E8;">two  </span><span style="color:#6A737D;">// bar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">groups</span><span style="color:#24292E;">: {one, two}} </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">(?&lt;</span><span style="color:#24292E;">one</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">):(?&lt;</span><span style="color:#24292E;">two</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo:bar&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">one  </span><span style="color:#6A737D;">// foo</span></span>
<span class="line"><span style="color:#24292E;">two  </span><span style="color:#6A737D;">// bar</span></span></code></pre></div><p><strong>具名组外部引用</strong><br> 字符串替换时，使用<code>$&lt;组名&gt;</code>引用具名组。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1999-12-31&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> regExp </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;</span><span style="color:#E1E4E8;">year</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{4}</span><span style="color:#DBEDFF;">)-(?&lt;</span><span style="color:#E1E4E8;">month</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)-(?&lt;</span><span style="color:#E1E4E8;">day</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(regExp,</span><span style="color:#9ECBFF;">&#39;$&lt;year&gt;年$&lt;month&gt;月$&lt;day&gt;日&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// str：1999年12月31日</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1999-12-31&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> regExp </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /(?&lt;</span><span style="color:#24292E;">year</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{4}</span><span style="color:#032F62;">)-(?&lt;</span><span style="color:#24292E;">month</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)-(?&lt;</span><span style="color:#24292E;">day</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(regExp,</span><span style="color:#032F62;">&#39;$&lt;year&gt;年$&lt;month&gt;月$&lt;day&gt;日&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// str：1999年12月31日</span></span></code></pre></div><p><strong>具名组内部引用</strong><br> 如果要在正则表达式内部引用某个“具名组匹配”，可以使用<code>\\k&lt;组名&gt;</code>的写法。数字引用<code>（\\1）</code>依然有效。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regExp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">(?&lt;</span><span style="color:#E1E4E8;">word</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">[a-z]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)!</span><span style="color:#F97583;">\\k&lt;</span><span style="color:#E1E4E8;">word</span><span style="color:#F97583;">&gt;</span><span style="color:#DBEDFF;">!</span><span style="color:#F97583;">\\1$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">regExp.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc!abc!abc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">regExp.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc!abc!abd&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regExp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">(?&lt;</span><span style="color:#24292E;">word</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">[a-z]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)!</span><span style="color:#D73A49;">\\k&lt;</span><span style="color:#24292E;">word</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">!</span><span style="color:#D73A49;">\\1$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">regExp.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc!abc!abc&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">regExp.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc!abc!abd&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h2 id="s-修饰符-dotall-模式" tabindex="-1">s 修饰符（dotAll 模式） <a class="header-anchor" href="#s-修饰符-dotall-模式" aria-label="Permalink to &quot;s 修饰符（dotAll 模式）&quot;">​</a></h2><p>正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的<code> UTF-16 字符</code>，这个可以用u修饰符解决；另一个是<code>行终止符</code> （以下四个）</p><blockquote><p>U+000A 换行符（\\n）<br> U+000D 回车符（\\r）<br> U+2028 行分隔符（line separator）<br> U+2029 段分隔符（paragraph separator）<br></p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">foo</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">bar</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">bar&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false </span></span>
<span class="line"><span style="color:#6A737D;">// 上面代码中，因为.不匹配\\n，所以正则表达式返回false。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">foo</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">]</span><span style="color:#DBEDFF;">bar</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">bar&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#6A737D;">// 很多时候我们希望匹配的是任意单个字符，这是一种变通的写法。（不太符合语义化）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/foo</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">bar/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">bar&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false </span></span>
<span class="line"><span style="color:#6A737D;">// 上面代码中，因为.不匹配\\n，所以正则表达式返回false。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">/foo</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">]</span><span style="color:#032F62;">bar/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">bar&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#6A737D;">// 很多时候我们希望匹配的是任意单个字符，这是一种变通的写法。（不太符合语义化）</span></span></code></pre></div><p>ES2018 引入<code>s修饰符</code>，使得.可以匹配任意单个字符。</p><ul><li>这被称为dotAll模式，即点（dot）代表一切字符。所以，正则表达式还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式。</li><li><code>/s</code>修饰符和多行修饰符<code>/m</code>不冲突，两者一起使用的情况下，.匹配所有字符，而^和$匹配每一行的行首和行尾。</li></ul><h2 id="后行断言" tabindex="-1">后行断言 <a class="header-anchor" href="#后行断言" aria-label="Permalink to &quot;后行断言&quot;">​</a></h2><p>JavaScript 语言的正则表达式，只支持先行断言（lookahead）和先行否定断言（negative lookahead），不支持后行断言（lookbehind）和后行否定断言（negative lookbehind）。<code>ES2018 引入后行断言</code><strong>先行断言</strong></p><ul><li><code>先行断言</code>指的是，x只有在y前面才匹配，必须写成<code>/x(?=y)/</code>；</li><li><code>先行否定断言</code>指的是，x只有不在y前面才匹配，必须写成<code>/x(?!y)/</code>；</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">(?=%)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;100% of US presidents have been male&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// [&quot;100&quot;]</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">(?!%)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;that’s all 44 of them&#39;</span><span style="color:#E1E4E8;">)                 </span><span style="color:#6A737D;">// [&quot;44&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">(?=%)/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;100% of US presidents have been male&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// [&quot;100&quot;]</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">(?!%)/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;that’s all 44 of them&#39;</span><span style="color:#24292E;">)                 </span><span style="color:#6A737D;">// [&quot;44&quot;]</span></span></code></pre></div><blockquote><p>“先行断言” 括号之中的部分<code>(?=%)</code>，是不计入返回结果的。</p></blockquote><p><strong>后行断言</strong></p><ul><li><code>后行断言</code>指的是，x只有在y后面才匹配，必须写成<code>/(?&lt;=y)x/</code>；</li><li><code>后行否定断言</code>指的是，x只有不在y后面才匹配，必须写成<code>/(?&lt;!y)x/</code>；</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;=</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">)</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Benjamin Franklin is on the $100 bill&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// [&quot;100&quot;]</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;!</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">)</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;it’s is worth about €90&#39;</span><span style="color:#E1E4E8;">)                </span><span style="color:#6A737D;">// [&quot;90&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/(?&lt;=</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Benjamin Franklin is on the $100 bill&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// [&quot;100&quot;]</span></span>
<span class="line"><span style="color:#032F62;">/(?&lt;!</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;it’s is worth about €90&#39;</span><span style="color:#24292E;">)                </span><span style="color:#6A737D;">// [&quot;90&quot;]</span></span></code></pre></div><blockquote><p>“后行断言” 括号之中的部分<code>(?&lt;=\\$)</code>，也是不计入返回结果。</p></blockquote><div class="info custom-block"><p class="custom-block-title">注意后行断言匹配步骤</p><p>“后行断言”的实现，需要先匹配/(?&lt;=y)x/的x，然后再回到左边，匹配y的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。</p><ol><li>首先，后行断言的组匹配，与正常情况下结果是不一样的。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;=(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">))</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1053&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [&quot;&quot;, &quot;1&quot;, &quot;053&quot;]</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1053&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [&quot;1053&quot;, &quot;105&quot;, &quot;3&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/(?&lt;=(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">))</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1053&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [&quot;&quot;, &quot;1&quot;, &quot;053&quot;]</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1053&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [&quot;1053&quot;, &quot;105&quot;, &quot;3&quot;]</span></span></code></pre></div><blockquote><p>上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是105和3。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是1和053。</p></blockquote><ol start="2"><li>其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;=(o)d</span><span style="color:#F97583;">\\1</span><span style="color:#DBEDFF;">)r</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hodor&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;=</span><span style="color:#F97583;">\\1</span><span style="color:#DBEDFF;">d(o))r</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hodor&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// [&quot;r&quot;, &quot;o&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/(?&lt;=(o)d</span><span style="color:#D73A49;">\\1</span><span style="color:#032F62;">)r/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hodor&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#032F62;">/(?&lt;=</span><span style="color:#D73A49;">\\1</span><span style="color:#032F62;">d(o))r/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hodor&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// [&quot;r&quot;, &quot;o&quot;]</span></span></code></pre></div><blockquote><p>上面代码中，如果后行断言的反斜杠引用（\\1）放在括号的后面，就不会得到匹配结果，必须放在前面才可以。因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。</p></blockquote></div><h2 id="正则匹配索引" tabindex="-1">正则匹配索引 <a class="header-anchor" href="#正则匹配索引" aria-label="Permalink to &quot;正则匹配索引&quot;">​</a></h2><p>整理ing...</p><h2 id="字符串的正则方法" tabindex="-1">字符串的正则方法 <a class="header-anchor" href="#字符串的正则方法" aria-label="Permalink to &quot;字符串的正则方法&quot;">​</a></h2><ul><li>字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()、split()。</li><li>在语言内部全部调用RegExp的实例方法 <blockquote><p>String.prototype.match 调用 RegExp.prototype[Symbol.match]<br> String.prototype.replace 调用 RegExp.prototype[Symbol.replace]<br> String.prototype.search 调用 RegExp.prototype[Symbol.search]<br> String.prototype.split 调用 RegExp.prototype[Symbol.split]<br></p></blockquote></li></ul><h2 id="实例方法和属性" tabindex="-1">实例方法和属性 <a class="header-anchor" href="#实例方法和属性" aria-label="Permalink to &quot;实例方法和属性&quot;">​</a></h2><ul><li>String.prototype.matchAll()</li><li>RegExp.prototype.unicode：表示是否设置了u修饰符。</li><li>RegExp.prototype.sticky：表示是否设置了y修饰符。</li><li>RegExp.prototype.flags：会返回正则表达式的修饰符。</li></ul>`,65),e=[o];function t(c,r,y,E,F,i){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{D as __pageData,u as default};
