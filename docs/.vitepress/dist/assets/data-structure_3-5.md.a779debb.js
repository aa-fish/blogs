import{_ as a,o as e,c as t,Q as o}from"./chunks/framework.5b0c684c.js";const s="/blogs/assets/data-structure_3-5_1.9a8f8e85.png",l="/blogs/assets/data-structure_3-5_2.baa30078.png",f=JSON.parse('{"title":"什么是队列","description":"","frontmatter":{},"headers":[],"relativePath":"data-structure/3-5.md","filePath":"data-structure/3-5.md","lastUpdated":1729031503000}'),c={name:"data-structure/3-5.md"},r=o('<h1 id="什么是队列" tabindex="-1">什么是队列 <a class="header-anchor" href="#什么是队列" aria-label="Permalink to &quot;什么是队列&quot;">​</a></h1><p>队列（Queue）是具有一定操作约束的线性表（<strong>先进先出</strong>）</p><p>👉 插入和删除操作：只能在一端<code>插入</code>，而在另一端<code>删除</code>。</p><h2 id="队列的抽象数据类型描述" tabindex="-1">队列的抽象数据类型描述 <a class="header-anchor" href="#队列的抽象数据类型描述" aria-label="Permalink to &quot;队列的抽象数据类型描述&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">抽象数据类型描述</p><p>类型名称：队列（Queue）；</p><p>数据对象集：一个有0个或多个元素的有穷线性表；</p><p>操作集：长度为MaxSize的队列Q ∈ Queue，队列元素item ∈ ElementType</p><blockquote><ol><li><p>生成长度为MaxSize的空队列；</p></li><li><p>判断队列Q是否已满；</p></li><li><p>将元素item插入队列Q中；</p></li><li><p>判断队列Q是否为空；</p></li><li><p>将队列的头数据元素从队列中删除并返回；</p></li></ol></blockquote></div><h2 id="队列的实现-循环队列" tabindex="-1">队列的实现（循环队列） <a class="header-anchor" href="#队列的实现-循环队列" aria-label="Permalink to &quot;队列的实现（循环队列）&quot;">​</a></h2><p>队列的顺序存储结构通常由一个一维数组和一个记录队列<code>头元素位置的变量front</code>以及一个记录队列<code>尾元素位置的变量rear</code>组成。</p><p><img src="'+s+'" alt="图片"></p><details class="details custom-block"><summary>【数组实现队列】</summary><p><img src="'+l+'" alt="图片"></p></details><details class="details custom-block"><summary>【链表实现队列】</summary><p>...</p></details><h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h2><ol><li>队列会用于树的<code>层次遍历</code>。</li><li>树的<code>广度优先</code>遍历。</li></ol>',12),i=[r];function d(p,n,u,_,m,h){return e(),t("div",null,i)}const k=a(c,[["render",d]]);export{f as __pageData,k as default};
