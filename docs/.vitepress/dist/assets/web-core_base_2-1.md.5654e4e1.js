import{_ as p,C as e,o as t,c,k as s,H as l,Q as n,a as o}from"./chunks/framework.5b0c684c.js";const j=JSON.parse('{"title":"类型转换","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/2-1.md","filePath":"web-core/base/2-1.md","lastUpdated":1729031503000}'),r={name:"web-core/base/2-1.md"},y=n(`<h1 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h1><h2 id="javascript8大数据类型" tabindex="-1">Javascript8大数据类型 <a class="header-anchor" href="#javascript8大数据类型" aria-label="Permalink to &quot;Javascript8大数据类型&quot;">​</a></h2><ul><li><strong>7种原始类型</strong>： Undefined、Null、Boolean、String、Number、Symbol、Bigint。</li><li><strong>1种引用类型</strong>：Object（普通对象、数组、函数等等）。</li></ul><h2 id="javascript隐式转换规则" tabindex="-1">javascript隐式转换规则 <a class="header-anchor" href="#javascript隐式转换规则" aria-label="Permalink to &quot;javascript隐式转换规则&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里主要讨论null、undefined、布尔型、字符串、数字、数组、普通对象的隐式类型转换。</p></div><h2 id="toboolean" tabindex="-1">ToBoolean <a class="header-anchor" href="#toboolean" aria-label="Permalink to &quot;ToBoolean&quot;">​</a></h2><p><code>ToString</code>不是方法也不是对象，是指其他类型的值转换为<code>Boolean类型的操作</code>。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>除了下表中的6个值会被转成false，其他都会被转换成 true。</p><table><thead><tr><th style="text-align:center;">参数类型</th><th style="text-align:center;">0</th><th style="text-align:center;">&quot;&quot;</th><th style="text-align:center;">NaN</th><th style="text-align:center;">Null</th><th style="text-align:center;">false</th><th style="text-align:center;">Undefined</th></tr></thead><tbody><tr><td style="text-align:center;">转为Boolean类型</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">false</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)              </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)             </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">)            </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)           </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)          </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)              </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)             </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">)            </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)           </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)          </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;">// false</span></span></code></pre></div></div><h2 id="tostring" tabindex="-1">ToString <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;ToString&quot;">​</a></h2><p><code>ToString</code>不是方法也不是对象，是指其他类型的值转换为<code>String类型的操作</code>。</p><div class="info custom-block"><p class="custom-block-title">其它类型转为String类型</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:left;">转为String类型</th></tr></thead><tbody><tr><td style="text-align:center;">Null</td><td style="text-align:left;">null 转为&quot;null&quot;</td></tr><tr><td style="text-align:center;">Undefined</td><td style="text-align:left;">undefined 转为&quot;undefined&quot;</td></tr><tr><td style="text-align:center;">Boolean</td><td style="text-align:left;">true 转为 &quot;true&quot;、false 转为 &quot;false&quot;</td></tr><tr><td style="text-align:center;">Number</td><td style="text-align:left;">1 转为 &quot;1&quot;、1e21 转为 &quot;1e+21&quot;</td></tr><tr><td style="text-align:center;">Array</td><td style="text-align:left;">[1,2,3] 转为 &quot;1,2,3&quot;、[ ] 转为 &quot;&quot;（空字符串）、数组中的null和undefined也转为&quot;&quot;（空字符串）</td></tr><tr><td style="text-align:center;">普通对象</td><td style="text-align:left;">普通对象 转为 &quot;[object Object]&quot;</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)                </span><span style="color:#6A737D;">// &#39;null&#39;</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">)           </span><span style="color:#6A737D;">// &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)                </span><span style="color:#6A737D;">// &#39;true&#39;</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)                  </span><span style="color:#6A737D;">// &#39;10&#39;</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1e21</span><span style="color:#E1E4E8;">)                </span><span style="color:#6A737D;">// &#39;1e+21&#39;</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">])             </span><span style="color:#6A737D;">// &#39;1,2,3&#39;</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">([])                  </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">])              </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">])   </span><span style="color:#6A737D;">// &#39;1,,3&#39;</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">({})                  </span><span style="color:#6A737D;">// &#39;[object Objecr]&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)                </span><span style="color:#6A737D;">// &#39;null&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">)           </span><span style="color:#6A737D;">// &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)                </span><span style="color:#6A737D;">// &#39;true&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)                  </span><span style="color:#6A737D;">// &#39;10&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1e21</span><span style="color:#24292E;">)                </span><span style="color:#6A737D;">// &#39;1e+21&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">])             </span><span style="color:#6A737D;">// &#39;1,2,3&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">([])                  </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">])              </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">])   </span><span style="color:#6A737D;">// &#39;1,,3&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">({})                  </span><span style="color:#6A737D;">// &#39;[object Objecr]&#39;</span></span></code></pre></div></div><h2 id="tonumber" tabindex="-1">ToNumber <a class="header-anchor" href="#tonumber" aria-label="Permalink to &quot;ToNumber&quot;">​</a></h2><p><code>ToString</code>不是方法也不是对象，是指其他类型的值转换为<code>Number类型的操作</code>。</p><div class="info custom-block"><p class="custom-block-title">其它类型转为Number类型</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:left;">转为Number类型</th></tr></thead><tbody><tr><td style="text-align:center;">Null</td><td style="text-align:left;">null 转为 0</td></tr><tr><td style="text-align:center;">Undefined</td><td style="text-align:left;">undefined 转为 NaN</td></tr><tr><td style="text-align:center;">Boolean</td><td style="text-align:left;">true 转为1、false 转为 0</td></tr><tr><td style="text-align:center;">String</td><td style="text-align:left;">如果是纯数字形式，则转为对应的数字，空字符转为0, 否则一律按转换失败处理，转为NaN</td></tr><tr><td style="text-align:center;">Array</td><td style="text-align:left;">执行ToPrimitive</td></tr><tr><td style="text-align:center;">普通对象</td><td style="text-align:left;">执行ToPrimitive</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;10&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;10a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">([]) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">({}) </span><span style="color:#6A737D;">// NaN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;10&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;10a&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">([]) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">({}) </span><span style="color:#6A737D;">// NaN</span></span></code></pre></div></div><h2 id="toprimitive" tabindex="-1">ToPrimitive <a class="header-anchor" href="#toprimitive" aria-label="Permalink to &quot;ToPrimitive&quot;">​</a></h2><p><code>ToPrimitive</code>不是方法也不是对象，是指<code>对象类型转换为原始类型的操作</code>。</p><div class="info custom-block"><p class="custom-block-title">ToPrimitive转换规则</p><p>ToPrimitive它遵循先valueOf后toString的模式期望得到一个原始类型。</p><ol><li><strong>对象转布尔</strong>： 所有的引用类型转布尔都为true。</li></ol><hr><ol start="2"><li><strong>对象转字符串</strong>： <ul><li>判断obj是基本类型则返回</li><li>否则调用toString()方法，如果得到原始类型，则返回</li><li>否则调用valueOf()方法，如果得到原始类型，则返回</li><li>否则报类型错误TypeError</li></ul></li></ol><hr><ol start="3"><li><strong>对象转数字</strong><ul><li>判断obj是基本类型则返回</li><li>否则调用valueOf()方法，如果得到原始类型，则返回</li><li>否则调用toString()方法，如果得到原始类型，则返回</li><li>否则报类型错误TypeError</li></ul></li></ol></div><h2 id="一元运算如-、-、-、" tabindex="-1">一元运算如（+ 、 - 、++ 、--） <a class="header-anchor" href="#一元运算如-、-、-、" aria-label="Permalink to &quot;一元运算如（+ 、 - 、++ 、--）&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>对于布尔值：true 转换为 1，false 转换为 0。</li><li>对于 null：转换为 0。</li><li>对于 undefined：转换为 NaN。</li><li>对于字符串：尝试将字符串转换为数字，如果不能转换则为 NaN。</li><li>对于对象、数组等：执行ToPrimitive。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 一元加号 (+)</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;    </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;   </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;    </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">;   </span><span style="color:#6A737D;">// 123</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">;   </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">{};      </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">[];      </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// NaN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 一元加号 (+)</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;    </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;   </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;    </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">;   </span><span style="color:#6A737D;">// 123</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">;   </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">{};      </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">[];      </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// NaN</span></span></code></pre></div></div><h2 id="双目运行符" tabindex="-1">双目运行符（+） <a class="header-anchor" href="#双目运行符" aria-label="Permalink to &quot;双目运行符（+）&quot;">​</a></h2><p>具有数值相加和字符拼接的两种意义</p>`,21),i={class:"info custom-block"},E=n(`<p class="custom-block-title">INFO</p><p>转换优先级：从高到低</p><ol><li>当一侧为String类型： <ul><li>被识别为字符串拼接，并会优先将另一侧转换为String类型。</li></ul></li><li>当一侧为Number类型： <ul><li>Number + Number：直接相加</li><li>Number + 原始类型：将原始类型转为Number</li><li>Number + 引用类型：引用类型执行ToPrimitive，在进行操作。</li></ul></li><li>其他情况： <ul><li>执行ToPrimitive，在进行操作。</li></ul></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// &#39;11&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> n </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> []      </span><span style="color:#6A737D;">// &#39;1&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> {}     </span><span style="color:#6A737D;">// [object Object]</span></span>
<span class="line"><span style="color:#E1E4E8;">{} </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> []     </span><span style="color:#6A737D;">// &#39;&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">// &#39;11&#39;</span></span>
<span class="line"><span style="color:#24292E;">n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> n </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> []      </span><span style="color:#6A737D;">// &#39;1&#39;</span></span>
<span class="line"><span style="color:#24292E;">[] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> {}     </span><span style="color:#6A737D;">// [object Object]</span></span>
<span class="line"><span style="color:#24292E;">{} </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> []     </span><span style="color:#6A737D;">// &#39;&#39;</span></span></code></pre></div>`,4),d=s("h2",{id:"双目-运算符",tabindex:"-1"},[o("双目==运算符 "),s("a",{class:"header-anchor",href:"#双目-运算符","aria-label":'Permalink to "双目==运算符"'},"​")],-1),u={class:"info custom-block"},F=s("p",{class:"custom-block-title"},"隐士类型转换规则",-1),C=s("li",null,"相同类型的原始值直接比较。",-1),b=s("li",null,"NaN和其他任何类型比较永远返回false（包括和他自己）。",-1),A=s("li",null,"Boolean 和其他任何类型比较，Boolean 首先被转换为 Number 类型。",-1),h=s("li",null,"String和Number比较，先将String转换为Number类型。",-1),D=s("li",null,"原始类型和引用类型做比较时，引用类型会依照ToPrimitive规则转换为原始类型。",-1),g=n(`<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;[object Object]&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> {} </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;1,2,3&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">NaN</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#032F62;">&#39;[object Object]&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> {} </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#032F62;">&#39;1,2,3&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// true</span></span></code></pre></div>`,1),f=s("h2",{id:"双目关系操作符-、-、-、",tabindex:"-1"},[o("双目关系操作符（>、<、>=、<=） "),s("a",{class:"header-anchor",href:"#双目关系操作符-、-、-、","aria-label":'Permalink to "双目关系操作符（>、<、>=、<=）"'},"​")],-1),B=s("p",null,"具有数字比较和字符串比较两种意义",-1),N=s("div",{class:"info custom-block"},[s("p",{class:"custom-block-title"},"隐士类型转化规则"),s("ul",null,[s("li",null,"一侧为Number类型，则转为Number类型比较。"),s("li",null,"一侧为Boolean类型，则转为Number类型比较。"),s("li",null,"两侧均为String时，则比较字符串的字符编码值。"),s("li",null,"其他情况执行ToPrimitive，再进行上面操作。")])],-1);function m(v,_,x,k,q,S){const a=e("lines");return t(),c("div",null,[y,s("div",i,[E,l(a,{text:"注意：当 { } 在 运算符左侧时被解析为一个空的代码块"})]),d,s("div",u,[F,s("ul",null,[C,b,s("li",null,[l(a,{text:"null == undefined比较结果是true，并且也与其自身相等。和其他所有值都不相等"})]),A,h,D]),g]),f,B,N])}const P=p(r,[["render",m]]);export{j as __pageData,P as default};
