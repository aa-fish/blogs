import{_ as e,o as a,c as t,Q as r}from"./chunks/framework.5b0c684c.js";const f=JSON.parse('{"title":"SSRF","description":"","frontmatter":{},"headers":[],"relativePath":"web-optimization/safe/1-3.md","filePath":"web-optimization/safe/1-3.md","lastUpdated":1729031503000}'),o={name:"web-optimization/safe/1-3.md"},i=r('<h1 id="ssrf" tabindex="-1">SSRF <a class="header-anchor" href="#ssrf" aria-label="Permalink to &quot;SSRF&quot;">​</a></h1><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。</p><h2 id="漏洞危害" tabindex="-1">漏洞危害 <a class="header-anchor" href="#漏洞危害" aria-label="Permalink to &quot;漏洞危害&quot;">​</a></h2><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p><p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p><h2 id="途径" tabindex="-1">途径 <a class="header-anchor" href="#途径" aria-label="Permalink to &quot;途径&quot;">​</a></h2><p>SSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。</p><p>以curl为例, 可以使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等功能。</p><hr><p>整理中...</p>',10),s=[i];function n(p,_,c,d,l,h){return a(),t("div",null,s)}const m=e(o,[["render",n]]);export{f as __pageData,m as default};
