import{_ as a,C as t,o as l,c as n,k as p,a as e,H as c,Q as o}from"./chunks/framework.5b0c684c.js";const C=JSON.parse('{"title":"字符编码","description":"","frontmatter":{},"headers":[],"relativePath":"web-core/base/index.md","filePath":"web-core/base/index.md","lastUpdated":1729031503000}'),d={name:"web-core/base/index.md"},r=o('<h1 id="字符编码" tabindex="-1">字符编码 <a class="header-anchor" href="#字符编码" aria-label="Permalink to &quot;字符编码&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>  我们知道计算机的内存或磁盘里存储的数据都是二进制的，那各种字符对应的二进制应该是什么样子呢？计算机一开始要存的字符无非就是英文字母、数字、和一些特殊符号(+-&amp;/?!.等)。所以只需要把这些字符编个号，然后存这些编号就行了。</p><p>  上面说的“编号”准确的叫法应该是 <code>代码点 (code point)</code>，而记录了所有我们需要编码的字符和它的代码点的对照表就是所谓的<code>字符集 (Character set)</code>，不同的字符集收录的字符可能不同，即使是同一个字符，在不同的字符集里也可能有不同的代码点。</p><p>  不管怎么说每个字符集都至少有一种把代码点和二进制进行互相转换的规则，这种规则就叫做<code>字符编码 (Character encoding)</code>。一个字符集可能存在多种字符编码方式，所以即使是同一个字符集里的同一字符(同一个代码点)，按照不同的字符编码转换成二进制，结果也可能不一样。比如一个“Unicode 字符集”里的字符，如果采用 “UTF-32” 编码转化成二进制，得到的一定是一段 4 字节大小的二进制，但用 “UTF-16” 编码得到的二进制大小可能是 2 字节 也可能是 4 字节，这是因为 UTF-16 编码的 代码单元 code unit 是 2 字节，如果遇到代码点大于 65535 的字符，一个代码单元显然不足以表示，只能采用两个代码单元表示，就会占用 4 字节的空间。下面是常见的字符集和不同的编码方式。</p><h2 id="ascii-字符集" tabindex="-1">ASCII 字符集 <a class="header-anchor" href="#ascii-字符集" aria-label="Permalink to &quot;ASCII 字符集&quot;">​</a></h2><p><a href="https://www.asciim.cn/" target="_blank" rel="noreferrer"><strong>ASCⅡ表</strong> 以及 <strong>扩展ASCII码表</strong></a></p><p>计算机中的数据都是 0 和 1，不管是在 RAM 还是 ROM 中。我们常用的十进制的数字会转化成二进制保存，比如 26 会转化成二进制数 11010。</p><p><strong>那么英文字符（英文字母与英文符号）怎么存储呢？</strong></p><blockquote><p>解决方法是一个约定好的在<code>字符和数字间的映射</code>，最流行的是 ASCII。</p></blockquote><p>它是一个很小的字符集，但也是最常见的字符集。它收录了 128 个字符，并用 <code>0-127</code> 的代码点表示它们，他只有一种编码方式，也很简单，就是直接写出代码点的二进制就行了，所以<strong>一个 ASCII 字符只占用一个字节，字节的第一位永远是 0</strong>。比如数字 &quot;0&quot; 的代码点是 48，那么它编码后的的二进制表示就是 0b00110000 (0b 表示二进制)、解码时如果读取到的字节是 00110000，我们也就知道了这个字节表示的是代码点为 48 的字符，即字符 &quot;0&quot;。不过我们在书写 1 个字节时，通常为了方便阅读，会写成 2 个 十六进制数，比如刚才那个字节的十六进制表示就是 0x30(0x 表示十六进制)。同样的，像大写字母 A ，它的代码点是 65 ，编码后的字节就是 0x41、小写字母 a ，它的代码点是 97，字节就是 0x61了。</p>',11),i=o(`<div class="info custom-block"><p class="custom-block-title">Hello 转换为为二进制的过程</p><table><thead><tr><th>String</th><th>H</th><th>e</th><th>l</th><th>l</th><th>o</th></tr></thead><tbody><tr><td>ASCⅡ value</td><td>72</td><td>101</td><td>108</td><td>108</td><td>111</td></tr><tr><td>Binary（二进制）</td><td>01001000</td><td>01100101</td><td>01101100</td><td>01101100</td><td>01101111</td></tr></tbody></table><p>最后把这些二进制数字拼接起来存储即可。每一个字符都会转换成一个 8 位的二进制数字，称为 1 字节（8 bits，1 byte）。每个字符占 1 个字节。</p></div><p><strong>扩展ASCII码</strong></p><p>扩展ASCII码新增了 <code>128-255</code> 字符及对应的码点。主要用于英文、 爱尔兰语、意大利语、挪威语、葡萄牙语、西班牙语、瑞典语以及德语、芬兰语、冰岛语、法语、荷兰语（除了Ĳ字符）、斯洛文尼亚语(除了č字符 ) 等西方文字版本 Microsoft Windows 的预设编码，为 Windows 代码页之一 。</p><h2 id="gb字符编码" tabindex="-1">GB字符编码 <a class="header-anchor" href="#gb字符编码" aria-label="Permalink to &quot;GB字符编码&quot;">​</a></h2><h3 id="gb2312" tabindex="-1">GB2312 <a class="header-anchor" href="#gb2312" aria-label="Permalink to &quot;GB2312&quot;">​</a></h3><p><a href="http://mytju.com/classCode/tools/QuWeiMa_FullList.asp" target="_blank" rel="noreferrer"><strong>GB2312编码表</strong></a></p><p>GB2312 标准由中国国家标准总局 1980 年发布，GB 即国标，<strong>共收录 <code>6763</code> 个汉字</strong>，其中一级汉字 3755 个，二级汉字 3008 个。</p><ul><li><p>GB 2312 的出现，基本满足了汉字的计算机处理需要，它所收录的汉字已经覆盖中国大陆 99.75% 的使用频率。</p></li><li><p>对于人名、古汉语等方面出现的罕用字，GB 2312 不能处理，这导致了后面的 GBK 及 GB 18030 汉字字符集的出现。</p></li><li><p>GB 2312 收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的 682 个全角字符。</p></li><li><p><code>GB 2312 兼容 ASCII 码（0 - 127）</code>，之后对任意一个图形字符都采用两个字节表示，<code>高位字节和低位字节都大于 127</code>。</p></li><li><p>GB 2312 字符集分成 94 个区，每区有 94 个位，分别对应第一字节和第二字节，这种表示方式也称为区位码。</p></li></ul><blockquote><p>01-09 区为特殊符号</p><p>10-15 区为用户自定义符号区（未编码）</p><p>16-55 区为一级汉字，按拼音排序，共 3755 个</p><p>56-87 区为二级汉字，按部首/笔画排序，共 3008 个</p><p>88-94 区为用户自定义汉字区（未编码）</p></blockquote><div class="tip custom-block"><p class="custom-block-title">注意</p><p>为了兼容 ASCII。 GB2312 是双字节编码，为了与 ASCII 码区分开，字节的第 8 位必须是 1，所以至少要从 0x80 (128, 1000 0000) 开始，但是根据上面的规定，0x80 - 0x9f 要留给控制块，所以只能从 0xA0 开始。</p></div><p>在计算机中的存储方式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//“你”  存在于36区 67, 汉字对应两个字节,第一个字节对应的是36,第二字节对应的是67</span></span>
<span class="line"><span style="color:#6A737D;">// 36转为16进制 = 24</span></span>
<span class="line"><span style="color:#6A737D;">// 67转为16进制 = 43</span></span>
<span class="line"><span style="color:#6A737D;">// 从 0xA0 开始</span></span>
<span class="line"><span style="color:#6A737D;">// 0xA0 + 24 = c4</span></span>
<span class="line"><span style="color:#6A737D;">// 0xA0 + 43 = e3</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">gbkBuf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">0xc4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0xe3</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextDecoder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gbk&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(gbkBuf); </span><span style="color:#6A737D;">// 你</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//“你”  存在于36区 67, 汉字对应两个字节,第一个字节对应的是36,第二字节对应的是67</span></span>
<span class="line"><span style="color:#6A737D;">// 36转为16进制 = 24</span></span>
<span class="line"><span style="color:#6A737D;">// 67转为16进制 = 43</span></span>
<span class="line"><span style="color:#6A737D;">// 从 0xA0 开始</span></span>
<span class="line"><span style="color:#6A737D;">// 0xA0 + 24 = c4</span></span>
<span class="line"><span style="color:#6A737D;">// 0xA0 + 43 = e3</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">gbkBuf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">0xc4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0xe3</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextDecoder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;gbk&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(gbkBuf); </span><span style="color:#6A737D;">// 你</span></span></code></pre></div><h3 id="gbk" tabindex="-1">GBK <a class="header-anchor" href="#gbk" aria-label="Permalink to &quot;GBK&quot;">​</a></h3><p>GBK，Chinese Internal Code Specification，即汉字内码扩展规范，K 为汉语拼音 Kuo Zhan（扩展）中的“扩”字的声母，于 1995 年 12 月发布的汉字编码国家标准。</p><p><strong>GBK 共收录 <code>21886</code> 个汉字和图形字符</strong></p><ul><li>GB2312 中的全部汉字（ 6763 个）、非汉字符号</li><li>Big5 中的全部汉字</li><li>与 ISO 10646 相应的国家标准 GB 13000 中的其他 CJK（中日韩） 汉字</li><li>其他汉字、部首、符号，共计 984 个</li></ul><p><code>GBK 采用双字节</code>表示，总体编码范围为 <code>8140-FEFE</code> 之间，首字节在 <code>81-FE</code> 之间，尾字节在 <code>40-FE</code> 之间，<strong>不再规定低位字节大于 127，剔除 XX7F 一条线</strong>。</p><div class="info custom-block"><p class="custom-block-title">GBK 编码区分三部分：</p><p>(1)、汉字区</p><p>GBK/2：0XBOA1-F7FE, 收录 GB 2312 汉字 6763 个，按原序排列</p><p>GBK/3：0X8140-AOFE，收录 CJK 汉字 6080 个</p><p>GBK/4：0XAA40-FEAO，收录 CJK 汉字和增补的汉字 8160 个</p><hr><p>(2)、图形符号区</p><p>GBK/1：0XA1A1-A9FE，除 GB 2312 的符号外，还增补了其它符号</p><p>GBK/5：0XA840-A9AO，扩除非汉字区</p><hr><p>(3)、用户自定义区</p><p>GBK 区域中的空白区，用户可以自己定义字符</p></div><h3 id="gb18030" tabindex="-1">GB18030 <a class="header-anchor" href="#gb18030" aria-label="Permalink to &quot;GB18030&quot;">​</a></h3><p>GB18030，国家标准 GB 18030-2005，是中国目前最新的内码字集，于 2000 年 3 月发布的汉字编码国家标准，与 GB 2312-1980 和 GBK 兼容，共收录汉字 70244 个：</p><ul><li><p>与 UTF-8 相同，采用多字节编码，每个字可以由 1 个、2 个或 4 个字节组成</p></li><li><p>编码空间庞大，最多可定义 161 万个字符</p></li><li><p>支持中国国内少数民族的文字，不需要动用造字区</p></li><li><p>汉字收录范围包含繁体汉字以及日韩汉字</p></li></ul><p>GB 18030 编码是一二四字节变长编码：</p><ul><li><p>单字节，其值从 0 到 0x7F，与 ASCII 码兼容</p></li><li><p>双字节，第一个字节的值从 0x81 到 0xFE，第二个字节的值从 0x40 到 0xFE（不包括 0x7F），与 GBK 标准兼容</p></li><li><p>四字节，第一个字节的值从 0x81 到 0xFE，第二个字节的值从 0x30 到 0x39，第三个字节从 0x81 到 0xFE，第四个字节从 0x30 到 0x39。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">字符处理软件在处理文本时，从左往右依次扫描每个字节：</p><blockquote><p>如果遇到的字节的最高位是 0，那么就会断定该字符只占用了一个字节</p><p>如果遇到的字节的最高位是 1，那么该字符可能占用了两个字节，也可能占用了四个字节，不能妄下断论，所以还要继续往后扫描：</p><blockquote><p>如果第二个字节的高位有两个连续的 0，那么就会断定该字符占用了四个字节 如果第二个字节的高位没有连续的 0，那么就会断定该字符占用了两个字节</p></blockquote><p>当字符占用两个或者四个字节时，GB18030 编码要检测两次，处理效率比 GB2312 和 GBK 都低。</p></blockquote></div><h2 id="unicode-字符集" tabindex="-1">Unicode 字符集 <a class="header-anchor" href="#unicode-字符集" aria-label="Permalink to &quot;Unicode 字符集&quot;">​</a></h2><details class="details custom-block"><summary>Unicode编码概述</summary><p>Unicode编码是一种字符编码标准，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p><p>面对各个国家地区的各自需求，他们都搞出了各种花里胡哨的字符集和字符编码方式，但互联网的发展要求大家必须得有一个统一的字符集和编码方式，不然怎么在一个网页里同时展示中文、英文、日文、韩文、阿拉伯文等。总不能来来回回切换字符集和字符编码方式吧？于是Unicode 标准就出来了。这个字符集的代码点足够多，有一百多万个(从 0x000000 到 0x10FFFF)，这么一来即使全世界所有语言的字符都放进来也还绰绰有余，它包含了100 多种语言中的超过 10 万个独特字符，甚至放了很多 emoji 😂，既然可以表示这么多字符，那岂不是每个字符也需要更大的空间，不然岂不是会重复？确实如此，需要 4 个字节来表示。但 Unicode 提供了多种字符编码方式，有些编码方式可以帮我们节省空间，比如大家最常听到的 UTF-8，接下来我们就一起了解一下 <code>Unicode 最常见的三种编码方式：UTF-32 编码、UTF-16 编码、UTF-8 编码</code></p></details><p>字符集： 为每一个 <code>字符</code> 分配一个唯一的数字 ID（学名为<code>码位/码点</code>/Code Point）。</p><p>编码规则： 将 <code>码位</code> 转换为<code> 字节序列</code> 的规则。</p><h3 id="utf-32-与-ucs-4" tabindex="-1">UTF-32 与 UCS-4 <a class="header-anchor" href="#utf-32-与-ucs-4" aria-label="Permalink to &quot;UTF-32 与 UCS-4&quot;">​</a></h3><p>在 Unicode 与 ISO 10646 合并之前，ISO 10646 标准为“通用字符集”（UCS：Unicode Character Set）定义了一种 31 位的编码形式（即 UCS-4），<code>其编码固定占用 4 个字节</code>，编码空间为 0x00000000~0x7FFFFFFF（可以编码 20 多亿个字符）。 UCS-4 有 20 多亿个编码空间，但实际使用范围并不超过 0x10FFFF，并且为了兼容 Unicode 标准，ISO 也承诺将不会为超出 0x10FFFF 的 UCS-4 编码赋值。由此 UTF-32 编码被提出来了，它的编码值与 UCS-4 相同，只不过其编码空间被限定在了 0~0x10FFFF 之间。因此也可以说：UTF-32 是 UCS-4 的一个子集。</p><h3 id="utf-16-与-ucs-2" tabindex="-1">UTF-16 与 UCS-2 <a class="header-anchor" href="#utf-16-与-ucs-2" aria-label="Permalink to &quot;UTF-16 与 UCS-2&quot;">​</a></h3><p>除了 UCS-4，ISO 10646 标准为“通用字符集”（UCS）定义了一种 16 位的编码形式（即 UCS-2），<code>其编码固定占用 2 个字节</code>，它包含 65536 个编码空间（可以为全世界最常用的 63K 字符编码，为了兼容 Unicode，0xD800-0xDFFF 之间的码位未使用）。例：“汉”的 UCS-2 编码为 6C49。 但两个字节并不足以真正地“一统江湖”（a fixed-width 2-byte encoding could not encode enough characters to be truly universal），于是 UTF-16 诞生了，与 UCS-2 一样，它使用两个字节为全世界最常用的 63K 字符编码，不同的是，它使用 4 个字节对不常用的字符进行编码。UTF-16 属于变长编码。</p><h3 id="utf-8" tabindex="-1">UTF-8 <a class="header-anchor" href="#utf-8" aria-label="Permalink to &quot;UTF-8&quot;">​</a></h3><p>从前述内容可以看出：无论是 UTF-16/32 还是 UCS-2/4，一个字符都需要多个字节来编码，这对那些英语国家来说浪费空间！于是UTF-8 产生了。在 UTF-8 编码中，ASCII 码中的字符还是 ASCII 码的值，只需要一个字节表示，其余的字符需要 2 字节、3 字节或 4 字节来表示。</p><p>UTF-8 的编码规则：</p><ul><li><p>(1) 对于 ASCII 码中的符号，使用单字节编码，其编码值与 ASCII 值相同。其中 ASCII 值的范围为 0~0x7F，所有编码的二进制值中第一位为 0（这个正好可以用来区分单字节编码和多字节编码）。</p></li><li><p>(2) 其它字符用多个字节来编码（假设用 N 个字节），多字节编码需满足：第一个字节的前 N 位都为 1，第 N+1 位为 0，后面 N-1 个字节的前两位都为 10，这 N 个字节中其余位全部用来存储 Unicode 中的码位值。</p></li></ul><table><thead><tr><th style="text-align:center;">字节数</th><th>Unicode</th><th>十进制</th><th>UTF-8 编码(8 bits，1-4 byte)</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td>000000-00007F</td><td>0-127</td><td>0xxxxxxx</td></tr><tr><td style="text-align:center;">2</td><td>000080-0007FF</td><td>128-2047</td><td>110xxxxx 10xxxxxx</td></tr><tr><td style="text-align:center;">3</td><td>000800-00FFFF</td><td>2048-65535</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td style="text-align:center;">4</td><td>010000-10FFFF</td><td>65536-1114111</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>UTF-8 转码</p><ol><li><p>&quot;你&quot; 对应的Unicode码为: 0x0000 4F60</p></li><li><p>0x0000 4F60 转为 二进制结果为: <code>0000</code> <code>0000</code> <code>0000</code> <code>0000</code> <code>0100</code> <code>1111</code> <code>0110</code> <code>0000</code> (32位)</p></li><li><p>&quot;你&quot; 对应第三区 UTF-8 编码格式为: <code>1110xxxx</code> <code>10xxxxxx</code> <code>10xxxxxx</code></p></li><li><p>第2步的结果与第3步的 UTF-8 编码格式对应上(右往左): <code>11100100</code> <code>10111101</code> <code>10100000</code></p></li><li><p>将三个字节转为二进制 <code>11100100</code> <code>10111101</code> <code>10100000</code> ==&gt; E4 BD A0</p></li><li><p>&quot;你&quot; 对应的UTF-8编码为: E4 BD A0</p></li></ol>`,39);function x(F,h,u,y,b,E){const s=t("lines");return l(),n("div",null,[r,p("p",null,[e("ASCII 字符集中除了大小写英文字母和数字外，"),c(s,{text:"其中 0 - 31 和 127 的代码点是用来表示一些控制字符"}),e("的。除去字母、数字、控制字符，剩余的代码点就给了一些特殊符号，比如 +-&/?!. 等。ASCII 编码是一种非常节省空间的编码方式，任何一个 ASCII 字符都只需要一个字节就足以表示了。")]),i])}const B=a(d,[["render",x]]);export{C as __pageData,B as default};
