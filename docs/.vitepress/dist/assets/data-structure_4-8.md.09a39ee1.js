import{_ as t,o as a,c as e,Q as r}from"./chunks/framework.5b0c684c.js";const s="/blogs/assets/data-structure_4-8_1.08d7804d.png",f=JSON.parse('{"title":"快速排序","description":"","frontmatter":{},"headers":[],"relativePath":"data-structure/4-8.md","filePath":"data-structure/4-8.md","lastUpdated":1729031503000}'),o={name:"data-structure/4-8.md"},_=r('<h1 id="快速排序" tabindex="-1">快速排序 <a class="header-anchor" href="#快速排序" aria-label="Permalink to &quot;快速排序&quot;">​</a></h1><p>快速排序在多数的情况下对大规模的随机数据处理表现还是相当出色的。前提的条件是把快速排序的细节处理好，否则就是不是快速排序了。</p><h2 id="分而治之" tabindex="-1">分而治之 <a class="header-anchor" href="#分而治之" aria-label="Permalink to &quot;分而治之&quot;">​</a></h2><p>下面是快速排序的基本思想流程 <img src="'+s+'" alt="图片"> 快速排序的伪码描述</p>',4),c=[_];function d(n,i,l,p,u,h){return a(),e("div",null,c)}const P=t(o,[["render",d]]);export{f as __pageData,P as default};
