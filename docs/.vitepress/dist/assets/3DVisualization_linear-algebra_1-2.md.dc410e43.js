import{_ as e,o as a,c as o,Q as t}from"./chunks/framework.5b0c684c.js";const r="/blogs/assets/linear-algebra_1-2_1.7582970e.png",s="/blogs/assets/linear-algebra_1-2_2.5e13c944.png",c="/blogs/assets/linear-algebra_1-2_3.29416779.png",n="/blogs/assets/linear-algebra_1-2_4.a8fcf5bf.png",l="/blogs/assets/linear-algebra_1-2_5.0f07ff95.png",k=JSON.parse('{"title":"全排列","description":"","frontmatter":{},"headers":[],"relativePath":"3DVisualization/linear-algebra/1-2.md","filePath":"3DVisualization/linear-algebra/1-2.md","lastUpdated":1729031503000}'),i={name:"3DVisualization/linear-algebra/1-2.md"},p=t('<h1 id="全排列" tabindex="-1">全排列 <a class="header-anchor" href="#全排列" aria-label="Permalink to &quot;全排列&quot;">​</a></h1><h2 id="_3-元排列" tabindex="-1">3 元排列 <a class="header-anchor" href="#_3-元排列" aria-label="Permalink to &quot;3 元排列&quot;">​</a></h2><p><code>3元排列</code>(有1.2.3三个数,不重不漏,按一定顺序排成一行,即是“一个&quot;3元排列)</p><p>有多少种排列方式呢？</p><p>3元排总共 有 <code>3!</code> 种排列方式。 <img src="'+r+'" alt="图片"></p><h2 id="n-元排列" tabindex="-1">N 元排列 <a class="header-anchor" href="#n-元排列" aria-label="Permalink to &quot;N 元排列&quot;">​</a></h2><p>n元排列(有1.2..n.共n个数,不重不漏,按一定顺序排成一行,即是&quot;一个&quot;n元排列)</p><p>n元排总共 有 <code>n*(n-1)...*1</code> = <code>n!</code> 种排列方式。</p><h2 id="逆序数" tabindex="-1">逆序数 <a class="header-anchor" href="#逆序数" aria-label="Permalink to &quot;逆序数&quot;">​</a></h2><p>若存在一个大数排在一个小数前面,则这一对数构成<code>“一个逆序”</code>，而逆序数,其实就是<code>&quot;逆序的总个数&quot;</code>。</p><p>逆序数不在乎个数、只在乎奇偶。</p><p>示例：</p><blockquote><p>t（12...n） = 0</p><p>t（32514）= 5</p></blockquote><h2 id="奇偶排列" tabindex="-1">奇偶排列 <a class="header-anchor" href="#奇偶排列" aria-label="Permalink to &quot;奇偶排列&quot;">​</a></h2><ul><li><p>逆序数为<code>&quot;奇&quot;</code>称为<code>奇排列</code>；</p></li><li><p>逆序数为<code>&quot;偶&quot;</code>称为<code>偶排列</code>；</p></li></ul><p><strong>兑换辆数，奇偶改变</strong>。</p><p><strong>相邻兑换</strong><img src="'+s+'" alt="图片"></p><blockquote><p>一组排列,若相邻两个数对换,则奇偶性发生改变。逆序数 <code>+1</code> 或 <code>-1</code></p></blockquote><p><strong>任意兑换</strong><img src="'+c+'" alt="图片"></p><blockquote><p>一组排列，任意两个数对换（2k+1为基数次）,则奇偶性<code>必然</code>发生改变。</p></blockquote><p><strong>试题</strong><img src="'+n+'" alt="图片"><img src="'+l+'" alt="图片"></p>',21),d=[p];function _(u,g,h,b,q,m){return a(),o("div",null,d)}const P=e(i,[["render",_]]);export{k as __pageData,P as default};
