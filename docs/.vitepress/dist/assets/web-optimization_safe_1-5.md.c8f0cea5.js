import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.5b0c684c.js";const h=JSON.parse('{"title":"CDN劫持","description":"","frontmatter":{},"headers":[],"relativePath":"web-optimization/safe/1-5.md","filePath":"web-optimization/safe/1-5.md","lastUpdated":1729031503000}'),p={name:"web-optimization/safe/1-5.md"},l=o(`<h1 id="cdn劫持" tabindex="-1">CDN劫持 <a class="header-anchor" href="#cdn劫持" aria-label="Permalink to &quot;CDN劫持&quot;">​</a></h1><p>网络上有很多黑客为了让用户能够登录自己开发的钓鱼网站，都会通过对CDN进行劫持的方法，让用户自动转入自己开发的网站。而很多用户却往往无法察觉到自己已经被劫持。其实验证被劫持的方法，就是输入任何网址看看所打开的网页是否和自己输入的网址一致，</p><h2 id="cdn劫持原理" tabindex="-1">CDN劫持原理 <a class="header-anchor" href="#cdn劫持原理" aria-label="Permalink to &quot;CDN劫持原理&quot;">​</a></h2><p>CDN——Content Delivery Network，内容分发网络。具体来说，CDN就是采用更多的缓存服务器（CDN边缘节点），布放在用户访问相对集中的地区或网络中。当用户访问网站时，利用全局负载技术，将用户的访问指向距离最近的缓存服务器上，由缓存服务器响应用户请求。（有点像电商的本地仓吧？）CDN应用广泛，支持多种行业、多种场景内容加速，例如：图片小文件、大文件下载、视音频点播、直播流媒体、全站加速、安全加速。</p><h2 id="sri防范" tabindex="-1">SRI防范 <a class="header-anchor" href="#sri防范" aria-label="Permalink to &quot;SRI防范&quot;">​</a></h2><p>SRI 全称 Subresource Integrity - 子资源完整性，是指浏览器通过验证资源的完整性（通常从 CDN 获取）来判断其是否被篡改的安全特性。</p><p>通过给 link 标签或者 script 标签增加 integrity 属性即可开启 SRI 功能，比如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text/javascript&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;//s.url.cn/xxxx/aaa.js&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">integrity</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;sha256-xxx sha384-yyy&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">crossorigin</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;anonymous&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text/javascript&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;//s.url.cn/xxxx/aaa.js&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">integrity</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;sha256-xxx sha384-yyy&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">crossorigin</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;anonymous&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><blockquote><p>integrity 值分成两个部分，第一部分指定哈希值的生成算法（sha256、sha384 及 sha512），第二部分是经过 base64 编码的实际哈希值，两者之间通过一个短横（-）分割。integrity 值可以包含多个由空格分隔的哈希值，只要文件匹配其中任意一个哈希值，就可以通过校验并加载该资源。开启 SRI 能有效保证页面引用资源的完整性，避免恶意代码执行。</p></blockquote><p>浏览器处理SRI：</p><ul><li>当浏览器在 script 或者 link 标签中遇到 integrity 属性之后，会在执行脚本或者应用样式表之前对比所加载文件的哈希值和期望的哈希值。</li><li>当脚本或者样式表的哈希值和期望的不一致时，浏览器必须拒绝执行脚本或者应用样式表，并且必须返回一个网络错误说明获得脚本或样式表失败。</li></ul>`,11),t=[l];function e(c,r,i,y,E,u){return a(),n("div",null,t)}const _=s(p,[["render",e]]);export{h as __pageData,_ as default};
