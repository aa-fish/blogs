import{_ as t,o as s,c as a,Q as e}from"./chunks/framework.5b0c684c.js";const o="/blogs/assets/data-structure_3-2_2.4a227635.png",c="/blogs/assets/data-structure_3-2_3.4e5f1603.png",r="/blogs/assets/data-structure_3-2_4.fca77b7a.png",l="/blogs/assets/data-structure_3-2_5.82ec1412.png",i="/blogs/assets/data-structure_3-2_6.c351ab13.png",_="/blogs/assets/data-structure_3-2_7.0da4a551.png",d="/blogs/assets/data-structure_3-2_8.502370ec.png",p="/blogs/assets/data-structure_3-2_9.f9190dce.png",n="/blogs/assets/data-structure_3-2_10.36338662.png",u="/blogs/assets/data-structure_3-2_11.fa004f9b.png",m="/blogs/assets/data-structure_3-2_12.e36057d4.png",g="/blogs/assets/data-structure_3-2_13.ee421fd8.png",b="/blogs/assets/data-structure_3-2_1.ff7de277.png",h="/blogs/assets/data-structure_3-2_14.ce6dca3d.png",f="/blogs/assets/data-structure_3-2_15.39137a28.png",k="/blogs/assets/data-structure_3-2_16.3e54e0e4.png",N=JSON.parse('{"title":"什么是线性表","description":"","frontmatter":{},"headers":[],"relativePath":"data-structure/3-2.md","filePath":"data-structure/3-2.md","lastUpdated":1729031503000}'),q={name:"data-structure/3-2.md"},P=e('<h1 id="什么是线性表" tabindex="-1">什么是线性表 <a class="header-anchor" href="#什么是线性表" aria-label="Permalink to &quot;什么是线性表&quot;">​</a></h1><p>线性表（Linear Lsit）：由<code>同类型数据元素</code>构成<code>有序序列</code>的线性结构；</p><p>👉 表中元素个数称为线性表的<code>长度</code>；</p><p>👉 线性表没有元素时，称为<code>空表</code>；</p><p>👉 表的起始位置称为<code>表头</code>，表的结束位置称为<code>表尾</code>；</p><h2 id="线性表的抽象数据类型描述" tabindex="-1">线性表的抽象数据类型描述 <a class="header-anchor" href="#线性表的抽象数据类型描述" aria-label="Permalink to &quot;线性表的抽象数据类型描述&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">抽象数据类型描述</p><p>类型名称：线性表(List)；</p><p>数据对象集：线性表是n(n&gt;=0)个元素构成的有序序列（a1,a2,a3....an）；</p><p>操作集：线性表L∈List，整数i表示位置，元素X∈ElementType；</p><blockquote><p>1、初始化一个空线性表L；</p><p>2、根据位序K，返回相应元素；</p><p>3、在线性中查找X的第一次出现位置；</p><p>4、在位序i前插入一个新元素X；</p><p>5、删除指定为序i的元素；</p><p>6、返回线性表L的长度n；</p></blockquote></div><h2 id="线性表的实现" tabindex="-1">线性表的实现 <a class="header-anchor" href="#线性表的实现" aria-label="Permalink to &quot;线性表的实现&quot;">​</a></h2><details class="details custom-block"><summary>【数组实现线性表】</summary><ol><li>初始化（建立空的顺序表） <img src="'+o+'" alt="图片"></li><li>查找 ---- O(n) <img src="'+c+'" alt="图片"></li><li>插入 <img src="'+r+'" alt="图片"><img src="'+l+'" alt="图片"></li><li>删除 <img src="'+i+'" alt="图片"><img src="'+_+'" alt="图片"></li></ol></details><details class="details custom-block"><summary>【链表实现线性表】</summary><ol><li>长度 <img src="'+d+'" alt="图片"></li><li>查找 <img src="'+p+'" alt="图片"></li><li>插入 <img src="'+n+'" alt="图片"><img src="'+u+'" alt="图片"></li><li>删除 <img src="'+m+'" alt="图片"><img src="'+g+'" alt="图片"></li></ol></details><h2 id="广义表" tabindex="-1">广义表 <a class="header-anchor" href="#广义表" aria-label="Permalink to &quot;广义表&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">什么是广义表</p><p><img src="'+b+'" alt="图片"> 二元多项式，表示为一元多项式。---&gt; 广义表</p></div><p>👉 广义表是<code>线性表的推广</code>；</p><p>👉 <code>对于线性表而言，n个元素都是基本的单元</code>，而<code>广义表中</code>，这些元素也可以是<code>另一个广义表</code>；</p><blockquote><p>c++语言中通过联合类型union解决共存问题，union可以把不同类型的数据组合在一起；</p></blockquote><h2 id="多重链表" tabindex="-1">多重链表 <a class="header-anchor" href="#多重链表" aria-label="Permalink to &quot;多重链表&quot;">​</a></h2><p><img src="'+h+'" alt="图片"><img src="'+f+'" alt="图片"><img src="'+k+'" alt="图片"></p>',17),x=[P];function L(T,v,y,S,$,A){return s(),a("div",null,x)}const V=t(q,[["render",L]]);export{N as __pageData,V as default};
