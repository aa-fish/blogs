import{_ as t,o as e,c as T,Q as o}from"./chunks/framework.5b0c684c.js";const d=JSON.parse('{"title":"Https","description":"","frontmatter":{},"headers":[],"relativePath":"web-optimization/safe/1-6.md","filePath":"web-optimization/safe/1-6.md","lastUpdated":1729031503000}'),a={name:"web-optimization/safe/1-6.md"},i=o('<h1 id="https" tabindex="-1">Https <a class="header-anchor" href="#https" aria-label="Permalink to &quot;Https&quot;">​</a></h1><p>HTTP严格传输安全(HSTS)是一种安全功能，web服务器通过它来告诉浏览器仅用HTTPS来与之通讯，而不是使用HTTP。</p><p>HSTS代表HTTP严格传输安全性，由IETF在2012年的RFC 6797中指定。创建它是为了在站点通过HTTPS运行时强制浏览器使用安全连接。它是您添加到Web服务器的安全标头，并在响应标头中反映为Strict-Transport-Security。HSTS很重要，因为它解决了以下问题：</p><ul><li>访问者尝试使用您网站页面的不安全版本 <code>(HTTP://)</code> 的任何尝试都将自动转发到安全版本 <code>(HTTPS://)</code>。</li><li>旧的HTTP书签和输入您网站的HTTP版本的人会让您面临中间人攻击。在这些攻击中，攻击者改变各方之间的通信并诱使他们认为他们仍在相互通信。</li><li>不允许覆盖无效的证书消息，这反过来又保护了访问者。</li><li>Cookie劫持：当有人通过不安全的连接窃取会话cookie时，就会发生这种情况。Cookie可以包含各种有价值的信息，例如信用卡信息、姓名、地址等。</li></ul><p>注意，如果之前没有使用HTTPS协议访问过该站点，那么HSTS是不奏效的，只有浏览器曾经与服务器创建过一次安全连接并且网站通过HTTPS协议告诉浏览器它支持HSTS，那么之后浏览器才会强制使用HTTPS，即使链接被换成了HTTP。</p><p>虽然我们的系统默认更喜欢HTTPS版本，但您也可以通过将您的HTTP站点重定向到您的HTTPS版本并在您的服务器上实施HSTS标头，使其他搜索引擎更清楚这一点。</p>',6),s=[i];function p(c,r,_,S,n,H){return e(),T("div",null,s)}const P=t(a,[["render",p]]);export{d as __pageData,P as default};
